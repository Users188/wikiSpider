[
  {
    "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
    "title": "Python (programming language)",
    "text": [
      "General-purpose, high-level programming language",
      "\n",
      "\n",
      "\n",
      "Python",
      "Paradigm",
      "Multi-paradigm",
      ": ",
      "functional",
      ", ",
      "imperative",
      ", ",
      "object-oriented",
      ", ",
      "structured",
      ", ",
      "reflective",
      "Designed\u00a0by",
      "Guido van Rossum",
      "Developer",
      "Python Software Foundation",
      "First\u00a0appeared",
      "1990",
      "; 30\u00a0years ago",
      "\u00a0(",
      "1990",
      ")",
      "[1]",
      "Stable release",
      "3.9.0\n   / 5\u00a0October 2020",
      "; 6\u00a0days ago",
      "\u00a0(",
      "2020-10-05",
      ")",
      "[2]",
      "Preview release",
      "3.10.0a1\n   / 5\u00a0October 2020",
      "; 6\u00a0days ago",
      "\u00a0(",
      "2020-10-05",
      ")",
      "[3]",
      "\n",
      "Typing discipline",
      "Duck",
      ", ",
      "dynamic",
      ", ",
      "gradual",
      " (since 3.5)",
      "[4]",
      "OS",
      "Linux",
      ", ",
      "macOS",
      ", ",
      "Windows",
      " ",
      " and more",
      "License",
      "Python Software Foundation License",
      "Filename extensions",
      ".py, .pyi, .pyc, .pyd, .pyo (prior to 3.5),",
      "[5]",
      " .pyw, .pyz (since 3.5)",
      "[6]",
      "Website",
      "www",
      ".python",
      ".org",
      "Major ",
      "implementations",
      "CPython",
      ", ",
      "PyPy",
      ", ",
      "Stackless Python",
      ", ",
      "MicroPython",
      ", ",
      "CircuitPython",
      ", ",
      "IronPython",
      ", ",
      "Jython",
      ", RustPython",
      "Dialects",
      "Cython",
      ", ",
      "RPython",
      ", ",
      "Starlark",
      "[7]",
      "Influenced by",
      "ABC",
      ",",
      "[8]",
      " ",
      "Ada",
      ",",
      "[9]",
      " ",
      "ALGOL 68",
      ",",
      "[10]",
      " ",
      "APL",
      ",",
      "[11]",
      " ",
      "C",
      ",",
      "[12]",
      " ",
      "C++",
      ",",
      "[13]",
      " ",
      "CLU",
      ",",
      "[14]",
      " ",
      "Dylan",
      ",",
      "[15]",
      " ",
      "Haskell",
      ",",
      "[16]",
      " ",
      "Icon",
      ",",
      "[17]",
      " ",
      "Java",
      ",",
      "[18]",
      " ",
      "Lisp",
      ",",
      "[19]",
      " ",
      "Modula-3",
      ",",
      "[13]",
      " ",
      "Perl",
      ", ",
      "Standard ML",
      "[11]",
      "Influenced",
      "Apache Groovy",
      ", ",
      "Boo",
      ", ",
      "Cobra",
      ", ",
      "CoffeeScript",
      ",",
      "[20]",
      " ",
      "D",
      ", ",
      "F#",
      ", ",
      "Genie",
      ",",
      "[21]",
      " ",
      "Go",
      ", ",
      "JavaScript",
      ",",
      "[22]",
      "[23]",
      " ",
      "Julia",
      ",",
      "[24]",
      " ",
      "Nim",
      ", Ring,",
      "[25]",
      " ",
      "Ruby",
      ",",
      "[26]",
      " ",
      "Swift",
      "[27]",
      "\n",
      " ",
      "Python Programming",
      " at Wikibooks",
      "\n",
      "\n",
      "Python",
      " is an ",
      "interpreted",
      ", ",
      "high-level",
      " and ",
      "general-purpose programming language",
      ". Created by ",
      "Guido van Rossum",
      " and first released in 1991, Python's design philosophy emphasizes ",
      "code readability",
      " with its notable use of ",
      "significant whitespace",
      ". Its ",
      "language constructs",
      " and ",
      "object-oriented",
      " approach aim to help ",
      "programmers",
      " write clear, logical code for small and large-scale projects.",
      "[28]",
      "\n",
      "Python is ",
      "dynamically typed",
      " and ",
      "garbage-collected",
      ". It supports multiple ",
      "programming paradigms",
      ", including ",
      "structured",
      " (particularly, ",
      "procedural",
      "), ",
      "object-oriented",
      ", and ",
      "functional programming",
      ". Python is often described as a \"batteries included\" language due to its comprehensive ",
      "standard library",
      ".",
      "[29]",
      "\n",
      "Python was created in the late 1980s as a successor to the ",
      "ABC language",
      ". Python\u00a02.0, released in 2000, introduced features like ",
      "list comprehensions",
      " and a garbage collection system with ",
      "reference counting",
      ".\n",
      "Python\u00a03.0, released in 2008, was a major revision of the language that is not completely ",
      "backward-compatible",
      ", and much Python\u00a02 code does not run unmodified on Python\u00a03.\n",
      "The Python\u00a02 language was officially discontinued in 2020 (first planned for 2015), and \"Python 2.7.18 is the last Python 2.7 release and therefore the last Python 2 release.\"",
      "[30]",
      " No more security patches or other improvements will be released for it.",
      "[31]",
      "[32]",
      " With Python 2's ",
      "end-of-life",
      ", only  Python\u00a03.6.x",
      "[33]",
      " and later are supported.\n",
      "Python ",
      "interpreters",
      " are available for many ",
      "operating systems",
      ". A global community of programmers develops and maintains ",
      "CPython",
      ", a ",
      "free and open-source",
      "[34]",
      " ",
      "reference implementation",
      ". A non-profit organization, the ",
      "Python Software Foundation",
      ", manages and directs resources for Python and CPython development.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "History",
      "\n",
      "2",
      " ",
      "Features and philosophy",
      "\n",
      "3",
      " ",
      "Syntax and semantics",
      "\n",
      "\n",
      "3.1",
      " ",
      "Indentation",
      "\n",
      "3.2",
      " ",
      "Statements and control flow",
      "\n",
      "3.3",
      " ",
      "Expressions",
      "\n",
      "3.4",
      " ",
      "Methods",
      "\n",
      "3.5",
      " ",
      "Typing",
      "\n",
      "3.6",
      " ",
      "Mathematics",
      "\n",
      "\n",
      "\n",
      "4",
      " ",
      "Python programming examples",
      "\n",
      "5",
      " ",
      "Libraries",
      "\n",
      "6",
      " ",
      "Development environments",
      "\n",
      "7",
      " ",
      "Implementations",
      "\n",
      "\n",
      "7.1",
      " ",
      "Reference implementation",
      "\n",
      "7.2",
      " ",
      "Other implementations",
      "\n",
      "7.3",
      " ",
      "Unsupported implementations",
      "\n",
      "7.4",
      " ",
      "Cross-compilers to other languages",
      "\n",
      "7.5",
      " ",
      "Performance",
      "\n",
      "\n",
      "\n",
      "8",
      " ",
      "Development",
      "\n",
      "9",
      " ",
      "API documentation generators",
      "\n",
      "10",
      " ",
      "Naming",
      "\n",
      "11",
      " ",
      "Uses",
      "\n",
      "12",
      " ",
      "Languages influenced by Python",
      "\n",
      "13",
      " ",
      "See also",
      "\n",
      "14",
      " ",
      "References",
      "\n",
      "\n",
      "14.1",
      " ",
      "Sources",
      "\n",
      "\n",
      "\n",
      "15",
      " ",
      "Further reading",
      "\n",
      "16",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Guido van Rossum",
      " at OSCON 2006",
      "\n",
      "Main article: ",
      "History of Python",
      "\n",
      "Python was conceived in the late 1980s",
      "[35]",
      " by ",
      "Guido van Rossum",
      " at ",
      "Centrum Wiskunde & Informatica",
      " (CWI) in the ",
      "Netherlands",
      " as a successor to the ",
      "ABC language",
      " (itself inspired by ",
      "SETL",
      "),",
      "[36]",
      " capable of ",
      "exception handling",
      " and interfacing with the ",
      "Amoeba",
      " operating system.",
      "[8]",
      " Its implementation began in December 1989.",
      "[37]",
      " Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's ",
      "Benevolent Dictator For Life",
      ", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.",
      "[38]",
      " He now shares his leadership as a member of a five-person steering council.",
      "[39]",
      "[40]",
      "[41]",
      " In January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, Barry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering Council\" to lead the project.",
      "[42]",
      "\n",
      "Python 2.0 was released on 16 October 2000 with many major new features, including a ",
      "cycle-detecting",
      " ",
      "garbage collector",
      " and support for ",
      "Unicode",
      ".",
      "[43]",
      "\n",
      "Python 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely ",
      "backward-compatible",
      ".",
      "[44]",
      " Many of its major features were ",
      "backported",
      " to Python 2.6.x",
      "[45]",
      " and 2.7.x version series.  Releases of Python 3 include the ",
      "2to3",
      " utility, which automates (at least partially) the translation of Python 2 code to Python 3.",
      "[46]",
      "\n",
      "Python 2.7's ",
      "end-of-life",
      " date was initially set at 2015 then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.",
      "[47]",
      "[48]",
      "\n",
      "\n",
      "Features and philosophy",
      "[",
      "edit",
      "]",
      "\n",
      "Python is a ",
      "multi-paradigm programming language",
      ". ",
      "Object-oriented programming",
      " and ",
      "structured programming",
      " are fully supported, and many of its features support ",
      "functional programming",
      " and ",
      "aspect-oriented programming",
      " (including by ",
      "metaprogramming",
      "[49]",
      " and ",
      "metaobjects",
      " (magic methods)).",
      "[50]",
      " Many other paradigms are supported via extensions, including ",
      "design by contract",
      "[51]",
      "[52]",
      " and ",
      "logic programming",
      ".",
      "[53]",
      "\n",
      "Python uses ",
      "dynamic typing",
      " and a combination of ",
      "reference counting",
      " and a cycle-detecting garbage collector for ",
      "memory management",
      ".",
      "[54]",
      " It also features dynamic ",
      "name resolution",
      " (",
      "late binding",
      "), which binds method and variable names during program execution.\n",
      "Python's design offers some support for ",
      "functional programming",
      " in the ",
      "Lisp",
      " tradition. It has ",
      "filter",
      ", ",
      "map",
      ", and ",
      "reduce",
      " functions; ",
      "list comprehensions",
      ", ",
      "dictionaries",
      ", sets, and ",
      "generator",
      " expressions.",
      "[55]",
      " The standard library has two modules (itertools and functools) that implement functional tools borrowed from ",
      "Haskell",
      " and ",
      "Standard ML",
      ".",
      "[56]",
      "\n",
      "The language's core philosophy is summarized in the document ",
      "The ",
      "Zen of Python",
      " (",
      "PEP 20",
      "), which includes ",
      "aphorisms",
      " such as:",
      "[57]",
      "\n",
      "\n",
      "Beautiful is better than ugly.",
      "\n",
      "Explicit is better than implicit.",
      "\n",
      "Simple is better than complex.",
      "\n",
      "Complex is better than complicated.",
      "\n",
      "Readability counts.",
      "\n",
      "Rather than having all of its functionality built into its core, Python was designed to be highly ",
      "extensible",
      ". This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ",
      "ABC",
      ", which espoused the opposite approach.",
      "[35]",
      "\n",
      "Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to ",
      "Perl",
      "'s \"",
      "there is more than one way to do it",
      "\" motto, Python embraces a \"there should be one\u2014and preferably only one\u2014obvious way to do it\" design philosophy.",
      "[57]",
      " ",
      "Alex Martelli",
      ", a ",
      "Fellow",
      " at the ",
      "Python Software Foundation",
      " and Python book author, writes that \"To describe something as 'clever' is ",
      "not",
      " considered a compliment in the Python culture.\"",
      "[58]",
      "\n",
      "Python's developers strive to avoid ",
      "premature optimization",
      ", and reject patches to non-critical parts of the ",
      "CPython",
      " reference implementation that would offer marginal increases in speed at the cost of clarity.",
      "[59]",
      " When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use ",
      "PyPy",
      ", a ",
      "just-in-time compiler",
      ". ",
      "Cython",
      " is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.\n",
      "An important goal of Python's developers is keeping it fun to use. This is reflected in the language's name\u2014a tribute to the British comedy group ",
      "Monty Python",
      "[60]",
      "\u2014and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a ",
      "famous Monty Python sketch",
      ") instead of the standard ",
      "foo and bar",
      ".",
      "[61]",
      "[62]",
      "\n",
      "A common ",
      "neologism",
      " in the Python community is ",
      "pythonic",
      ", which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called ",
      "unpythonic",
      ".\n",
      "Users and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as ",
      "Pythonistas",
      ".",
      "[63]",
      "[64]",
      "\n",
      "\n",
      "Syntax and semantics",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Python syntax and semantics",
      "\n",
      "Python is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use ",
      "curly brackets",
      " to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than ",
      "C",
      " or ",
      "Pascal",
      ".",
      "[65]",
      "\n",
      "\n",
      "Indentation",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Python syntax and semantics \u00a7\u00a0Indentation",
      "\n",
      "Python uses ",
      "whitespace",
      " indentation, rather than ",
      "curly brackets",
      " or keywords, to delimit ",
      "blocks",
      ". An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.",
      "[66]",
      " Thus, the program's visual structure accurately represents the program's semantic structure.",
      "[1]",
      " This feature is sometimes termed the ",
      "off-side rule",
      ", which some other languages share, but in most languages indentation doesn't have any semantic meaning.\n",
      "\n",
      "Statements and control flow",
      "[",
      "edit",
      "]",
      "\n",
      "Python's ",
      "statements",
      " include (among others):\n",
      "\n",
      "The assignment statement (token '=', the equals sign). This operates differently than in traditional ",
      "imperative programming",
      " languages, and this fundamental mechanism (including the nature of Python's version of ",
      "variables",
      ") illuminates many other features of the language. Assignment in ",
      "C",
      ", e.g., ",
      "x = 2",
      ", translates to \"typed variable name ",
      "x",
      " receives a copy of numeric value 2\". The (right-hand) value is copied into an ",
      "allocated storage location",
      " for which the (left-hand) ",
      "variable name",
      " is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared ",
      "type",
      ". In the simplest case of Python assignment, using the same example, ",
      "x = 2",
      ", translates to \"(generic) name x receives a ",
      "reference",
      " to a separate, dynamically allocated ",
      "object",
      " of numeric (int) type of value 2.\" This is termed ",
      "binding",
      " the name to the object. Since the name's storage location doesn't ",
      "contain",
      " the indicated value, it is improper to call it a ",
      "variable",
      ". Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., ",
      "x = 2",
      "; ",
      "y = 2",
      "; ",
      "z = 2",
      " result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed ",
      "data type",
      " with it. However at a given time a name will be bound to ",
      "some",
      " object, which ",
      "will",
      " have a type; thus there is ",
      "dynamic typing",
      ".",
      "\n",
      "The ",
      "if",
      " statement, which conditionally executes a block of code, along with ",
      "else",
      " and ",
      "elif",
      " (a contraction of else-if).",
      "\n",
      "The ",
      "for",
      " statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.",
      "\n",
      "The ",
      "while",
      " statement, which executes a block of code as long as its condition is true.",
      "\n",
      "The ",
      "try",
      " statement, which allows exceptions raised in its attached code block to be caught and handled by ",
      "except",
      " clauses; it also ensures that clean-up code in a ",
      "finally",
      " block will always be run regardless of how the block exits.",
      "\n",
      "The ",
      "raise",
      " statement, used to raise a specified exception or re-raise a caught exception.",
      "\n",
      "The ",
      "class",
      " statement, which executes a block of code and attaches its local namespace to a ",
      "class",
      ", for use in ",
      "object-oriented programming",
      ".",
      "\n",
      "The ",
      "def",
      " statement, which defines a ",
      "function",
      " or ",
      "method",
      ".",
      "\n",
      "The ",
      "with",
      " statement, from Python 2.5 released in September 2006,",
      "[67]",
      " which encloses a code block within a context manager (for example, acquiring a ",
      "lock",
      " before the block of code is run and releasing the lock afterwards, or opening a ",
      "file",
      " and then closing it), allowing ",
      "Resource Acquisition Is Initialization",
      " (RAII)-like behavior and replaces a common try/finally idiom.",
      "[68]",
      "\n",
      "The ",
      "break",
      " statement, exits from the loop.",
      "\n",
      "The ",
      "continue",
      " statement, skips this iteration and continues with the next item.",
      "\n",
      "The ",
      "pass",
      " statement, which serves as a ",
      "NOP",
      ". It is syntactically needed to create an empty code block.",
      "\n",
      "The ",
      "assert",
      " statement, used during debugging to check for conditions that ought to apply.",
      "\n",
      "The ",
      "yield",
      " statement, which returns a value from a ",
      "generator",
      " function. From Python 2.5, ",
      "yield",
      " is also an operator. This form is used to implement ",
      "coroutines",
      ".",
      "\n",
      "The  ",
      "return",
      " statement, used to return a value from a function.",
      "\n",
      "The ",
      "import",
      " statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: ",
      "import <module name> [as <alias>]",
      " or ",
      "from <module name> import *",
      " or ",
      "from <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ...",
      ".",
      "\n",
      "The ",
      "print",
      " statement was changed to the ",
      "print()",
      " function in Python 3.",
      "\n",
      "Python does not support ",
      "tail call",
      " optimization or ",
      "first-class continuations",
      ", and, according to Guido van Rossum, it never will.",
      "[69]",
      "[70]",
      " However, better support for ",
      "coroutine",
      "-like functionality is provided in 2.5, by extending Python's ",
      "generators",
      ".",
      "[71]",
      " Before 2.5, generators were ",
      "lazy",
      " ",
      "iterators",
      "; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels.",
      "[72]",
      "\n",
      "\n",
      "Expressions",
      "[",
      "edit",
      "]",
      "\n",
      "Some Python ",
      "expressions",
      " are similar to languages such as ",
      "C",
      " and ",
      "Java",
      ", while some are not:\n",
      "\n",
      "Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division (or integer division) ",
      "//",
      " and floating point",
      "/",
      "division.",
      "[73]",
      " Python also added the ",
      "**",
      " operator for exponentiation.",
      "\n",
      "From Python 3.5, the new ",
      "@",
      " infix operator was introduced. It is intended to be used by libraries such as ",
      "NumPy",
      " for ",
      "matrix multiplication",
      ".",
      "[74]",
      "[75]",
      "\n",
      "From Python 3.8, the syntax ",
      ":=",
      ", called the 'walrus operator' was introduced. It assigns values to variables as part of a larger expression.",
      "[76]",
      "\n",
      "In Python, ",
      "==",
      " compares by value, versus Java, which compares numerics by value",
      "[77]",
      " and objects by reference.",
      "[78]",
      " (Value comparisons in Java on objects can be performed with the ",
      "equals()",
      " method.) Python's ",
      "is",
      " operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example ",
      "a <= b <= c",
      ".",
      "\n",
      "Python uses the words ",
      "and",
      ", ",
      "or",
      ", ",
      "not",
      " for its boolean operators rather than the symbolic ",
      "&&",
      ", ",
      "||",
      ", ",
      "!",
      " used in Java and C.",
      "\n",
      "Python has a type of expression termed a ",
      "list comprehension",
      ". Python 2.4 extended list comprehensions into a more general expression termed a ",
      "generator",
      " expression",
      ".",
      "[55]",
      "\n",
      "Anonymous functions",
      " are implemented using ",
      "lambda expressions",
      "; however, these are limited in that the body can only be one expression.",
      "\n",
      "Conditional expressions in Python are written as ",
      "x if c else y",
      "[79]",
      " (different in order of operands from the ",
      "c\u00a0? x\u00a0: y",
      " operator common to many other languages).",
      "\n",
      "Python makes a distinction between ",
      "lists",
      " and ",
      "tuples",
      ". Lists are written as ",
      "[1, 2, 3]",
      ", are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be ",
      "immutable",
      " in Python). Tuples are written as ",
      "(1, 2, 3)",
      ", are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The ",
      "+",
      " operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable ",
      "t",
      " initially equal to ",
      "(1, 2, 3)",
      ", executing ",
      "t = t + (4, 5)",
      " first evaluates ",
      "t + (4, 5)",
      ", which yields ",
      "(1, 2, 3, 4, 5)",
      ", which is then assigned back to ",
      "t",
      ", thereby effectively \"modifying the contents\" of ",
      "t",
      ", while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.",
      "[80]",
      "\n",
      "Python features ",
      "sequence unpacking",
      " wherein multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an ",
      "iterable",
      " object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left.",
      "[81]",
      "\n",
      "Python has a \"string format\" operator ",
      "%",
      ". This functions analogously to ",
      "printf",
      " format strings in ",
      "C",
      ", e.g. ",
      "\"spam=%s eggs=%d\"\u00a0% (\"blah\", 2)",
      " evaluates to ",
      "\"spam=blah eggs=2\"",
      ". In Python 3 and 2.6+, this was supplemented by the ",
      "format()",
      " method of the ",
      "str",
      " class, e.g. ",
      "\"spam={0} eggs={1}\".format(\"blah\", 2)",
      ". Python 3.6 added \"f-strings\": ",
      "blah = \"blah\"; eggs = 2; f'spam={blah} eggs={eggs}'",
      ".",
      "[82]",
      "\n",
      "Python has various kinds of ",
      "string literals",
      ":\n",
      "Strings delimited by single or double quote marks. Unlike in ",
      "Unix shells",
      ", ",
      "Perl",
      " and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (",
      "\\",
      ") as an ",
      "escape character",
      ". ",
      "String interpolation",
      " became available in Python 3.6 as \"formatted string literals\".",
      "[82]",
      "\n",
      "Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like ",
      "here documents",
      " in shells, Perl and ",
      "Ruby",
      ".",
      "\n",
      "Raw string",
      " varieties, denoted by prefixing the string literal with an ",
      "r",
      ". Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as ",
      "regular expressions",
      " and ",
      "Windows",
      "-style paths. Compare \"",
      "@",
      "-quoting\" in ",
      "C#",
      ".",
      "\n",
      "Python has ",
      "array index",
      " and ",
      "array slicing",
      " expressions on lists, denoted as ",
      "a[key]",
      ", ",
      "a[start:stop]",
      " or ",
      "a[start:stop:step]",
      ". Indexes are ",
      "zero-based",
      ", and negative indexes are relative to the end. Slices take elements from the ",
      "start",
      " index up to, but not including, the ",
      "stop",
      " index. The third slice parameter, called ",
      "step",
      " or ",
      "stride",
      ", allows elements to be skipped and reversed. Slice indexes may be omitted, for example ",
      "a[:]",
      " returns a copy of the entire list. Each element of a slice is a ",
      "shallow copy",
      ".",
      "\n",
      "In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as ",
      "Common Lisp",
      ", ",
      "Scheme",
      ", or ",
      "Ruby",
      ". This leads to duplicating some functionality. For example:\n",
      "\n",
      "List comprehensions",
      " vs. ",
      "for",
      "-loops",
      "\n",
      "Conditional",
      " expressions vs. ",
      "if",
      " blocks",
      "\n",
      "The ",
      "eval()",
      " vs. ",
      "exec()",
      " built-in functions (in Python 2, ",
      "exec",
      " is a statement); the former is for expressions, the latter is for statements.",
      "\n",
      "Statements cannot be a part of an expression, so list and other comprehensions or ",
      "lambda expressions",
      ", all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as ",
      "a = 1",
      " cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator ",
      "=",
      " for an equality operator ",
      "==",
      " in conditions: ",
      "if (c = 1) { ... }",
      " is syntactically valid (but probably unintended) C code but ",
      "if c = 1: ...",
      " causes a syntax error in Python.\n",
      "\n",
      "Methods",
      "[",
      "edit",
      "]",
      "\n",
      "Methods",
      " on objects are ",
      "functions",
      " attached to the object's class; the syntax ",
      "instance.method(argument)",
      " is, for normal methods and functions, ",
      "syntactic sugar",
      " for ",
      "Class.method(instance, argument)",
      ". Python methods have an explicit ",
      "self",
      " parameter to access ",
      "instance data",
      ", in contrast to the implicit ",
      "self",
      " (or ",
      "this",
      ") in some other object-oriented programming languages (e.g., ",
      "C++",
      ", ",
      "Java",
      ", ",
      "Objective-C",
      ", or ",
      "Ruby",
      ").",
      "[83]",
      "\n",
      "\n",
      "Typing",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "The standard type hierarchy in Python 3",
      "\n",
      "Python uses ",
      "duck typing",
      " and has typed objects but untyped variable names. Type constraints are not checked at ",
      "compile time",
      "; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being ",
      "dynamically typed",
      ", Python is ",
      "strongly typed",
      ", forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n",
      "Python allows programmers to define their own types using ",
      "classes",
      ", which are most often used for ",
      "object-oriented programming",
      ". New ",
      "instances",
      " of classes are constructed by calling the class (for example, ",
      "SpamClass()",
      " or ",
      "EggsClass()",
      "), and the classes are instances of the ",
      "metaclass",
      " ",
      "type",
      " (itself an instance of itself), allowing ",
      "metaprogramming",
      " and ",
      "reflection",
      ".\n",
      "Before version 3.0, Python had two kinds of classes: ",
      "old-style",
      " and ",
      "new-style",
      ".",
      "[84]",
      " The syntax of both styles is the same, the difference being whether the class ",
      "object",
      " is inherited from, directly or indirectly (all new-style classes inherit from ",
      "object",
      " and are instances of ",
      "type",
      "). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.\n",
      "The long-term plan is to support ",
      "gradual typing",
      "[85]",
      " and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named ",
      "mypy",
      " supports compile-time type checking.",
      "[86]",
      "\n",
      "\n",
      "\n",
      "Summary of Python 3's built-in types\n",
      "\n",
      "\n",
      "Type\n",
      "\n",
      "Mutability",
      "\n",
      "\n",
      "Description\n",
      "\n",
      "Syntax examples\n",
      "\n",
      "\n",
      "bool",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Boolean value",
      "\n",
      "\n",
      "True",
      "False",
      "\n",
      "\n",
      "\n",
      "bytearray",
      "\n",
      "\n",
      "mutable\n",
      "\n",
      "Sequence of ",
      "bytes",
      "\n",
      "\n",
      "bytearray",
      "(",
      "b",
      "'Some ASCII'",
      ")",
      "bytearray",
      "(",
      "b",
      "\"Some ASCII\"",
      ")",
      "bytearray",
      "([",
      "119",
      ",",
      " ",
      "105",
      ",",
      " ",
      "107",
      ",",
      " ",
      "105",
      "])",
      "\n",
      "\n",
      "\n",
      "bytes",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Sequence of bytes\n",
      "\n",
      "b",
      "'Some ASCII'",
      "b",
      "\"Some ASCII\"",
      "bytes",
      "([",
      "119",
      ",",
      " ",
      "105",
      ",",
      " ",
      "107",
      ",",
      " ",
      "105",
      "])",
      "\n",
      "\n",
      "\n",
      "complex",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Complex number",
      " with real and imaginary parts\n",
      "\n",
      "3",
      "+",
      "2.7",
      "j",
      "\n",
      "\n",
      "\n",
      "dict",
      "\n",
      "\n",
      "mutable\n",
      "\n",
      "Associative array",
      " (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n",
      "\n",
      "{",
      "'key1'",
      ":",
      " ",
      "1.0",
      ",",
      " ",
      "3",
      ":",
      " ",
      "False",
      "}",
      "{}",
      "\n",
      "\n",
      "\n",
      "ellipsis",
      "a",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "An ",
      "ellipsis",
      " placeholder to be used as an index in ",
      "NumPy",
      " arrays\n",
      "\n",
      "...",
      "Ellipsis",
      "\n",
      "\n",
      "\n",
      "float",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Double precision",
      " ",
      "floating point",
      " number. The precision is machine dependent but in practice is generally implemented as a 64-bit ",
      "IEEE 754",
      " number with 53 bits of precision",
      "[87]",
      "\n",
      "\n",
      "\n",
      "1.414",
      "\n",
      "\n",
      "\n",
      "\n",
      "frozenset",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Unordered ",
      "set",
      ", contains no duplicates; can contain mixed types, if hashable\n",
      "\n",
      "frozenset",
      "([",
      "4.0",
      ",",
      " ",
      "'string'",
      ",",
      " ",
      "True",
      "])",
      "\n",
      "\n",
      "\n",
      "int",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Integer",
      " of unlimited magnitude",
      "[88]",
      "\n",
      "\n",
      "42",
      "\n",
      "\n",
      "\n",
      "list",
      "\n",
      "\n",
      "mutable\n",
      "\n",
      "List",
      ", can contain mixed types\n",
      "\n",
      "[",
      "4.0",
      ",",
      " ",
      "'string'",
      ",",
      " ",
      "True",
      "]",
      "[]",
      "\n",
      "\n",
      "\n",
      "NoneType",
      "a",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "An object representing the absence of a value, often called ",
      "null",
      " in other languages\n",
      "\n",
      "None",
      "\n",
      "\n",
      "\n",
      "NotImplementedType",
      "a",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "A placeholder that can be returned from ",
      "overloaded operators",
      " to indicate unsupported operand types.\n",
      "\n",
      "NotImplemented",
      "\n",
      "\n",
      "\n",
      "range",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "A Sequence of numbers commonly used for looping specific number of times in ",
      "for",
      " loops",
      "[89]",
      "\n",
      "\n",
      "range",
      "(",
      "1",
      ",",
      " ",
      "10",
      ")",
      "range",
      "(",
      "10",
      ",",
      " ",
      "-",
      "5",
      ",",
      " ",
      "-",
      "2",
      ")",
      "\n",
      "\n",
      "\n",
      "set",
      "\n",
      "\n",
      "mutable\n",
      "\n",
      "Unordered ",
      "set",
      ", contains no duplicates; can contain mixed types, if hashable\n",
      "\n",
      "{",
      "4.0",
      ",",
      " ",
      "'string'",
      ",",
      " ",
      "True",
      "}",
      "set",
      "()",
      "\n",
      "\n",
      "\n",
      "str",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "A ",
      "character string",
      ": sequence of Unicode codepoints\n",
      "\n",
      "'Wikipedia'",
      "\"Wikipedia\"",
      "\"\"\"Spanning",
      "\n",
      "multiple",
      "\n",
      "lines\"\"\"",
      "\n",
      "\n",
      "\n",
      "\n",
      "tuple",
      "\n",
      "\n",
      "immutable\n",
      "\n",
      "Can contain mixed types\n",
      "\n",
      "(",
      "4.0",
      ",",
      " ",
      "'string'",
      ",",
      " ",
      "True",
      ")",
      "(",
      "'single element'",
      ",)",
      "()",
      "\n",
      "\n",
      "^a",
      " Not directly accessible by name",
      " \n",
      "\n",
      "Mathematics",
      "[",
      "edit",
      "]",
      "\n",
      "Python has the usual symbols for arithmetic operators (",
      "+",
      ", ",
      "-",
      ", ",
      "*",
      ", ",
      "/",
      "), the floor division operator ",
      "//",
      " and the ",
      "modulo operation",
      " ",
      "%",
      " (where the remainder can be negative,  e.g. ",
      "4\u00a0% -3 == -2",
      "). It also has ",
      "**",
      " for ",
      "exponentiation",
      ", e.g. ",
      "5**3 == 125",
      " and ",
      "9**0.5 == 3.0",
      ", and a matrix multiply operator ",
      "@",
      " .",
      "[90]",
      " These operators work like in traditional math; with the same ",
      "precedence rules",
      ", the operators ",
      "infix",
      " ( ",
      "+",
      " and ",
      "-",
      " can also be ",
      "unary",
      " to represent positive and negative numbers respectively).\n",
      "Division between integers produces floating point results. The behavior of division has changed significantly over time:",
      "[91]",
      "\n",
      "\n",
      "Python 2.1 and earlier used C's division behavior. The ",
      "/",
      " operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. ",
      "7/3 == 2",
      " and ",
      "-7/3 == -2",
      ".",
      "\n",
      "Python 2.2 changed integer division to round towards negative infinity, e.g. ",
      "7/3 == 2",
      " and ",
      "-7/3 == -3",
      ". The floor division ",
      "//",
      " operator was introduced. So ",
      "7//3 == 2",
      ", ",
      "-7//3 == -3",
      ", ",
      "7.5//3 == 2.0",
      " and ",
      "-7.5//3 == -3.0",
      ". Adding ",
      "from __future__ import division",
      " causes a module to use Python 3.0 rules for division (see next).",
      "\n",
      "Python 3.0 changed ",
      "/",
      " to always be floating-point division, e.g. ",
      "5/2 == 2.5",
      ".",
      "\n",
      "In Python terms, ",
      "/",
      " is ",
      "true division",
      " (or simply ",
      "division",
      "), and ",
      "//",
      " is ",
      "floor division.",
      " ",
      "/",
      " before version 3.0 is ",
      "classic division",
      ".",
      "[91]",
      "\n",
      "Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation ",
      "(a + b)//b == a//b + 1",
      " is always true. It also means that the equation ",
      "b*(a//b) + a%b == a",
      " is valid for both positive and negative values of ",
      "a",
      ". However, maintaining the validity of this equation means that while the result of ",
      "a%b",
      " is, as expected, in the ",
      "half-open interval",
      " [0, ",
      "b",
      "), where ",
      "b",
      " is a positive integer, it has to lie in the interval (",
      "b",
      ", 0] when ",
      "b",
      " is negative.",
      "[92]",
      "\n",
      "Python provides a ",
      "round",
      " function for ",
      "rounding",
      " a float to the nearest integer. For ",
      "tie-breaking",
      ", Python 3 uses ",
      "round to even",
      ": ",
      "round(1.5)",
      " and ",
      "round(2.5)",
      " both produce ",
      "2",
      ".",
      "[93]",
      " Versions before 3 used ",
      "round-away-from-zero",
      ": ",
      "round(0.5)",
      " is ",
      "1.0",
      ", ",
      "round(-0.5)",
      " is ",
      "\u22121.0",
      ".",
      "[94]",
      "\n",
      "Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression ",
      "a < b < c",
      " tests whether ",
      "a",
      " is less than ",
      "b",
      " and ",
      "b",
      " is less than ",
      "c",
      ".",
      "[95]",
      " C-derived languages interpret this expression differently: in C, the expression would first evaluate ",
      "a < b",
      ", resulting in 0 or 1, and that result would then be compared with ",
      "c",
      ".",
      "[96]",
      "\n",
      "Python uses ",
      "arbitrary-precision arithmetic",
      " for all integer operations. The ",
      "Decimal",
      " type/class in the ",
      "decimal",
      " module provides decimal floating point numbers to a pre-defined arbitrary precision and several rounding modes.",
      "[97]",
      " The ",
      "Fraction",
      " class in the ",
      "fractions",
      " module provides arbitrary precision for ",
      "rational numbers",
      ".",
      "[98]",
      "\n",
      "Due to Python's extensive mathematics library, and the third-party library ",
      "NumPy",
      " that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.",
      "[99]",
      "[100]",
      "\n",
      "\n",
      "Python programming examples",
      "[",
      "edit",
      "]",
      "\n",
      "Hello world",
      " program:\n",
      "\n",
      "print",
      "(",
      "'Hello, world!'",
      ")",
      "\n",
      "\n",
      "Program to calculate the ",
      "factorial",
      " of a positive integer:\n",
      "\n",
      "n",
      " ",
      "=",
      " ",
      "int",
      "(",
      "input",
      "(",
      "'Type a number, and its factorial will be printed: '",
      "))",
      "\n\n",
      "if",
      " ",
      "n",
      " ",
      "<",
      " ",
      "0",
      ":",
      "\n    ",
      "raise",
      " ",
      "ValueError",
      "(",
      "'You must enter a non negative integer'",
      ")",
      "\n\n",
      "fact",
      " ",
      "=",
      " ",
      "1",
      "\n\n",
      "for",
      " ",
      "i",
      " ",
      "in",
      " ",
      "range",
      "(",
      "2",
      ",",
      " ",
      "n",
      " ",
      "+",
      " ",
      "1",
      "):",
      "\n    ",
      "fact",
      " ",
      "*=",
      " ",
      "i",
      "\n\n",
      "print",
      "(",
      "fact",
      ")",
      "\n",
      "\n",
      "Libraries",
      "[",
      "edit",
      "]",
      "\n",
      "Python's large ",
      "standard library",
      ", commonly cited as one of its greatest strengths,",
      "[101]",
      " provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as ",
      "MIME",
      " and ",
      "HTTP",
      " are supported. It includes modules for creating ",
      "graphical user interfaces",
      ", connecting to ",
      "relational databases",
      ", ",
      "generating pseudorandom numbers",
      ", arithmetic with arbitrary-precision decimals,",
      "[102]",
      " manipulating ",
      "regular expressions",
      ", and ",
      "unit testing",
      ".\n",
      "Some parts of the standard library are covered by specifications (for example, the ",
      "Web Server Gateway Interface",
      " (WSGI) implementation ",
      "wsgiref",
      " follows PEP 333",
      "[103]",
      "), but most modules are not. They are specified by their code, internal documentation, and ",
      "test suites",
      ". However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\n",
      "As of November\u00a02019,",
      "[update]",
      " the ",
      "Python Package Index",
      " (PyPI), the official repository for third-party Python software, contains over 200,000",
      "[104]",
      " packages with a wide range of functionality, including:\n",
      "\n",
      "Automation",
      "\n",
      "Data analytics",
      "\n",
      "Databases",
      "\n",
      "Documentation",
      "\n",
      "Graphical user interfaces",
      "\n",
      "Image processing",
      "\n",
      "Machine learning",
      "\n",
      "Mobile App",
      "\n",
      "Multimedia",
      "\n",
      "Networking",
      "\n",
      "Scientific computing",
      "\n",
      "System administration",
      "\n",
      "Test frameworks",
      "\n",
      "Text processing",
      "\n",
      "Web frameworks",
      "\n",
      "Web scraping",
      "[105]",
      "\n",
      "Development environments",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Comparison of integrated development environments \u00a7\u00a0Python",
      "\n",
      "Most Python implementations (including CPython) include a ",
      "read\u2013eval\u2013print loop",
      " (REPL), permitting them to function as a ",
      "command line interpreter",
      " for which the user enters statements sequentially and receives results immediately.\n",
      "Other shells, including ",
      "IDLE",
      " and ",
      "IPython",
      ", add further abilities such as improved auto-completion, session state retention and ",
      "syntax highlighting",
      ".\n",
      "As well as standard desktop ",
      "integrated development environments",
      ", there are ",
      "Web browser",
      "-based IDEs; ",
      "SageMath",
      " (intended for developing science and math-related Python programs); ",
      "PythonAnywhere",
      ", a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing ",
      "scientific computing",
      ".",
      "[106]",
      "\n",
      "\n",
      "Implementations",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "List of Python software \u00a7\u00a0Python implementations",
      "\n",
      "Reference implementation",
      "[",
      "edit",
      "]",
      "\n",
      "CPython",
      " is the ",
      "reference implementation",
      " of Python. It is written in ",
      "C",
      ", meeting the ",
      "C89",
      " standard with several select ",
      "C99",
      " features.",
      "[107]",
      " It compiles Python programs into an intermediate ",
      "bytecode",
      "[108]",
      " which is then executed by its ",
      "virtual machine",
      ".",
      "[109]",
      " CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including ",
      "Windows",
      " (Vista and later; supported ",
      "Windows XP",
      " and older, with by now unsupported Python 2.7) and most modern ",
      "Unix-like",
      " systems. Platform portability was one of its earliest priorities,",
      "[110]",
      " in Python 1 and 2 time-frame, even supporting ",
      "VMS",
      " and ",
      "OS/2",
      "; support has since been dropped for a lot of platforms.\n",
      "\n",
      "Other implementations",
      "[",
      "edit",
      "]",
      "\n",
      "PyPy",
      " is a fast, compliant interpreter of Python 2.7 and 3.6.",
      "[111]",
      " Its ",
      "just-in-time compiler",
      " brings a significant speed improvement over CPython but several libraries written in C cannot be used with it.",
      "[112]",
      "[113]",
      "\n",
      "Stackless Python",
      " is a significant fork of CPython that implements ",
      "microthreads",
      "; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.",
      "[114]",
      "\n",
      "MicroPython",
      " and ",
      "CircuitPython",
      " are Python 3 variants optimized for ",
      "microcontrollers",
      ". This includes ",
      "Lego Mindstorms EV3",
      ".",
      "[115]",
      "\n",
      "\n",
      "Unsupported implementations",
      "[",
      "edit",
      "]",
      "\n",
      "Other just-in-time Python compilers have been developed, but are now unsupported:\n",
      "\n",
      "Google began a project named ",
      "Unladen Swallow",
      " in 2009, with the aim of speeding up the Python interpreter five-fold by using the ",
      "LLVM",
      ", and of improving its multithreading ability to scale to thousands of cores,",
      "[116]",
      " while ordinary implementations suffer from the ",
      "global interpreter lock",
      ".",
      "\n",
      "Psyco",
      " was a ",
      "just-in-time",
      " ",
      "specializing",
      " compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain ",
      "data types",
      " and is faster than standard Python code.",
      "\n",
      "In 2005, ",
      "Nokia",
      " released a Python interpreter for the ",
      "Series 60",
      " mobile phones named ",
      "PyS60",
      ". It includes many of the modules from the CPython implementations and some additional modules to integrate with the ",
      "Symbian",
      " operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia ",
      "N900",
      " also supports Python with ",
      "GTK",
      " widget libraries, enabling programs to be written and run on the target device.",
      "[117]",
      "\n",
      "\n",
      "Cross-compilers to other languages",
      "[",
      "edit",
      "]",
      "\n",
      "There are several compilers to high-level ",
      "object languages",
      ", with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n",
      "\n",
      "Cython",
      " compiles Python to ",
      "C",
      " and ",
      "C++",
      ".",
      "\n",
      "Google's Grumpy (latest release in 2017) compiles Python 2 to ",
      "Go",
      ".",
      "[118]",
      "[119]",
      "\n",
      "IronPython",
      " follows a similar approach in order to run Python programs on the .NET ",
      "Common Language Runtime",
      ".",
      "\n",
      "Jython",
      " enables the use of the Java class library from a Python program.",
      "\n",
      "MyHDL",
      " compiles Python to ",
      "VHDL",
      ".",
      "\n",
      "Nuitka",
      " compiles Python into C++.",
      "[120]",
      "\n",
      "Numba",
      " uses ",
      "LLVM",
      " to compile Python to machine code.",
      "\n",
      "Pyjs",
      " (latest release in 2012) compiles Python to ",
      "JavaScript",
      ".",
      "\n",
      "Pyrex",
      " (latest release in 2010) and ",
      "Shed Skin",
      " (latest release in 2013) compile to C and C++ respectively.",
      "\n",
      "Pythran compiles Python to ",
      "C++",
      ".",
      "[121]",
      "[122]",
      "\n",
      "RPython",
      " can be compiled to ",
      "C",
      ", and is used to build the PyPy interpreter of Python.",
      "\n",
      "Performance",
      "[",
      "edit",
      "]",
      "\n",
      "A performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.",
      "[123]",
      " Python's performance compared to other programming languages has also been benchmarked by ",
      "The Computer Language Benchmarks Game",
      ".",
      "[124]",
      "\n",
      "\n",
      "Development",
      "[",
      "edit",
      "]",
      "\n",
      "Python's development is conducted largely through the ",
      "Python Enhancement Proposal",
      " (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions.",
      "[125]",
      " Python coding style is covered in PEP 8.",
      "[126]",
      " Outstanding PEPs are reviewed and commented on by the Python community and the steering council.",
      "[125]",
      "\n",
      "Enhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues are discussed in the ",
      "Roundup",
      " ",
      "bug tracker",
      " hosted at ",
      "bugs.python.org",
      ".",
      "[127]",
      " Development originally took place on a ",
      "self-hosted",
      " source-code repository running ",
      "Mercurial",
      ", until Python moved to ",
      "GitHub",
      " in January 2017.",
      "[128]",
      "\n",
      "CPython's public releases come in three types, distinguished by which part of the version number is incremented:\n",
      "\n",
      "Backward-incompatible versions, where code is expected to break and need to be manually ",
      "ported",
      ". The first part of the version number is incremented. These releases happen infrequently\u2014for example, version 3.0 was released 8 years after 2.0.",
      "\n",
      "Major or \"feature\" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release.",
      "[129]",
      "\n",
      "Bugfix releases,",
      "[130]",
      " which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.",
      "[130]",
      "\n",
      "Python 3.9 alpha1 was announced in November 2019",
      "[131]",
      " and with the adoption of a new yearly release cadence,",
      "[132]",
      "[133]",
      " the first release of 3.9 is slated for November 2020.",
      "[134]",
      "\n",
      "Many ",
      "alpha, beta, and release-candidates",
      " are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large ",
      "unit test",
      " suite during development, and using the ",
      "BuildBot",
      " ",
      "continuous integration",
      " system.",
      "[135]",
      "\n",
      "The major ",
      "academic conference",
      " on Python is ",
      "PyCon",
      ". There are also special Python mentoring programmes, such as ",
      "Pyladies",
      ".\n",
      "\n",
      "API documentation generators",
      "[",
      "edit",
      "]",
      "\n",
      "Python API documentation generators include:\n",
      "\n",
      "pydoc",
      "\n",
      "Sphinx",
      "\n",
      "Naming",
      "[",
      "edit",
      "]",
      "\n",
      "Python's name is derived from the British comedy group ",
      "Monty Python",
      ", whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;",
      "[136]",
      " for example, the ",
      "metasyntactic variables",
      " often used in Python literature are ",
      "spam",
      " and ",
      "eggs",
      " instead of the traditional ",
      "foo",
      " and ",
      "bar",
      ".",
      "[136]",
      "[137]",
      " The official Python documentation also contains various references to Monty Python routines.",
      "[138]",
      "[139]",
      "\n",
      "The prefix ",
      "Py-",
      " is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include ",
      "Pygame",
      ", a ",
      "binding",
      " of ",
      "SDL",
      " to Python (commonly used to create games); ",
      "PyQt",
      " and ",
      "PyGTK",
      ", which bind ",
      "Qt",
      " and ",
      "GTK",
      " to Python respectively; and ",
      "PyPy",
      ", a Python implementation originally written in Python.\n",
      "\n",
      "Uses",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "List of Python software",
      "\n",
      "Since 2003, Python has consistently ranked in the top ten most popular programming languages in the ",
      "TIOBE Programming Community Index",
      " where, as of February\u00a02020",
      "[update]",
      ", it is the third most popular language (behind ",
      "Java",
      ", and ",
      "C",
      ").",
      "[140]",
      " It was selected Programming Language of the Year in 2007, 2010, and 2018.",
      "[141]",
      "\n",
      "An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often \"better than Java and not much worse than C or C++\".",
      "[142]",
      "\n",
      "Large organizations that use Python include ",
      "Wikipedia",
      ", ",
      "Google",
      ",",
      "[143]",
      " ",
      "Yahoo!",
      ",",
      "[144]",
      " ",
      "CERN",
      ",",
      "[145]",
      " ",
      "NASA",
      ",",
      "[146]",
      " ",
      "Facebook",
      ",",
      "[147]",
      " ",
      "Amazon",
      ", ",
      "Instagram",
      ",",
      "[148]",
      " ",
      "Spotify",
      "[149]",
      " and some smaller entities like ",
      "ILM",
      "[150]",
      " and ",
      "ITA",
      ".",
      "[151]",
      " The social news networking site ",
      "Reddit",
      " is written entirely in Python.",
      "[152]",
      "\n",
      "Python can serve as a ",
      "scripting language",
      " for ",
      "web applications",
      ", e.g., via ",
      "mod_wsgi",
      " for the ",
      "Apache web server",
      ".",
      "[153]",
      " With ",
      "Web Server Gateway Interface",
      ", a standard API has evolved to facilitate these applications. ",
      "Web frameworks",
      " like ",
      "Django",
      ", ",
      "Pylons",
      ", ",
      "Pyramid",
      ", ",
      "TurboGears",
      ", ",
      "web2py",
      ", ",
      "Tornado",
      ", ",
      "Flask",
      ", ",
      "Bottle",
      " and ",
      "Zope",
      " support developers in the design and maintenance of complex applications. ",
      "Pyjs",
      " and ",
      "IronPython",
      " can be used to develop the client-side of Ajax-based applications. ",
      "SQLAlchemy",
      " can be used as a ",
      "data mapper",
      " to a relational database. ",
      "Twisted",
      " is a framework to program communications between computers, and is used (for example) by ",
      "Dropbox",
      ".\n",
      "Libraries such as ",
      "NumPy",
      ", ",
      "SciPy",
      " and ",
      "Matplotlib",
      " allow the effective use of Python in ",
      "scientific computing",
      ",",
      "[154]",
      "[155]",
      " with specialized libraries such as ",
      "Biopython",
      " and ",
      "Astropy",
      " providing domain-specific functionality. ",
      "SageMath",
      " is a ",
      "mathematical software",
      " with a ",
      "notebook interface",
      " programmable in Python: its library covers many aspects of ",
      "mathematics",
      ", including ",
      "algebra",
      ", ",
      "combinatorics",
      ", ",
      "numerical mathematics",
      ", ",
      "number theory",
      ", and ",
      "calculus",
      ".",
      "[156]",
      " ",
      "OpenCV",
      " has python bindings with a rich set of features for ",
      "computer vision",
      " and ",
      "image processing",
      ".",
      "[157]",
      "\n",
      "Python has been successfully embedded in many software products as a scripting language, including in ",
      "finite element method",
      " software such as ",
      "Abaqus",
      ", 3D parametric modeler like ",
      "FreeCAD",
      ", 3D animation packages such as ",
      "3ds Max",
      ", ",
      "Blender",
      ", ",
      "Cinema 4D",
      ", ",
      "Lightwave",
      ", ",
      "Houdini",
      ", ",
      "Maya",
      ", ",
      "modo",
      ", ",
      "MotionBuilder",
      ", ",
      "Softimage",
      ", the visual effects compositor ",
      "Nuke",
      ", 2D imaging programs like ",
      "GIMP",
      ",",
      "[158]",
      " ",
      "Inkscape",
      ", ",
      "Scribus",
      " and ",
      "Paint Shop Pro",
      ",",
      "[159]",
      " and ",
      "musical notation",
      " programs like ",
      "scorewriter",
      " and ",
      "capella",
      ". ",
      "GNU Debugger",
      " uses Python as a ",
      "pretty printer",
      " to show complex structures such as C++ containers. ",
      "Esri",
      " promotes Python as the best choice for writing scripts in ",
      "ArcGIS",
      ".",
      "[160]",
      " It has also been used in several video games,",
      "[161]",
      "[162]",
      " and has been adopted as first of the three available ",
      "programming languages",
      " in ",
      "Google App Engine",
      ", the other two being ",
      "Java",
      " and ",
      "Go",
      ".",
      "[163]",
      "\n",
      "Python is commonly used in ",
      "artificial intelligence",
      " projects and machine learning projects with the help of libraries like ",
      "TensorFlow",
      ", ",
      "Keras",
      ", ",
      "Pytorch",
      " and ",
      "Scikit-learn",
      ".",
      "[164]",
      "[165]",
      "[166]",
      "[167]",
      " As a scripting language with ",
      "modular architecture",
      ", simple syntax and rich text processing tools, Python is often used for ",
      "natural language processing",
      ".",
      "[168]",
      "\n",
      "Many operating systems include Python as a standard component. It ships with most ",
      "Linux distributions",
      ",",
      "[169]",
      " ",
      "AmigaOS 4",
      " (using Python 2.7), ",
      "FreeBSD",
      " (as a package), ",
      "NetBSD",
      ", ",
      "OpenBSD",
      " (as a package) and ",
      "macOS",
      " and can be used from the command line (terminal). Many Linux distributions use installers written in Python: ",
      "Ubuntu",
      " uses the ",
      "Ubiquity",
      " installer, while ",
      "Red Hat Linux",
      " and ",
      "Fedora",
      " use the ",
      "Anaconda",
      " installer. ",
      "Gentoo Linux",
      " uses Python in its ",
      "package management system",
      ", ",
      "Portage",
      ".\n",
      "Python is used extensively in the ",
      "information security",
      " industry, including in exploit development.",
      "[170]",
      "[171]",
      "\n",
      "Most of the ",
      "Sugar",
      " software for the ",
      "One Laptop per Child",
      " XO, now developed at ",
      "Sugar Labs",
      ", is written in Python.",
      "[172]",
      " The ",
      "Raspberry Pi",
      " ",
      "single-board computer",
      " project has adopted Python as its main user-programming language.\n",
      "LibreOffice",
      " includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature",
      "[173]",
      " since Version 4.0 from 7 February 2013.\n",
      "\n",
      "Languages influenced by Python",
      "[",
      "edit",
      "]",
      "\n",
      "Python's design and philosophy have influenced many other programming languages:\n",
      "\n",
      "Boo",
      " uses indentation, a similar syntax, and a similar object model.",
      "[174]",
      "\n",
      "Cobra",
      " uses indentation and a similar syntax, and its ",
      "Acknowledgements",
      " document lists Python first among languages that influenced it.",
      "[175]",
      "\n",
      "CoffeeScript",
      ", a ",
      "programming language",
      " that cross-compiles to JavaScript, has Python-inspired syntax.",
      "\n",
      "ECMAScript",
      "/",
      "JavaScript",
      " borrowed ",
      "iterators",
      " and ",
      "generators",
      " from Python.",
      "[176]",
      "\n",
      "GDScript",
      ", a scripting language very similar to Python, built-in to the ",
      "Godot",
      " game engine.",
      "[177]",
      "\n",
      "Go",
      " is designed for the \"speed of working in a dynamic language like Python\"",
      "[178]",
      " and shares the same syntax for slicing arrays.",
      "\n",
      "Groovy",
      " was motivated by the desire to bring the Python design philosophy to ",
      "Java",
      ".",
      "[179]",
      "\n",
      "Julia",
      " was designed to be \"as usable for general programming as Python\".",
      "[24]",
      "\n",
      "Nim",
      " uses indentation and a similar syntax.",
      "[180]",
      "\n",
      "Ruby",
      "'s creator, ",
      "Yukihiro Matsumoto",
      ", has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"",
      "[181]",
      "\n",
      "Swift",
      ", a programming language developed by Apple, has some Python-inspired syntax.",
      "[182]",
      "\n",
      "Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in ",
      "Tcl",
      ",",
      "[183]",
      " ",
      "Erlang",
      ",",
      "[184]",
      " and Swift.",
      "[185]",
      "\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "Free and open-source software portal",
      "\n",
      "Python syntax and semantics",
      "\n",
      "pip (package manager)",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Guttag, John V. (12 August 2016). ",
      "Introduction to Computation and Programming Using Python: With Application to Understanding Data",
      ". MIT Press. ",
      "ISBN",
      "\u00a0",
      "978-0-262-52962-4",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Release Python 3.9.0\"",
      ". ",
      "Python.org",
      ". 5 October 2020",
      ". Retrieved ",
      "5 October",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Release Python 3.10.0a1\"",
      ". ",
      "Python.org",
      ". 5 October 2020",
      ". Retrieved ",
      "5 October",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 483 -- The Theory of Type Hints\"",
      ". ",
      "Python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "File extension .pyo was removed in Python 3.5. See ",
      "PEP 0488",
      "\n",
      "\n",
      "^",
      " ",
      "Holth, Moore (30 March 2014). ",
      "\"PEP 0441 -- Improving Python ZIP Application Support\"",
      ". Retrieved ",
      "12 November",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Starlark Language\"",
      ". Retrieved ",
      "25 May",
      " 2019",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Why was Python created in the first place?\"",
      ". ",
      "General Python FAQ",
      ". Python Software Foundation",
      ". Retrieved ",
      "22 March",
      " 2007",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ada 83 Reference Manual (raise statement)\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kuchling, Andrew M. (22 December 2006). ",
      "\"Interview with Guido van Rossum (July 1998)\"",
      ". ",
      "amk.ca",
      ". Archived from ",
      "the original",
      " on 1 May 2007",
      ". Retrieved ",
      "12 March",
      " 2012",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"itertools \u2014 Functions creating iterators for efficient looping \u2014 Python 3.7.1 documentation\"",
      ". ",
      "docs.python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (1993). \"An Introduction to Python for UNIX/C Programmers\". ",
      "Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group)",
      ". ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.38.2023",
      ". ",
      "even though the design of C is far from ideal, its influence on Python is considerable.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Classes\"",
      ". ",
      "The Python Tutorial",
      ". Python Software Foundation",
      ". Retrieved ",
      "20 February",
      " 2012",
      ". ",
      "It is a mixture of the class mechanisms found in C++ and Modula-3",
      "\n",
      "\n",
      "^",
      " ",
      "Lundh, Fredrik. ",
      "\"Call By Object\"",
      ". ",
      "effbot.org",
      ". Retrieved ",
      "21 November",
      " 2017",
      ". ",
      "replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model.",
      "\n",
      "\n",
      "^",
      " ",
      "Simionato, Michele. ",
      "\"The Python 2.3 Method Resolution Order\"",
      ". Python Software Foundation. ",
      "The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers",
      "\n",
      "\n",
      "^",
      " ",
      "Kuchling, A. M. ",
      "\"Functional Programming HOWTO\"",
      ". ",
      "Python v2.7.2 documentation",
      ". Python Software Foundation",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). ",
      "\"PEP 255\u00a0\u2013 Simple Generators\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (2 September 2004). ",
      "\"PEP 318\u00a0\u2013 Decorators for Functions and Methods\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"More Control Flow Tools\"",
      ". ",
      "Python 3 documentation",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 July",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CoffeeScript\"",
      ". ",
      "coffeescript.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Genie Programming Language Tutorial\"",
      ". Retrieved ",
      "28 February",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Perl and Python influences in JavaScript\"",
      ". ",
      "www.2ality.com",
      ". 24 February 2013",
      ". Retrieved ",
      "15 May",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Rauschmayer, Axel. ",
      "\"Chapter 3: The Nature of JavaScript; Influences\"",
      ". ",
      "O'Reilly, Speaking JavaScript",
      ". Retrieved ",
      "15 May",
      " 2015",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Why We Created Julia\"",
      ". ",
      "Julia website",
      ". February 2012",
      ". Retrieved ",
      "5 June",
      " 2014",
      ". ",
      "We want something as usable for general programming as Python [...]",
      "\n",
      "\n",
      "^",
      " ",
      "Ring Team (4 December 2017). ",
      "\"Ring and other languages\"",
      ". ",
      "ring-lang.net",
      ". ",
      "ring-lang",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Bini, Ola (2007). ",
      "Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform",
      ". Berkeley: APress. p.\u00a0",
      "3",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-59059-881-8",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lattner, Chris (3 June 2014). ",
      "\"Chris Lattner's Homepage\"",
      ". Chris Lattner",
      ". Retrieved ",
      "3 June",
      " 2014",
      ". ",
      "The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.",
      "\n",
      "\n",
      "^",
      " ",
      "Kuhlman, Dave. ",
      "\"A Python Book: Beginning Python, Advanced Python, and Python Exercises\"",
      ". Section 1.1. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 23 June 2012.",
      "\n",
      "\n",
      "^",
      " ",
      "\"About Python\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 April",
      " 2012",
      ".",
      ", second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Peterson, Benjamin (20 April 2020). ",
      "\"Python Insider: Python 2.7.18, the last release of Python 2\"",
      ". ",
      "Python Insider",
      ". Retrieved ",
      "27 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Sunsetting Python 2\"",
      ". ",
      "Python.org",
      ". Retrieved ",
      "22 September",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 373 -- Python 2.7 Release Schedule\"",
      ". ",
      "Python.org",
      ". Retrieved ",
      "22 September",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Developer's Guide \u2014 Python Developer's Guide\"",
      ". ",
      "devguide.python.org",
      ". Retrieved ",
      "17 December",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"History and License\"",
      ". Retrieved ",
      "5 December",
      " 2016",
      ".",
      " \"All Python releases are Open Source\"",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Venners, Bill (13 January 2003). ",
      "\"The Making of Python\"",
      ". ",
      "Artima Developer",
      ". Artima",
      ". Retrieved ",
      "22 March",
      " 2007",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido",
      " (29 August 2000). ",
      "\"SETL (was: Lukewarm about range literals)\"",
      ". ",
      "Python-Dev",
      " (Mailing list)",
      ". Retrieved ",
      "13 March",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (20 January 2009). ",
      "\"A Brief Timeline of Python\"",
      ". ",
      "The History of Python",
      ". Retrieved ",
      "20 January",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fairchild, Carlie (12 July 2018). ",
      "\"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\"",
      ". ",
      "Linux Journal",
      ". Retrieved ",
      "13 July",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal\"",
      ". ",
      "www.linuxjournal.com",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python boss Guido van Rossum steps down after 30 years\"",
      ". ",
      "The Inquirer",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 8100\"",
      ". ",
      "python",
      ". Python Software Foundation",
      ". Retrieved ",
      "4 May",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 8100\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "4 May",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kuchling, A. M.; Zadka, Moshe (16 October 2000). ",
      "\"What's New in Python 2.0\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python 3.0 Release\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "8 July",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (5 April 2006). ",
      "\"PEP 3000\u00a0\u2013 Python 3000\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation. Archived from ",
      "the original",
      " on 3 March 2016",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Automated Python 2 to 3 code translation \u2014 Python Documentation\"",
      ". Retrieved ",
      "11 February",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 373 -- Python 2.7 Release Schedule\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "9 January",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 466 -- Network Security Enhancements for Python 2.7.x\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "9 January",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "The Cain Gang Ltd. ",
      "\"Python Metaclasses: Who? Why? When?\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 30 May 2009",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"3.3. Special method names\"",
      ". ",
      "The Python Language Reference",
      ". Python Software Foundation",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PyDBC: method preconditions, method postconditions and class invariants for Python\"",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Contracts for Python\"",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PyDatalog\"",
      ". Retrieved ",
      "22 July",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Extending and Embedding the Python Interpreter: Reference Counts\"",
      ". Docs.python.org",
      ". Retrieved ",
      "5 June",
      " 2020",
      ". ",
      "Since Python makes heavy use of ",
      "malloc()",
      " and ",
      "free()",
      ", it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called ",
      "reference counting",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Hettinger, Raymond (30 January 2002). ",
      "\"PEP 289\u00a0\u2013 Generator Expressions\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "19 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"6.5 itertools\u00a0\u2013 Functions creating iterators for efficient looping\"",
      ". Docs.python.org",
      ". Retrieved ",
      "22 November",
      " 2016",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Peters, Tim (19 August 2004). ",
      "\"PEP 20\u00a0\u2013 The Zen of Python\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). ",
      "Python Cookbook, 2nd Edition",
      ". ",
      "O'Reilly Media",
      ". p.\u00a0230. ",
      "ISBN",
      "\u00a0",
      "978-0-596-00797-3",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ebeab.com\"",
      ". ",
      "ebeab.com",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"General Python FAQ\"",
      ". ",
      "Python v2.7.3 documentation",
      ". Docs.python.org",
      ". Retrieved ",
      "4 June",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"15 Ways Python Is a Powerful Force on the Web\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"8.18. pprint \u2014 Data pretty printer \u2014 Python 3.8.3 documentation\"",
      ". ",
      "docs.python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Goodger, David. ",
      "\"Code Like a Pythonista: Idiomatic Python\"",
      ". Archived from ",
      "the original",
      " on 27 May 2014",
      ". Retrieved ",
      "24 March",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"How to think like a Pythonista\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Is Python a good language for beginning programmers?\"",
      ". ",
      "General Python FAQ",
      ". Python Software Foundation",
      ". Retrieved ",
      "21 March",
      " 2007",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Myths about indentation in Python\"",
      ". Secnetix.de",
      ". Retrieved ",
      "19 April",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python 2.5 Release\"",
      ". ",
      "Python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Highlights: Python 2.5\"",
      ". ",
      "Python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (22 April 2009). ",
      "\"Tail Recursion Elimination\"",
      ". Neopythonic.blogspot.be",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (9 February 2006). ",
      "\"Language Design Is Not Just Solving Puzzles\"",
      ". ",
      "Artima forums",
      ". Artima",
      ". Retrieved ",
      "21 March",
      " 2007",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido; Eby, Phillip J. (10 May 2005). ",
      "\"PEP 342\u00a0\u2013 Coroutines via Enhanced Generators\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "19 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 380\"",
      ". Python.org",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"division\"",
      ". ",
      "python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 0465 -- A dedicated infix operator for matrix multiplication\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "1 January",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python 3.5.1 Release and Changelog\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "1 January",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"What's New in Python 3.8\"",
      ". Retrieved ",
      "14 October",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and\u00a0!=\"",
      ". ",
      "Oracle Corporation",
      ". Retrieved ",
      "28 August",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and\u00a0!=\"",
      ". Oracle Corporation",
      ". Retrieved ",
      "28 August",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido; Hettinger, Raymond (7 February 2003). ",
      "\"PEP 308\u00a0\u2013 Conditional Expressions\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "13 July",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"4. Built-in Types \u2014 Python 3.6.3rc1 documentation\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "1 October",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"5.3. Tuples and Sequences \u2014 Python 3.7.1rc2 documentation\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "17 October",
      " 2018",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"PEP 498 -- Literal String Interpolation\"",
      ". ",
      "python.org",
      ". Retrieved ",
      "8 March",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Why must 'self' be used explicitly in method definitions and calls?\"",
      ". ",
      "Design and History FAQ",
      ". Python Software Foundation",
      ". Retrieved ",
      "19 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\"",
      ". Retrieved ",
      "12 January",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Type hinting for Python\"",
      ". LWN.net. 24 December 2014",
      ". Retrieved ",
      "5 May",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"mypy - Optional Static Typing for Python\"",
      ". Retrieved ",
      "28 January",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\n",
      "\"15. Floating Point Arithmetic: Issues and Limitations \u2014 Python 3.8.3 documentation\"",
      ". ",
      "docs.python.org",
      ". Retrieved ",
      "6 June",
      " 2020",
      ". ",
      "almost all platforms map Python floats to IEEE-754 double precision",
      "\n",
      "\n",
      "^",
      " ",
      "Zadka, Moshe; van Rossum, Guido (11 March 2001). ",
      "\"PEP 237\u00a0\u2013 Unifying Long Integers and Integers\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Built-in Types\"",
      ". Retrieved ",
      "3 October",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 465 -- A dedicated infix operator for matrix multiplication\"",
      ". ",
      "python.org",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Zadka, Moshe; van Rossum, Guido (11 March 2001). ",
      "\"PEP 238\u00a0\u2013 Changing the Division Operator\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "23 October",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Why Python's Integer Division Floors\"",
      ". Retrieved ",
      "25 August",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"round\"",
      ", ",
      "The Python standard library, release 3.2, \u00a72: Built-in functions",
      ", retrieved ",
      "14 August",
      " 2011",
      "\n",
      "\n",
      "^",
      " ",
      "\"round\"",
      ", ",
      "The Python standard library, release 2.7, \u00a72: Built-in functions",
      ", retrieved ",
      "14 August",
      " 2011",
      "\n",
      "\n",
      "^",
      " ",
      "Beazley, David M. (2009). ",
      "Python Essential Reference",
      " (4th ed.). p.\u00a0",
      "66",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan, Brian W.; Ritchie, Dennis M. (1988). ",
      "The C Programming Language",
      " (2nd ed.). p.\u00a0",
      "206",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Batista, Facundo. ",
      "\"PEP 0327 -- Decimal Data Type\"",
      ". ",
      "Python.org",
      ". Retrieved ",
      "26 September",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"What's New in Python 2.6 \u2014 Python v2.6.9 documentation\"",
      ". ",
      "docs.python.org",
      ". Retrieved ",
      "26 September",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2013 Hoyt Koepke\"",
      ". ",
      "www.stat.washington.edu",
      ". Retrieved ",
      "3 February",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Shell, Scott (17 June 2014). ",
      "\"An introduction to Python for scientific computing\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "3 February",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Piotrowski, Przemyslaw (July 2006). ",
      "\"Build a Rapid Web Development Environment for Python Server Pages and Oracle\"",
      ". ",
      "Oracle Technology Network",
      ". Oracle",
      ". Retrieved ",
      "12 March",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Batista, Facundo (17 October 2003). ",
      "\"PEP 327\u00a0\u2013 Decimal Data Type\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Eby, Phillip J. (7 December 2003). ",
      "\"PEP 333\u00a0\u2013 Python Web Server Gateway Interface v1.0\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "19 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Debill, Erik. ",
      "\"Module Counts\"",
      ". ",
      "ModuleCounts",
      ". Retrieved ",
      "5 November",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks\"",
      ". ",
      "likegeeks.com",
      ". 5 December 2017",
      ". Retrieved ",
      "12 March",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Enthought, Canopy. ",
      "\"Canopy\"",
      ". ",
      "www.enthought.com",
      ". Retrieved ",
      "20 August",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "van Rossum, Guido (5 June 2001). ",
      "\"PEP 7\u00a0\u2013 Style Guide for C Code\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CPython byte code\"",
      ". Docs.python.org",
      ". Retrieved ",
      "16 February",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python 2.5 internals\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "19 April",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"An Interview with Guido van Rossum\"",
      ". Oreilly.com",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PyPy compatibility\"",
      ". Pypy.org",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"speed comparison between CPython and Pypy\"",
      ". Speed.pypy.org",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Shaw, Anthony (30 March 2018). ",
      "\"Which is the fastest version of Python?\"",
      ". Hacker Noon",
      ". Retrieved ",
      "20 December",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Application-level Stackless features \u2014 PyPy 2.0.2 documentation\"",
      ". Doc.pypy.org",
      ". Retrieved ",
      "17 July",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python-for-EV3\"",
      ". ",
      "LEGO Education",
      ". Retrieved ",
      "17 April",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Plans for optimizing Python\"",
      ". ",
      "Google Project Hosting",
      ". 15 December 2009",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python on the Nokia N900\"",
      ". ",
      "Stochastic Geometry",
      ". 29 April 2010.",
      "\n",
      "\n",
      "^",
      " ",
      "\"google/grumpy\"",
      ". 10 April 2020 \u2013 via GitHub.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Projects\"",
      ". ",
      "opensource.google",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Nuitka Home | Nuitka Home\"",
      ". ",
      "nuitka.net",
      ". Retrieved ",
      "18 August",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Borderies, Olivier (24 January 2019). ",
      "\"Pythran: Python at C++ speed\u00a0!\"",
      ". ",
      "Medium",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Pythran \u2014 Pythran 0.9.5 documentation\"",
      ". ",
      "pythran.readthedocs.io",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Murri, Riccardo (2013). ",
      "Performance of Python runtimes on a non-numeric scientific code",
      ". European Conference on Python in Science (EuroSciPy). ",
      "arXiv",
      ":",
      "1404.6388",
      ". ",
      "Bibcode",
      ":",
      "2014arXiv1404.6388M",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Computer Language Benchmarks Game\"",
      ". Retrieved ",
      "30 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). ",
      "\"PEP 1\u00a0\u2013 PEP Purpose and Guidelines\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "19 April",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 8 -- Style Guide for Python Code\"",
      ". ",
      "Python.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Cannon, Brett. ",
      "\"Guido, Some Guys, and a Mailing List: How Python is Developed\"",
      ". ",
      "python.org",
      ". Python Software Foundation. Archived from ",
      "the original",
      " on 1 June 2009",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Developer's Guide\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Norwitz, Neal (8 April 2002). ",
      "\"[Python-Dev] Release Schedules (was Stability & change)\"",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Aahz; Baxter, Anthony (15 March 2001). ",
      "\"PEP 6\u00a0\u2013 Bug Fix Releases\"",
      ". ",
      "Python Enhancement Proposals",
      ". Python Software Foundation",
      ". Retrieved ",
      "27 June",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"What's New in Python 3.9\"",
      ". ",
      "Python",
      ". Retrieved ",
      "28 November",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 602 -- Annual Release Cycle for Python\"",
      ". ",
      "Python.org",
      ". Retrieved ",
      "6 November",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Changing the Python release cadence [LWN.net]\"",
      ". ",
      "lwn.net",
      ". Retrieved ",
      "6 November",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PEP 596 -- Python 3.9 Release Schedule\"",
      ". ",
      "Python.org",
      ". Retrieved ",
      "6 November",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Buildbot\"",
      ". ",
      "Python Developer\u2019s Guide",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Whetting Your Appetite\"",
      ". ",
      "The Python Tutorial",
      ". Python Software Foundation",
      ". Retrieved ",
      "20 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"In Python, should I use else after a return in an if block?\"",
      ". ",
      "Stack Overflow",
      ". Stack Exchange. 17 February 2011",
      ". Retrieved ",
      "6 May",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lutz, Mark (2009). ",
      "Learning Python: Powerful Object-Oriented Programming",
      ". O'Reilly Media, Inc. p.\u00a017. ",
      "ISBN",
      "\u00a0",
      "9781449379322",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fehily, Chris (2002). ",
      "Python",
      ". Peachpit Press. p.\u00a0xv. ",
      "ISBN",
      "\u00a0",
      "9780201748840",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TIOBE Index\"",
      ". TIOBE - The Software Quality Company",
      ". Retrieved ",
      "7 March",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "TIOBE Software Index (2015). ",
      "\"TIOBE Programming Community Index Python\"",
      ". Retrieved ",
      "10 September",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Prechelt, Lutz (14 March 2000). ",
      "\"An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "30 August",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Quotes about Python\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "8 January",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Organizations Using Python\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "15 January",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python\u00a0: the holy grail of programming\"",
      ". ",
      "CERN Bulletin",
      ". CERN Publications (31/2006). 31 July 2006",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Shafer, Daniel G. (17 January 2003). ",
      "\"Python Streamlines Space Shuttle Mission Design\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers\"",
      ". ",
      "Facebook for Developers",
      ". Retrieved ",
      "19 June",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\"",
      ". Instagram Engineering",
      ". Retrieved ",
      "27 May",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"How we use Python at Spotify\"",
      ". ",
      "Spotify Labs",
      ". 20 March 2013",
      ". Retrieved ",
      "25 July",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fortenberry, Tim (17 January 2003). ",
      "\"Industrial Light & Magic Runs on Python\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Taft, Darryl K. (5 March 2007). ",
      "\"Python Slithers into Systems\"",
      ". ",
      "eWeek.com",
      ". Ziff Davis Holdings",
      ". Retrieved ",
      "24 September",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "GitHub - reddit-archive/reddit: historical code from reddit.com.",
      ", The Reddit Archives, 19 March 2019",
      ", retrieved ",
      "20 March",
      " 2019",
      "\n",
      "\n",
      "^",
      " ",
      "\"Usage statistics and market share of Python for websites\"",
      ". 2012",
      ". Retrieved ",
      "18 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Oliphant, Travis (2007). ",
      "\"Python for Scientific Computing\"",
      ". ",
      "Computing in Science and Engineering",
      ". ",
      "9",
      " (3): 10\u201320. ",
      "Bibcode",
      ":",
      "2007CSE.....9c..10O",
      ". ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.474.6460",
      ". ",
      "doi",
      ":",
      "10.1109/MCSE.2007.58",
      ". ",
      "S2CID",
      "\u00a0",
      "206457124",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Millman, K. Jarrod; Aivazis, Michael (2011). ",
      "\"Python for Scientists and Engineers\"",
      ". ",
      "Computing in Science and Engineering",
      ". ",
      "13",
      " (2): 9\u201312. ",
      "Bibcode",
      ":",
      "2011CSE....13b...9M",
      ". ",
      "doi",
      ":",
      "10.1109/MCSE.2011.36",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Science education with SageMath",
      ", Innovative Computing in Science Education",
      ", retrieved ",
      "22 April",
      " 2019",
      "\n",
      "\n",
      "^",
      " ",
      "\"OpenCV: OpenCV-Python Tutorials\"",
      ". ",
      "docs.opencv.org",
      ". Retrieved ",
      "14 September",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Installers for GIMP for Windows - Frequently Asked Questions\"",
      ". 26 July 2013. Archived from ",
      "the original",
      " on 17 July 2013",
      ". Retrieved ",
      "26 July",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"jasc psp9components\"",
      ". Archived from ",
      "the original",
      " on 19 March 2008.",
      "\n",
      "\n",
      "^",
      " ",
      "\"About getting started with writing geoprocessing scripts\"",
      ". ",
      "ArcGIS Desktop Help 9.2",
      ". Environmental Systems Research Institute. 17 November 2006",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "CCP porkbelly (24 August 2010). ",
      "\"Stackless Python 2.7\"",
      ". ",
      "EVE Community Dev Blogs",
      ". ",
      "CCP Games",
      ". ",
      "As you may know, EVE has at its core the programming language known as Stackless Python.",
      "\n",
      "\n",
      "^",
      " ",
      "Caudill, Barry (20 September 2005). ",
      "\"Modding Sid Meier's Civilization IV\"",
      ". ",
      "Sid Meier's Civilization IV Developer Blog",
      ". ",
      "Firaxis Games",
      ". Archived from ",
      "the original",
      " on 2 December 2010. ",
      "we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Language Guide (v1.0)\"",
      ". ",
      "Google Documents List Data API v1.0",
      ". Archived from ",
      "the original",
      " on 15 July 2010.",
      "\n",
      "\n",
      "^",
      " ",
      "Dean, Jeff",
      "; Monga, Rajat;  et al. (9 November 2015). ",
      "\"TensorFlow: Large-scale machine learning on heterogeneous systems\"",
      " ",
      "(PDF)",
      ". ",
      "TensorFlow.org",
      ". Google Research",
      ". Retrieved ",
      "10 November",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Piatetsky, Gregory. ",
      "\"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\"",
      ". ",
      "KDnuggets",
      ". KDnuggets",
      ". Retrieved ",
      "30 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Who is using scikit-learn? \u2014 scikit-learn 0.20.1 documentation\"",
      ". ",
      "scikit-learn.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Jouppi, Norm",
      ". ",
      "\"Google supercharges machine learning tasks with TPU custom chip\"",
      ". ",
      "Google Cloud Platform Blog",
      ". Retrieved ",
      "19 May",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Natural Language Toolkit \u2014 NLTK 3.5b1 documentation\"",
      ". ",
      "www.nltk.org",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Setup and Usage\"",
      ". Python Software Foundation",
      ". Retrieved ",
      "10 January",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Immunity: Knowing You're Secure\"",
      ". Archived from ",
      "the original",
      " on 16 February 2009.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Core Security\"",
      ". ",
      "Core Security",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"What is Sugar?\"",
      ". Sugar Labs",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"4.0 New Features and Fixes\"",
      ". ",
      "LibreOffice.org",
      ". ",
      "The Document Foundation",
      ". 2013",
      ". Retrieved ",
      "25 February",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Gotchas for Python Users\"",
      ". ",
      "boo.codehaus.org",
      ". Codehaus Foundation. Archived from ",
      "the original",
      " on 11 December 2008",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Esterbrook, Charles. ",
      "\"Acknowledgements\"",
      ". ",
      "cobra-language.com",
      ". Cobra Language",
      ". Retrieved ",
      "7 April",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Proposals: iterators and generators [ES4 Wiki]\"",
      ". wiki.ecmascript.org. Archived from ",
      "the original",
      " on 20 October 2007",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"FAQ: What is GDScript and why should I use it?\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kincaid, Jason (10 November 2009). ",
      "\"Google's Go: A New Programming Language That's Python Meets C++\"",
      ". ",
      "TechCrunch",
      ". Retrieved ",
      "29 January",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Strachan, James (29 August 2003). ",
      "\"Groovy\u00a0\u2013 the birth of a new dynamic language for the Java platform\"",
      ". Archived from ",
      "the original",
      " on 5 April 2007",
      ". Retrieved ",
      "11 June",
      " 2007",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Yegulalp, Serdar (16 January 2017). ",
      "\"Nim language draws from best of Python, Rust, Go, and Lisp\"",
      ". ",
      "InfoWorld",
      ". ",
      "Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).",
      "\n",
      "\n",
      "^",
      " ",
      "\"An Interview with the Creator of Ruby\"",
      ". Linuxdevcenter.com",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lattner, Chris",
      " (3 June 2014). ",
      "\"Chris Lattner's Homepage\"",
      ". Chris Lattner",
      ". Retrieved ",
      "3 June",
      " 2014",
      ". ",
      "I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.",
      "\n",
      "\n",
      "^",
      " ",
      "Kupries, Andreas; Fellows, Donal K. (14 September 2000). ",
      "\"TIP #3: TIP Format\"",
      ". ",
      "tcl.tk",
      ". Tcl Developer Xchange",
      ". Retrieved ",
      "24 November",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Gustafsson, Per; Niskanen, Raimo (29 January 2007). ",
      "\"EEP 1: EEP Purpose and Guidelines\"",
      ". erlang.org",
      ". Retrieved ",
      "19 April",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Swift Evolution Process\"",
      ". ",
      "Swift Programming Language Evolution repository on GitHub",
      ". 18 February 2020",
      ". Retrieved ",
      "27 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "\n",
      "Sources",
      "[",
      "edit",
      "]",
      "\n",
      "\"Python for Artificial Intelligence\"",
      ". Wiki.python.org. 19 July 2012. Archived from ",
      "the original",
      " on 1 November 2012",
      ". Retrieved ",
      "3 December",
      " 2012",
      ".",
      "\n",
      "Paine, Jocelyn, ed. (August 2005). ",
      "\"AI in Python\"",
      ". ",
      "AI Expert Newsletter",
      ". Amzi!. Archived from ",
      "the original",
      " on 26 March 2012",
      ". Retrieved ",
      "11 February",
      " 2012",
      ".",
      "\n",
      "\"PyAIML 0.8.5\u00a0: Python Package Index\"",
      ". Pypi.python.org",
      ". Retrieved ",
      "17 July",
      " 2013",
      ".",
      "\n",
      "Russell, Stuart J.",
      " & ",
      "Norvig, Peter",
      " (2009). ",
      "Artificial Intelligence: A Modern Approach",
      " (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "978-0-13-604259-4",
      ".",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      "Downey, Allen B. (May 2012). ",
      "Think Python: How to Think Like a Computer Scientist",
      " (Version 1.6.6 ed.). ",
      "ISBN",
      "\u00a0",
      "978-0-521-72596-5",
      ".",
      "\n",
      "Hamilton, Naomi (5 August 2008). ",
      "\"The A-Z of Programming Languages: Python\"",
      ". ",
      "Computerworld",
      ". Archived from ",
      "the original",
      " on 29 December 2008",
      ". Retrieved ",
      "31 March",
      " 2010",
      ".",
      "\n",
      "Lutz, Mark (2013). ",
      "Learning Python",
      " (5th ed.). O'Reilly Media. ",
      "ISBN",
      "\u00a0",
      "978-0-596-15806-4",
      ".",
      "\n",
      "Pilgrim, Mark (2004). ",
      "Dive into Python",
      ". Apress. ",
      "ISBN",
      "\u00a0",
      "978-1-59059-356-1",
      ".",
      "\n",
      "Pilgrim, Mark (2009). ",
      "Dive into Python 3",
      ". Apress. ",
      "ISBN",
      "\u00a0",
      "978-1-4302-2415-0",
      ".",
      "\n",
      "Summerfield, Mark (2009). ",
      "Programming in Python 3",
      " (2nd ed.). Addison-Wesley Professional. ",
      "ISBN",
      "\u00a0",
      "978-0-321-68056-3",
      ".",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Python",
      "at Wikipedia's ",
      "sister projects",
      "Media",
      " from Wikimedia Commons",
      "\n            ",
      "Quotations",
      " from Wikiquote",
      "\n            ",
      "Textbooks",
      " from Wikibooks",
      "\n            ",
      "Resources",
      " from Wikiversity",
      "\n            ",
      "Data",
      " from Wikidata",
      "\n            ",
      "\n",
      "\n",
      "Official website",
      " ",
      "\n",
      "Python",
      " at ",
      "Curlie",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      "Implementations",
      "\n",
      "CircuitPython",
      "\n",
      "CLPython",
      "\n",
      "CPython",
      "\n",
      "Cython",
      "\n",
      "MicroPython",
      "\n",
      "Numba",
      "\n",
      "IronPython",
      "\n",
      "Jython",
      "\n",
      "Psyco",
      "\n",
      "PyPy",
      "\n",
      "Python for S60",
      "\n",
      "Shed Skin",
      "\n",
      "Stackless Python",
      "\n",
      "Unladen Swallow",
      "\n",
      "more",
      "...",
      "\n",
      "IDE",
      "\n",
      "Boa",
      "\n",
      "Eric Python IDE",
      "\n",
      "IDLE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Ninja-IDE",
      "\n",
      "more",
      "...",
      "\n",
      "Topics",
      "\n",
      "WSGI",
      "\n",
      "\n",
      "software (list)",
      "\n",
      "Python Software Foundation",
      "\n",
      "PyCon",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      " ",
      "web frameworks",
      "\n",
      "BlueBream",
      "\n",
      "Bottle",
      "\n",
      "CherryPy",
      "\n",
      "Django",
      "\n",
      "Flask",
      "\n",
      "Grok",
      "\n",
      "Nagare",
      "\n",
      "Nevow",
      "\n",
      "Pyjs",
      "\n",
      "Pylons",
      "\n",
      "Pyramid",
      "\n",
      "Quixote",
      "\n",
      "Spyce",
      "\n",
      "TACTIC",
      "\n",
      "Tornado",
      "\n",
      "TurboGears",
      "\n",
      "TwistedWeb",
      "\n",
      "Webware",
      "\n",
      "web2py",
      "\n",
      "Zope 2",
      "\n",
      "more",
      "...",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Differentiable computing",
      "General",
      "\n",
      "Differentiable programming",
      "\n",
      "Neural Turing machine",
      "\n",
      "Differentiable neural computer",
      "\n",
      "Automatic differentiation",
      "\n",
      "Neuromorphic engineering",
      "\n",
      "Concepts",
      "\n",
      "Gradient descent",
      "\n",
      "Cable theory",
      "\n",
      "Cluster analysis",
      "\n",
      "Regression analysis",
      "\n",
      "Pattern recognition",
      "\n",
      "Adversarial machine learning",
      "\n",
      "Computational learning theory",
      "\n",
      "Programming languages",
      "\n",
      "Python",
      "\n",
      "Julia",
      "\n",
      "Application",
      "\n",
      "Machine learning",
      "\n",
      "Artificial neural network",
      "\n",
      "Scientific computing",
      "\n",
      "Artificial Intelligence",
      "\n",
      "Hardware",
      "\n",
      "TPU",
      "\n",
      "VPU",
      "\n",
      "Memristor",
      "\n",
      "SpiNNaker",
      "\n",
      "Software library",
      "\n",
      "TensorFlow",
      "\n",
      "PyTorch",
      "\n",
      "Implementation",
      "Audio-visual",
      "\n",
      "AlexNet",
      "\n",
      "WaveNet",
      "\n",
      "Human image synthesis",
      "\n",
      "HWR",
      "\n",
      "OCR",
      "\n",
      "Speech synthesis",
      "\n",
      "Speech recognition",
      "\n",
      "Facial recognition system",
      "\n",
      "Verbal",
      "\n",
      "Word2vec",
      "\n",
      "Transformer",
      "\n",
      "BERT",
      "\n",
      "NMT",
      "\n",
      "Project Debater",
      "\n",
      "Watson",
      "\n",
      "GPT-3",
      "\n",
      "Decisional",
      "\n",
      "AlphaGo",
      "\n",
      "Q-learning",
      "\n",
      "SARSA",
      "\n",
      "OpenAI Five",
      "\n",
      "People",
      "\n",
      "Alex Graves",
      "\n",
      "Ian Goodfellow",
      "\n",
      "Yoshua Bengio",
      "\n",
      "Geoffrey Hinton",
      "\n",
      "Yann LeCun",
      "\n",
      "Andrew Ng",
      "\n",
      "Demis Hassabis",
      "\n",
      "David Silver",
      "\n",
      "\n",
      " Portals\n",
      "Computer programming",
      "\n",
      "Technology",
      "\n",
      " Category\n",
      "Artificial neural networks",
      "\n",
      "Machine learning",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Free and open-source software",
      "General",
      "\n",
      "Alternative terms for free software",
      "\n",
      "Comparison of open-source and closed-source software",
      "\n",
      "Comparison of source-code-hosting facilities",
      "\n",
      "Free software",
      "\n",
      "Free software project directories",
      "\n",
      "Gratis versus libre",
      "\n",
      "Long-term support",
      "\n",
      "Open-source software",
      "\n",
      "Open-source software development",
      "\n",
      "Outline",
      "\n",
      "Timeline",
      "\n",
      "Software",
      "packages",
      "\n",
      "Audio",
      "\n",
      "Bioinformatics",
      "\n",
      "Codecs",
      "\n",
      "Configuration management",
      "\n",
      "Graphics",
      "\n",
      "Wireless",
      "\n",
      "Geophysics",
      "\n",
      "Health",
      "\n",
      "Mathematics",
      "\n",
      "Operating systems",
      "\n",
      "Programming languages",
      "\n",
      "Routing",
      "\n",
      "Television",
      "\n",
      "Video games",
      "\n",
      "Web applications",
      "\n",
      "E-commerce",
      "\n",
      "Android apps",
      "\n",
      "iOS apps",
      "\n",
      "Commercial",
      "\n",
      "Trademarked",
      "\n",
      "Formerly proprietary",
      "\n",
      "Formerly open-source",
      "\n",
      "Community",
      "\n",
      "Free software movement",
      "\n",
      "History",
      "\n",
      "Open-source-software movement",
      "\n",
      "Organizations",
      "\n",
      "Events",
      "\n",
      "Licenses",
      "\n",
      "AFL",
      "\n",
      "Apache",
      "\n",
      "APSL",
      "\n",
      "Artistic",
      "\n",
      "Beerware",
      "\n",
      "BSD",
      "\n",
      "Creative Commons",
      "\n",
      "CDDL",
      "\n",
      "EPL",
      "\n",
      "Free Software Foundation",
      "\n",
      "GNU GPL",
      "\n",
      "GNU LGPL",
      "\n",
      "ISC",
      "\n",
      "MIT",
      "\n",
      "MPL",
      "\n",
      "Python",
      "\n",
      "Python Software Foundation License",
      "\n",
      "Shared Source Initiative",
      "\n",
      "Sleepycat",
      "\n",
      "Unlicense",
      "\n",
      "WTFPL",
      "\n",
      "zlib",
      "\n",
      "Types and",
      " standards",
      "\n",
      "Comparison of licenses",
      "\n",
      "Contributor License Agreement",
      "\n",
      "Copyleft",
      "\n",
      "Debian Free Software Guidelines",
      "\n",
      "Definition of Free Cultural Works",
      "\n",
      "Free license",
      "\n",
      "The Free Software Definition",
      "\n",
      "The Open Source Definition",
      "\n",
      "Open-source license",
      "\n",
      "Permissive software license",
      "\n",
      "Public domain",
      "\n",
      "Viral license",
      "\n",
      "\n",
      "Challenges",
      "\n",
      "Digital rights management",
      "\n",
      "Hardware restrictions",
      "\n",
      "License proliferation",
      "\n",
      "Mozilla software rebranding",
      "\n",
      "Proprietary device drivers",
      "\n",
      "Proprietary firmware",
      "\n",
      "Proprietary software",
      "\n",
      "SCO/Linux controversies",
      "\n",
      "Software patents",
      "\n",
      "Software security",
      "\n",
      "Trusted Computing",
      "\n",
      "Related topics",
      "\n",
      "Forking",
      "\n",
      "GNU Manifesto",
      "\n",
      "Microsoft Open Specification Promise",
      "\n",
      "Open-core model",
      "\n",
      "Open-source hardware",
      "\n",
      "Shared Source Initiative",
      "\n",
      "Source-available software",
      "\n",
      "The Cathedral and the Bazaar",
      "\n",
      "Revolution OS",
      "\n",
      "\n",
      " ",
      "Portal",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Book",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNF",
      ": ",
      "cb13560465c",
      " ",
      "(data)",
      "\n",
      "GND",
      ": ",
      "4434275-5",
      "\n",
      "LCCN",
      ": ",
      "sh96008834",
      "\n",
      "SUDOC",
      ": ",
      "051626225",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=982903858",
      "\""
    ],
    "lastUpdated": " 11 October 2020, at 02:19"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Haskell_(programming_language)",
    "title": "Haskell (programming language)",
    "text": [
      "Functional programming language",
      "\n",
      "\n",
      "\n",
      "Haskell",
      "Paradigm",
      "Purely functional",
      "Designed\u00a0by",
      "Lennart Augustsson",
      ", Dave Barton, Brian Boutel, Warren Burton, Joseph Fasel, Kevin Hammond, Ralf Hinze, ",
      "Paul Hudak",
      ", ",
      "John Hughes",
      ", Thomas Johnsson, Mark Jones, ",
      "Simon Peyton Jones",
      ", ",
      "John Launchbury",
      ", ",
      "Erik Meijer",
      ", John Peterson, Alastair Reid, Colin Runciman, ",
      "Philip Wadler",
      "First\u00a0appeared",
      "1990",
      "; 30\u00a0years ago",
      "\u00a0(",
      "1990",
      ")",
      "[1]",
      "Stable release",
      "Haskell 2010",
      "[2]",
      "\n   / July\u00a02010",
      "; 10\u00a0years ago",
      "\u00a0(",
      "2010-07",
      ")",
      "Preview release",
      "   Haskell 2020 announced",
      "[3]",
      " \n   ",
      "\n",
      "Typing discipline",
      "Inferred",
      ", ",
      "static",
      ", ",
      "strong",
      "OS",
      "Cross-platform",
      "Filename extensions",
      ".hs, .lhs",
      "Website",
      "www",
      ".haskell",
      ".org",
      "Major ",
      "implementations",
      "GHC",
      ", ",
      "Hugs",
      ", NHC, JHC, ",
      "Yhc",
      ", UHC",
      "Dialects",
      "Helium",
      ", ",
      "Gofer",
      "Influenced by",
      "Clean",
      ",",
      "[4]",
      " ",
      "FP",
      ",",
      "[4]",
      " ",
      "Gofer",
      ",",
      "[4]",
      " ",
      "Hope",
      " and Hope",
      "+",
      ",",
      "[4]",
      " ",
      "Id",
      ",",
      "[4]",
      " ",
      "ISWIM",
      ",",
      "[4]",
      " ",
      "KRC",
      ",",
      "[4]",
      " ",
      "Lisp",
      ",",
      "[4]",
      " ",
      "Miranda",
      ",",
      "[4]",
      " ",
      "ML",
      " and ",
      "Standard ML",
      ",",
      "[4]",
      " ",
      "Orwell",
      ", ",
      "SASL",
      ",",
      "[4]",
      " ",
      "Scheme",
      ",",
      "[4]",
      " ",
      "SISAL",
      "[4]",
      "Influenced",
      "Agda",
      ",",
      "[5]",
      " ",
      "Bluespec",
      ",",
      "[6]",
      " ",
      "C++11",
      "/",
      "Concepts",
      ",",
      "[7]",
      " ",
      "C#",
      "/",
      "LINQ",
      ",",
      "[8]",
      "[9]",
      "[10]",
      "[11]",
      " CAL,",
      "[",
      "citation needed",
      "]",
      " ",
      "Cayenne",
      ",",
      "[8]",
      " ",
      "Clean",
      ",",
      "[8]",
      " ",
      "Clojure",
      ",",
      "[12]",
      " ",
      "CoffeeScript",
      ",",
      "[13]",
      " ",
      "Curry",
      ",",
      "[8]",
      " ",
      "Elm",
      ", ",
      "Epigram",
      ",",
      "[",
      "citation needed",
      "]",
      " ",
      "Escher",
      ",",
      "[14]",
      " ",
      "F#",
      ",",
      "[15]",
      " ",
      "Frege",
      ",",
      "[16]",
      " ",
      "Hack",
      ",",
      "[17]",
      " ",
      "Idris",
      ",",
      "[18]",
      " ",
      "Isabelle",
      ",",
      "[8]",
      " ",
      "Java",
      "/",
      "Generics",
      ",",
      "[8]",
      " ",
      "LiveScript",
      ",",
      "[19]",
      " ",
      "Mercury",
      ",",
      "[8]",
      " ",
      "\u03a9mega",
      ",",
      "[",
      "citation needed",
      "]",
      " ",
      "PureScript",
      ",",
      "[20]",
      " ",
      "Python",
      ",",
      "[8]",
      "[21]",
      " ",
      "Raku",
      ",",
      "[22]",
      " ",
      "Rust",
      ",",
      "[23]",
      " ",
      "Scala",
      ",",
      "[8]",
      "[24]",
      " ",
      "Swift",
      ",",
      "[25]",
      " ",
      "Timber",
      ",",
      "[26]",
      " ",
      "Visual Basic 9.0",
      "[8]",
      "[9]",
      "\n",
      "Haskell",
      " ",
      "/",
      "\u02c8",
      "h",
      "\u00e6",
      "s",
      "k",
      "\u0259l",
      "/",
      "[27]",
      " is a ",
      "general-purpose",
      ", ",
      "statically typed",
      ", ",
      "purely functional",
      " ",
      "programming language",
      " with ",
      "type inference",
      " and ",
      "lazy evaluation",
      ".",
      "[28]",
      "[29]",
      " Developed to be suitable for teaching, research and industrial application, Haskell has pioneered a number of advanced programming language features such as ",
      "type classes",
      ", which enable ",
      "type-safe",
      " ",
      "operator overloading",
      ".  Haskell's main implementation is the ",
      "Glasgow Haskell Compiler",
      " (GHC). It is named after ",
      "logician",
      " ",
      "Haskell Curry",
      ".",
      "[1]",
      "\n",
      "Haskell's ",
      "semantics",
      " are historically based on those of the ",
      "Miranda",
      " programming language, which served to focus the efforts of the initial Haskell working group.",
      "[30]",
      " The last formal specification of the language was made in July 2010, while the development of GHC's implementation has continued to extend Haskell via language extensions. The next formal specification is planned for 2020.",
      "[3]",
      "\n",
      "Haskell is used in academia",
      "[31]",
      "[32]",
      " and industry.",
      "[33]",
      "[34]",
      " As of September 2019, Haskell was the 23rd most popular programming language in terms of Google searches",
      "[35]",
      " for tutorials and made up less than 1% of active users on the GitHub source code repository.",
      "[36]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "History",
      "\n",
      "\n",
      "1.1",
      " ",
      "Haskell 1.0 to 1.4",
      "\n",
      "1.2",
      " ",
      "Haskell 98",
      "\n",
      "1.3",
      " ",
      "Haskell 2010",
      "\n",
      "\n",
      "\n",
      "2",
      " ",
      "Features",
      "\n",
      "3",
      " ",
      "Code examples",
      "\n",
      "4",
      " ",
      "Implementations",
      "\n",
      "5",
      " ",
      "Notable applications",
      "\n",
      "\n",
      "5.1",
      " ",
      "Industry",
      "\n",
      "5.2",
      " ",
      "Web",
      "\n",
      "\n",
      "\n",
      "6",
      " ",
      "Criticism",
      "\n",
      "7",
      " ",
      "Related languages",
      "\n",
      "8",
      " ",
      "Conferences and workshops",
      "\n",
      "9",
      " ",
      "References",
      "\n",
      "10",
      " ",
      "Further reading",
      "\n",
      "11",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Following the release of ",
      "Miranda",
      " by Research Software Ltd. in 1985, interest in ",
      "lazy functional languages",
      " grew. By 1987, more than a dozen ",
      "non-strict",
      ", purely functional programming languages existed. Miranda was the most widely used, but it was ",
      "proprietary software",
      ". At the conference on ",
      "Functional Programming Languages and Computer Architecture",
      " (FPCA '87) in ",
      "Portland, Oregon",
      ", there was a strong consensus that a committee be formed to define an ",
      "open standard",
      " for such languages. The committee's purpose was to consolidate existing ",
      "functional languages",
      " into a common one to serve as a basis for future research in functional-language design.",
      "[37]",
      "\n",
      "\n",
      "Haskell 1.0 to 1.4",
      "[",
      "edit",
      "]",
      "\n",
      "Type classes",
      ", which enable ",
      "type-safe",
      " ",
      "operator overloading",
      ", were first proposed by ",
      "Philip Wadler",
      " and Stephen Blott for ",
      "Standard ML",
      " but were first implemented in Haskell between 1987 and version 1.0.",
      "[38]",
      "[39]",
      "\n",
      "The first version of Haskell (\"Haskell 1.0\") was defined in 1990.",
      "[1]",
      " The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4).\n",
      "\n",
      "  ",
      "Type classes",
      " originated in Haskell",
      "\n",
      "Haskell 98",
      "[",
      "edit",
      "]",
      "\n",
      "In late 1997, the series culminated in ",
      "Haskell 98",
      ", intended to specify a stable, minimal, portable version of the language and an accompanying standard ",
      "library",
      " for teaching, and as a base for future extensions. The committee expressly welcomed creating extensions and variants of Haskell 98 via adding and incorporating experimental features.",
      "[37]",
      "\n",
      "In February 1999, the Haskell 98 language standard was originally published as ",
      "The Haskell 98 Report",
      ".",
      "[37]",
      " In January 2003, a revised version was published as ",
      "Haskell 98 Language and Libraries: The Revised Report",
      ".",
      "[29]",
      " The language continues to evolve rapidly, with the ",
      "Glasgow Haskell Compiler",
      " (GHC) implementation representing the current ",
      "de facto",
      " standard.",
      "[40]",
      "\n",
      "\n",
      "Haskell 2010",
      "[",
      "edit",
      "]",
      "\n",
      "In early 2006, the process of defining a successor to the Haskell 98 standard, informally named ",
      "Haskell Prime",
      ", began.",
      "[41]",
      " This was intended to be an ongoing incremental process to revise the language definition, producing a new revision up to once per year.  The first revision, named ",
      "Haskell 2010",
      ", was announced in November 2009",
      "[2]",
      " and published in July 2010.\n",
      "Haskell 2010 is an incremental update to the language, mostly incorporating several well-used and uncontroversial features previously enabled via compiler-specific flags.\n",
      "\n",
      "Hierarchical module names. Module names are allowed to consist of dot-separated sequences of capitalised identifiers, rather than only one such identifier. This lets modules be named in a hierarchical manner (e.g., ",
      "Data.List",
      " instead of ",
      "List",
      "), although technically modules are still in a single monolithic namespace. This extension was specified in an addendum to Haskell 98 and was in practice universally used.",
      "\n",
      "The ",
      "foreign function interface",
      " (FFI) allows bindings to other programming languages. Only bindings to ",
      "C",
      " are specified in the Report, but the design allows for other language bindings. To support this, data type declarations were permitted to contain no constructors, enabling robust nonce types for foreign data that could not be constructed in Haskell. This extension was also previously specified in an Addendum to the Haskell 98 Report and widely used.",
      "\n",
      "So-called ",
      "n",
      "+",
      "k",
      " patterns (definitions of the form ",
      "fact (n+1) = (n+1) * fact n",
      ") were no longer allowed. This ",
      "syntactic sugar",
      " had misleading semantics, in which the code looked like it used the ",
      "(+)",
      " operator, but in fact desugared to code using ",
      "(-)",
      " and ",
      "(>=)",
      ".",
      "\n",
      "The rules of ",
      "type inference",
      " were relaxed to allow more programs to type check.",
      "\n",
      "Some ",
      "syntax",
      " issues (changes in the formal grammar) were fixed: pattern guards were added, allowing pattern matching within guards; resolution of ",
      "operator fixity",
      " was specified in a simpler way that reflected actual practice; an edge case in the interaction of the language's ",
      "lexical syntax",
      " of operators and comments was addressed, and the interaction of do-notation and if-then-else was tweaked to eliminate unexpected syntax errors.",
      "\n",
      "The ",
      "LANGUAGE",
      " ",
      "pragma",
      " was specified. By 2010 dozens of extensions to the language were in wide use, and GHC (among other compilers) provided the ",
      "LANGUAGE",
      " pragma to specify individual extensions with a list of identifiers. Haskell 2010 compilers are required to support the ",
      "Haskell2010",
      " extension and are encouraged to support several others, which correspond to extensions added in Haskell 2010.",
      "\n",
      "Features",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Haskell features",
      "\n",
      "See also: ",
      "Glasgow Haskell Compiler \u00a7\u00a0Extensions to Haskell",
      "\n",
      "Haskell features ",
      "lazy evaluation",
      ", lambda expressions, ",
      "pattern matching",
      ", ",
      "list comprehension",
      ", ",
      "type classes",
      " and ",
      "type polymorphism",
      ". It is a ",
      "purely functional language",
      ", which means that functions generally have no ",
      "side effects",
      ". A distinct construct exists to represent side effects, ",
      "orthogonal",
      " to the type of functions. A pure function can return a side effect that is subsequently executed, modeling the ",
      "impure functions",
      " of other languages.\n",
      "Haskell has a ",
      "strong",
      ", ",
      "static",
      " type system based on ",
      "Hindley\u2013Milner type inference",
      ". Its principal innovation in this area is type classes, originally conceived as a principled way to add ",
      "overloading",
      " to the language,",
      "[42]",
      " but since finding many more uses.",
      "[43]",
      "\n",
      "The construct that represents side effects is an example of a ",
      "monad",
      ". Monads are a general framework that can model different kinds of computation, including error handling, ",
      "nondeterminism",
      ", ",
      "parsing",
      " and ",
      "software transactional memory",
      ". Monads are defined as ordinary datatypes, but Haskell provides some ",
      "syntactic sugar",
      " for their use.\n",
      "Haskell has an open, published specification,",
      "[29]",
      " and ",
      "multiple implementations exist",
      ". Its main implementation, the ",
      "Glasgow Haskell Compiler",
      " (GHC), is both an ",
      "interpreter",
      " and ",
      "native-code",
      " ",
      "compiler",
      " that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as ",
      "generalized algebraic data types",
      " and type families. ",
      "The Computer Language Benchmarks Game",
      " also highlights its high-performance implementation of ",
      "concurrency",
      " and ",
      "parallelism",
      ".",
      "[44]",
      "\n",
      "An active, growing community exists around the language, and more than 5,400 third-party open-source libraries and tools are available in the online package repository ",
      "Hackage",
      ".",
      "[45]",
      "\n",
      "\n",
      "Code examples",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Haskell features \u00a7\u00a0Examples",
      "\n",
      "A ",
      "\"Hello, World!\" program",
      " in Haskell (only the last line is strictly necessary):\n",
      "\n",
      "module",
      " ",
      "Main",
      " ",
      "(",
      "main",
      ")",
      " ",
      "where",
      "          ",
      "-- not needed in interpreter, is the default in a module file",
      "\n\n",
      "main",
      " ",
      "::",
      " ",
      "IO",
      " ",
      "()",
      "                     ",
      "-- the compiler can infer this type definition",
      "\n",
      "main",
      " ",
      "=",
      " ",
      "putStrLn",
      " ",
      "\"Hello, World!\"",
      "\n",
      "\n",
      "The ",
      "factorial",
      " function in Haskell, defined in a few different ways:\n",
      "\n",
      "-- Type annotation (optional, same for each implementation)",
      "\n",
      "factorial",
      " ",
      "::",
      " ",
      "(",
      "Integral",
      " ",
      "a",
      ")",
      " ",
      "=>",
      " ",
      "a",
      " ",
      "->",
      " ",
      "a",
      "\n\n",
      "-- Using recursion (with the \"ifthenelse\" expression)",
      "\n",
      "factorial",
      " ",
      "n",
      " ",
      "=",
      " ",
      "if",
      " ",
      "n",
      " ",
      "<",
      " ",
      "2",
      "\n              ",
      "then",
      " ",
      "1",
      "\n              ",
      "else",
      " ",
      "n",
      " ",
      "*",
      " ",
      "factorial",
      " ",
      "(",
      "n",
      " ",
      "-",
      " ",
      "1",
      ")",
      "\n\n",
      "-- Using recursion (with pattern matching)",
      "\n",
      "factorial",
      " ",
      "0",
      " ",
      "=",
      " ",
      "1",
      "\n",
      "factorial",
      " ",
      "n",
      " ",
      "=",
      " ",
      "n",
      " ",
      "*",
      " ",
      "factorial",
      " ",
      "(",
      "n",
      " ",
      "-",
      " ",
      "1",
      ")",
      "\n\n",
      "-- Using recursion (with guards)",
      "\n",
      "factorial",
      " ",
      "n",
      "\n   ",
      "|",
      " ",
      "n",
      " ",
      "<",
      " ",
      "2",
      "     ",
      "=",
      " ",
      "1",
      "\n   ",
      "|",
      " ",
      "otherwise",
      " ",
      "=",
      " ",
      "n",
      " ",
      "*",
      " ",
      "factorial",
      " ",
      "(",
      "n",
      " ",
      "-",
      " ",
      "1",
      ")",
      "\n\n",
      "-- Using a list and the \"product\" function",
      "\n",
      "factorial",
      " ",
      "n",
      " ",
      "=",
      " ",
      "product",
      " ",
      "[",
      "1",
      "..",
      "n",
      "]",
      "\n\n",
      "-- Using fold (implements \"product\")",
      "\n",
      "factorial",
      " ",
      "n",
      " ",
      "=",
      " ",
      "foldl",
      " ",
      "(",
      "*",
      ")",
      " ",
      "1",
      " ",
      "[",
      "1",
      "..",
      "n",
      "]",
      "\n\n",
      "-- Point-free style",
      "\n",
      "factorial",
      " ",
      "=",
      " ",
      "foldr",
      " ",
      "(",
      "*",
      ")",
      " ",
      "1",
      " ",
      ".",
      " ",
      "enumFromTo",
      " ",
      "1",
      "\n",
      "\n",
      "As the ",
      "Integer",
      " type has ",
      "arbitrary-precision",
      ", this code will compute values such as ",
      "factorial 100000",
      " (a 456,574-digit number), with no loss of precision.\n",
      "An implementation of an algorithm similar to ",
      "quick sort",
      " over lists, where the first element is taken as the pivot:\n",
      "\n",
      "-- Type annotation (optional, same for each implementation)",
      "\n",
      "quickSort",
      " ",
      "::",
      " ",
      "Ord",
      " ",
      "a",
      " ",
      "=>",
      " ",
      "[",
      "a",
      "]",
      " ",
      "->",
      " ",
      "[",
      "a",
      "]",
      "\n\n",
      "-- Using list comprehensions",
      "\n",
      "quickSort",
      " ",
      "[]",
      "     ",
      "=",
      " ",
      "[]",
      "                               ",
      "-- The empty list is already sorted",
      "\n",
      "quickSort",
      " ",
      "(",
      "x",
      ":",
      "xs",
      ")",
      " ",
      "=",
      " ",
      "quickSort",
      " ",
      "[",
      "a",
      " ",
      "|",
      " ",
      "a",
      " ",
      "<-",
      " ",
      "xs",
      ",",
      " ",
      "a",
      " ",
      "<",
      " ",
      "x",
      "]",
      "   ",
      "-- Sort the left part of the list",
      "\n                   ",
      "++",
      " ",
      "[",
      "x",
      "]",
      " ",
      "++",
      "                        ",
      "-- Insert pivot between two sorted parts",
      "\n                   ",
      "quickSort",
      " ",
      "[",
      "a",
      " ",
      "|",
      " ",
      "a",
      " ",
      "<-",
      " ",
      "xs",
      ",",
      " ",
      "a",
      " ",
      ">=",
      " ",
      "x",
      "]",
      "  ",
      "-- Sort the right part of the list",
      "\n\n",
      "-- Using filter",
      "\n",
      "quickSort",
      " ",
      "[]",
      "     ",
      "=",
      " ",
      "[]",
      "\n",
      "quickSort",
      " ",
      "(",
      "x",
      ":",
      "xs",
      ")",
      " ",
      "=",
      " ",
      "quickSort",
      " ",
      "(",
      "filter",
      " ",
      "(",
      "<",
      "x",
      ")",
      " ",
      "xs",
      ")",
      "\n                   ",
      "++",
      " ",
      "[",
      "x",
      "]",
      " ",
      "++",
      "\n                   ",
      "quickSort",
      " ",
      "(",
      "filter",
      " ",
      "(",
      ">=",
      "x",
      ")",
      " ",
      "xs",
      ")",
      "\n",
      "\n",
      "Implementations",
      "[",
      "edit",
      "]",
      "\n",
      "All listed implementations are distributed under ",
      "open source licenses",
      ".",
      "[46]",
      "\n",
      "Implementations that fully or nearly comply with the Haskell 98 standard, include:\n",
      "\n",
      "The ",
      "Glasgow Haskell Compiler",
      " (GHC) compiles to native code on many different processor architectures, and to ",
      "ANSI C",
      ", via one of two ",
      "intermediate languages",
      ": ",
      "C--",
      ", or in more recent versions, ",
      "LLVM",
      " (formerly Low Level Virtual Machine) bitcode.",
      "[47]",
      "[48]",
      " GHC has become the ",
      "de facto",
      " standard Haskell dialect.",
      "[49]",
      " There are libraries (e.g., bindings to ",
      "OpenGL",
      ") that work only with GHC. GHC is also distributed with the ",
      "Haskell platform",
      ".",
      "\n",
      "Jhc, a Haskell compiler written by John Meacham, emphasizes speed and efficiency of generated programs and exploring new program transformations.\n",
      "Ajhc is a fork of Jhc.",
      "\n",
      "The Utrecht Haskell Compiler (UHC) is a Haskell implementation from ",
      "Utrecht University",
      ".",
      "[50]",
      " It supports almost all Haskell 98 features plus many experimental extensions. It is implemented using ",
      "attribute grammars",
      " and is currently used mostly for research on generated type systems and language extensions.",
      "\n",
      "Implementations no longer actively maintained include:\n",
      "\n",
      "The Haskell User's Gofer System (",
      "Hugs",
      ") is a ",
      "bytecode",
      " interpreter. It was once one of the implementations used most widely, alongside the GHC compiler,",
      "[51]",
      " but has now been mostly replaced by GHCi. It also comes with a graphics library.",
      "\n",
      "HBC is an early implementation supporting Haskell 1.4. It was implemented by ",
      "Lennart Augustsson",
      " in, and based on, ",
      "Lazy ML",
      ". It has not been actively developed for some time.",
      "\n",
      "nhc98 is a bytecode compiler focusing on minimizing memory use.\n",
      "The York Haskell Compiler (",
      "Yhc",
      ") was a fork of nhc98, with the goals of being simpler, more portable and efficient, and integrating support for Hat, the Haskell tracer. It also had a ",
      "JavaScript",
      " backend, allowing users to run Haskell programs in ",
      "web browsers",
      ".",
      "\n",
      "Implementations not fully Haskell 98 compliant, and using a variant Haskell language, include:\n",
      "\n",
      "Eta and Frege are dialects of Haskell targeting the ",
      "Java Virtual Machine",
      ".",
      "\n",
      "Gofer",
      " was an educational dialect of Haskell, with a feature called ",
      "constructor classes",
      ", developed by Mark Jones. It was supplanted by Hugs (Haskell User's Gofer System).",
      "\n",
      "Helium, a newer dialect of Haskell. The focus is on making learning easier via clearer error messages. It currently lacks full support for type classes, rendering it incompatible with many Haskell programs.",
      "\n",
      "Notable applications",
      "[",
      "edit",
      "]",
      "\n",
      "Cabal",
      " is a tool for ",
      "building",
      " and packaging Haskell libraries and programs.",
      "[52]",
      "\n",
      "Darcs",
      " is a ",
      "revision control system",
      " written in Haskell, with several innovative features, such as more precise control of patches to apply.",
      "\n",
      "GHC",
      " is also often a testbed for advanced functional programming features and optimizations in other programming languages.",
      "\n",
      "Git-annex",
      " is a tool to manage (big) data files under ",
      "Git",
      " version control. It also provides a distributed file synchronization system (git-annex assistant).",
      "\n",
      "Linspire",
      " GNU/Linux chose Haskell for system tools development.",
      "[53]",
      "\n",
      "Pandoc",
      " is a tool to convert one markup format into another.",
      "\n",
      "Pugs",
      " is a ",
      "compiler",
      " and ",
      "interpreter",
      " for the ",
      "Raku",
      " ",
      "programming language",
      " (formerly Perl 6).",
      "\n",
      "Xmonad",
      " is a ",
      "window manager",
      " for the ",
      "X Window System",
      ", written fully in Haskell.",
      "[54]",
      "\n",
      "Industry",
      "[",
      "edit",
      "]",
      "\n",
      "Bluespec",
      " SystemVerilog (BSV) is a language for semiconductor design that is an extension of Haskell. Also, Bluespec, Inc.'s tools are implemented in Haskell.",
      "\n",
      "Cryptol",
      ", a language and toolchain for developing and verifying ",
      "cryptography",
      " algorithms, is implemented in Haskell.",
      "\n",
      "Facebook",
      " implements its anti-spam programs",
      "[55]",
      " in Haskell, maintaining the underlying data access library as ",
      "open-source software",
      ".",
      "[56]",
      "\n",
      "GitHub",
      " implemented ",
      "Semantic",
      ", an open-source library for analysis, diffing, and interpretation of untrusted source code, in Haskell.",
      "[57]",
      "\n",
      "seL4",
      ", the first ",
      "formally verified",
      " ",
      "microkernel",
      ",",
      "[58]",
      " used Haskell as a prototyping language for the OS developer.",
      "[58]",
      ":",
      "p.2",
      " At the same time, the Haskell code defined an executable specification with which to reason, for automatic translation by the theorem-proving tool.",
      "[58]",
      ":",
      "p.3",
      " The Haskell code thus served as an intermediate prototype before final ",
      "C",
      " refinement.",
      "[58]",
      ":",
      "p.3",
      "\n",
      "Web",
      "[",
      "edit",
      "]",
      "\n",
      "Notable ",
      "web frameworks",
      " written for Haskell include:",
      "[59]",
      "\n",
      "\n",
      "Snap",
      "\n",
      "Yesod",
      "\n",
      "Criticism",
      "[",
      "edit",
      "]",
      "\n",
      "Jan-Willem Maessen, in 2002, and ",
      "Simon Peyton Jones",
      ", in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it.",
      "[60]",
      "[61]",
      " In addition to purely practical considerations such as improved performance,",
      "[62]",
      " they note that, in addition to adding some performance overhead, lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space use).\n",
      "Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: \"The subtle syntax and sophisticated type system of Haskell are a double edged sword \u2013 highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages.\"",
      "[63]",
      " To address these, researchers from Utrecht University developed an advanced interpreter called ",
      "Helium",
      ", which improved the user-friendliness of error messages by limiting the generality of some Haskell features, and in particular removing support for ",
      "type classes",
      ".\n",
      "Ben Lippmeier designed Disciple",
      "[64]",
      " as a ",
      "strict-by-default",
      " (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays.",
      "[65]",
      " He argues (p.\u00a020) that \"destructive update furnishes the programmer with two important and powerful tools\u00a0... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer.\"\n",
      "Robert Harper",
      ", one of the authors of ",
      "Standard ML",
      ", has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource use with non-strict evaluation, that lazy evaluation complicates the definition of data types and inductive reasoning,",
      "[66]",
      " and the \"inferiority\" of Haskell's (old) class system compared to ML's module system.",
      "[67]",
      "\n",
      "Haskell's build tool, ",
      "Cabal",
      ", has historically been criticised for poorly handling multiple versions of the same library, a problem known as \"Cabal hell\". The Stackage server and ",
      "Stack",
      " build tool were made in response to these criticisms.",
      "[68]",
      " Cabal itself now has a much more sophisticated build system, heavily inspired by ",
      "Nix",
      ",",
      "[69]",
      " which became the default with version 3.0.\n",
      "\n",
      "Related languages",
      "[",
      "edit",
      "]",
      "\n",
      "Clean",
      " is a close, slightly older relative of Haskell. Its biggest deviation from Haskell is in the use of ",
      "uniqueness types",
      " instead of monads for I/O and side-effects.\n",
      "A series of languages inspired by Haskell, but with different type systems, have been developed, including:\n",
      "\n",
      "Agda",
      ", a functional language with ",
      "dependent types",
      ".",
      "\n",
      "Cayenne",
      ", with ",
      "dependent types",
      ".",
      "\n",
      "Elm",
      ", a functional language to create web front-end apps, no support for higher-kinded types.",
      "\n",
      "Epigram",
      ", a functional language with dependent types suitable for proving properties of programs.",
      "\n",
      "Idris",
      ", a general purpose functional language with ",
      "dependent types",
      ", developed at the ",
      "University of St Andrews",
      ".",
      "\n",
      "PureScript",
      " compiles to JavaScript.",
      "\n",
      "\u03a9mega",
      ", strict and more.",
      "\n",
      "Other related languages include:\n",
      "\n",
      "Curry",
      ", a functional/logic programming language based on Haskell.",
      "\n",
      "Notable Haskell variants include:\n",
      "\n",
      "Generic Haskell",
      ", a version of Haskell with type system support for ",
      "generic programming",
      ".",
      "\n",
      "Hume",
      ", a strict functional language for ",
      "embedded systems",
      " based on processes as stateless automata over a sort of tuples of one element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax.",
      "\n",
      "Conferences and workshops",
      "[",
      "edit",
      "]",
      "\n",
      "The Haskell community meets regularly for research and development activities. The main events are:\n",
      "\n",
      "International Conference on Functional Programming",
      " (ICFP)",
      "\n",
      "Haskell Symposium",
      " (formerly the Haskell Workshop)",
      "\n",
      "Haskell Implementors Workshop",
      "\n",
      "Commercial Users of Functional Programming",
      " (CUFP)",
      "\n",
      "Since 2006, a series of organized ",
      "hackathons",
      " has occurred, the Hac series, aimed at improving the programming language tools and libraries.",
      "[70]",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Hudak et al. 2007",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Marlow, Simon (24 November 2009). ",
      "\"Announcing Haskell 2010\"",
      ". ",
      "Haskell",
      " (Mailing list)",
      ". Retrieved ",
      "12 March",
      " 2011",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Riedel, Herbert (28 April 2016). ",
      "\"ANN: Haskell Prime 2020 committee has formed\"",
      ". ",
      "Haskell-prime",
      " (Mailing list)",
      ". Retrieved ",
      "6 May",
      " 2017",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "g",
      " ",
      "h",
      " ",
      "i",
      " ",
      "j",
      " ",
      "k",
      " ",
      "l",
      " ",
      "m",
      " ",
      "Peyton Jones 2003",
      ", p.\u00a0xi",
      "\n",
      "\n",
      "^",
      " ",
      "Norell, Ulf (2008). ",
      "\"Dependently Typed Programming in Agda\"",
      " ",
      "(PDF)",
      ". Gothenburg: Chalmers University",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hudak et al. 2007",
      ", pp.\u00a012\u201338, 43.",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne",
      "; Sutton, Andrew (2011). ",
      "\"Design of Concept Libraries for C++\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 10 February 2012.",
      " ",
      "Cite journal requires ",
      "|journal=",
      " (",
      "help",
      ")",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "g",
      " ",
      "h",
      " ",
      "i",
      " ",
      "j",
      " ",
      "Hudak et al. 2007",
      ", pp.\u00a012-45\u201346.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Meijer, Erik",
      " (2006). \"Confessions of a Used Programming Language Salesman: Getting the Masses Hooked on Haskell\". ",
      "Oopsla 2007",
      ". ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.72.868",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Meijer, Erik (1 October 2009). ",
      "\"C9 Lectures: Dr. Erik Meijer\u00a0\u2013 Functional Programming Fundamentals, Chapter 1 of 13\"",
      ". ",
      "Channel 9",
      ". Microsoft",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Drobi, Sadek (4 March 2009). ",
      "\"Erik Meijer on LINQ\"",
      ". ",
      "InfoQ",
      ". QCon ",
      "SF",
      " 2008: C4Media Inc",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "CS1 maint: location (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "Hickey, Rich. ",
      "\"Clojure Bookshelf\"",
      ". ",
      "Listmania!",
      ". Archived from ",
      "the original",
      " on 3 October 2017",
      ". Retrieved ",
      "3 October",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Heller, Martin (18 October 2011). ",
      "\"Turn up your nose at Dart and smell the CoffeeScript\"",
      ". ",
      "InfoWorld",
      ". Retrieved ",
      "2020-07-15",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Declarative programming in Escher\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "7 October",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Syme, Don",
      "; Granicz, Adam; Cisternino, Antonio (2007). ",
      "Expert F#",
      ". ",
      "Apress",
      ". p.\u00a02. ",
      "F# also draws from Haskell particularly with regard to two advanced language features called ",
      "sequence expressions",
      " and ",
      "workflows",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Wechsung, Ingo. ",
      "\"The Frege Programming Language\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "26 February",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Facebook Introduces 'Hack,' the Programming Language of the Future\"",
      ". ",
      "WIRED",
      ". 20 March 2014.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Idris, a dependently typed language\"",
      ". Retrieved ",
      "26 October",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"LiveScript Inspiration\"",
      ". Retrieved ",
      "4 February",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Freeman, Phil (2016). ",
      "\"PureScript by Example\"",
      ". Leanpub",
      ". Retrieved ",
      "23 April",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kuchling, A. M. ",
      "\"Functional Programming HOWTO\"",
      ". ",
      "Python v2.7.2 documentation",
      ". Python Software Foundation",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Glossary of Terms and Jargon\"",
      ". ",
      "Perl Foundation Perl 6 Wiki",
      ". ",
      "The Perl Foundation",
      ". Archived from ",
      "the original",
      " on 21 January 2012",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Rust Reference: Appendix: Influences\"",
      ". Retrieved ",
      "3 February",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fogus, Michael (6 August 2010). ",
      "\"MartinOdersky take(5) toList\"",
      ". ",
      "Send More Paramedics",
      ". Retrieved ",
      "9 February",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lattner, Chris (3 June 2014). ",
      "\"Chris Lattner's Homepage\"",
      ". Chris Lattner",
      ". Retrieved ",
      "3 June",
      " 2014",
      ". ",
      "The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Timber/History\"",
      ". Retrieved ",
      "7 October",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Chevalier, Tim (28 January 2008). ",
      "\"anybody can tell me the pronunciation of \"haskell\"?\"",
      ". ",
      "Haskell-cafe",
      " (Mailing list)",
      ". Retrieved ",
      "12 March",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Type inference originally using ",
      "Hindley-Milner type inference",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Peyton Jones 2003",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Edward Kmett, ",
      "Edward Kmett \u2013 Type Classes vs. the World",
      "\n",
      "\n",
      "^",
      " ",
      "\"Haskell in education\"",
      ". Retrieved ",
      "15 February",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Haskell in research\"",
      ". Retrieved ",
      "15 February",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Mossberg, Erik (8 June 2020), ",
      "erkmos/haskell-companies",
      ", retrieved ",
      "22 June",
      " 2020",
      "\n",
      "\n",
      "^",
      " ",
      "\"Haskell in industry - HaskellWiki\"",
      ". ",
      "wiki.haskell.org",
      ". Retrieved ",
      "22 June",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PYPL PopularitY of Programming Language index\"",
      ". ",
      "pypl.github.io",
      ". 6 September 2019. Archived from ",
      "the original",
      " on 4 September 2019",
      ". Retrieved ",
      "6 September",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Frederickson, Ben. ",
      "\"Ranking Programming Languages by GitHub Users\"",
      ". ",
      "www.benfrederickson.com",
      ". Retrieved ",
      "6 September",
      " 2019",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Peyton Jones 2003",
      ", Preface.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Type classes, first proposed during the design of the Haskell programming language, ...\"\u00a0\u2014",
      "John Garrett Morris (2013), \"Type Classes and Instance Chains: A Relational Approach\"",
      "\n",
      "\n",
      "^",
      " ",
      "Wadler, Philip (October 1988). ",
      "\"How to make ad-hoc polymorphism less ad hoc\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Haskell Wiki: Implementations\"",
      ". Retrieved ",
      "18 December",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Welcome to Haskell",
      "'",
      "\"",
      ". ",
      "The Haskell' Wiki",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Wadler, P.; Blott, S. (1989). \"How to make ad-hoc polymorphism less ad hoc\". ",
      "Proceedings of the 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages",
      ". ",
      "ACM",
      ": 60\u201376. ",
      "doi",
      ":",
      "10.1145/75277.75283",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-89791-294-5",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hallgren, T. (January 2001). ",
      "\"Fun with Functional Dependencies, or Types as Values in Static Computations in Haskell\"",
      ". ",
      "Proceedings of the Joint CS/CE Winter Meeting",
      ". Varberg, Sweden.",
      "\n",
      "\n",
      "^",
      " ",
      "Computer Language Benchmarks Game",
      "\n",
      "\n",
      "^",
      " ",
      "\"HackageDB statistics\"",
      ". Hackage.haskell.org. Archived from ",
      "the original",
      " on 3 May 2013",
      ". Retrieved ",
      "26 June",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Implementations\"",
      " at the Haskell Wiki",
      "\n",
      "\n",
      "^",
      " ",
      "\"The LLVM Backend\"",
      ". ",
      "GHC Trac",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Terei, David A.; Chakravarty, Manuel M. T. (2010). ",
      "\"An LLVM Backend for GHC\"",
      ". ",
      "Proceedings of ACM SIGPLAN Haskell Symposium 2010",
      ". ACM Press.",
      "\n",
      "\n",
      "^",
      " ",
      "C. Ryder and S. Thompson (2005). ",
      "\"Porting HaRe to the GHC API\"",
      "\n",
      "\n",
      "^",
      " ",
      "Utrecht Haskell Compiler",
      "\n",
      "\n",
      "^",
      " ",
      "Hudak et al. 2007",
      ", pp.\u00a012\u201322.",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Haskell Cabal\"",
      ". Retrieved ",
      "8 April",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Linspire/Freespire Core OS Team and Haskell\"",
      ". ",
      "Debian Haskell mailing list",
      ". May 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "xmonad.org",
      "\n",
      "\n",
      "^",
      " ",
      "\"Fighting spam with Haskell\"",
      ". ",
      "Facebook Code",
      ". 26 June 2015",
      ". Retrieved ",
      "11 August",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Open-sourcing Haxl, a library for Haskell\"",
      ". ",
      "Facebook Code",
      ". 10 June 2014",
      ". Retrieved ",
      "11 August",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Parsing, analyzing, and comparing source code across many languages: github/semantic",
      ", GitHub, 7 June 2019",
      ", retrieved ",
      "7 June",
      " 2019",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "\nA formal proof of functional correctness was completed in 2009.\n",
      "Klein, Gerwin; Elphinstone, Kevin; ",
      "Heiser, Gernot",
      "; Andronick, June; Cock, David; Derrin, Philip; Elkaduwe, Dhammika; Engelhardt, Kai; Kolanski, Rafal; Norrish, Michael; Sewell, Thomas; Tuch, Harvey; Winwood, Simon (October 2009). ",
      "\"seL4: Formal verification of an OS kernel\"",
      " ",
      "(PDF)",
      ". ",
      "22nd ACM Symposium on Operating System Principles",
      ". Big Sky, MT, USA.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Web/Frameworks \u2013 HaskellWiki\"",
      ". ",
      "wiki.haskell.org",
      ". Retrieved ",
      "11 August",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Jan-Willem Maessen. ",
      "Eager Haskell: Resource-bounded execution yields efficient iteration",
      ". Proceedings of the 2002 ",
      "Association for Computing Machinery",
      " (ACM) SIGPLAN workshop on Haskell.",
      "\n",
      "\n",
      "^",
      " ",
      "Simon Peyton Jones. ",
      "Wearing the hair shirt: a retrospective on Haskell",
      ". Invited talk at ",
      "POPL",
      " 2003.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Heeren, Bastiaan; Leijen, Daan; van IJzendoorn, Arjan (2003). ",
      "\"Helium, for learning Haskell\"",
      " ",
      "(PDF)",
      ". ",
      "Proceedings of the 2003 ACM SIGPLAN Workshop on Haskell",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"DDC \u2013 HaskellWiki\"",
      ". Haskell.org. 3 December 2010",
      ". Retrieved ",
      "26 June",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ben Lippmeier, ",
      "Type Inference and Optimisation for an Impure World",
      ", ",
      "Australian National University",
      " (2010) PhD thesis, chapter 1",
      "\n",
      "\n",
      "^",
      " ",
      "Robert Harper. ",
      "\"The point of laziness\"",
      ".",
      " ",
      "\n",
      "\n",
      "^",
      " ",
      "Robert Harper. ",
      "\"Modules matter most\"",
      ".",
      " ",
      "\n",
      "\n",
      "^",
      " ",
      "\"Solving Cabal Hell\"",
      ". ",
      "www.yesodweb.com",
      ". Retrieved ",
      "11 August",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Announcing cabal new-build: Nix-style local builds\"",
      ". Retrieved ",
      "1 October",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Hackathon \u2013 HaskellWiki\"",
      ".",
      "\n",
      "\n",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      "Reports",
      "\n",
      "Peyton Jones, Simon",
      ", ed. (2003). ",
      "Haskell 98 Language and Libraries: The Revised Report",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "978-0521826143",
      ".",
      "CS1 maint: ref=harv (",
      "link",
      ")",
      "\n",
      "Marlow, Simon",
      ", ed. (2010). ",
      "Haskell 2010 Language Report",
      " ",
      "(PDF)",
      ". Haskell.org.",
      "CS1 maint: ref=harv (",
      "link",
      ")",
      "\n",
      "Textbooks",
      "\n",
      "Davie, Antony (1992). ",
      "An Introduction to Functional Programming Systems Using Haskell",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "978-0-521-25830-2",
      ".",
      "\n",
      "Bird, Richard",
      " (1998). ",
      "Introduction to Functional Programming using Haskell",
      " (2nd ed.). Prentice Hall Press. ",
      "ISBN",
      "\u00a0",
      "978-0-13-484346-9",
      ".",
      "\n",
      "Hudak, Paul",
      " (2000). ",
      "The Haskell School of Expression: Learning Functional Programming through Multimedia",
      ". New York: Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "978-0521643382",
      ".",
      "\n",
      "Hutton, Graham",
      " (2007). ",
      "Programming in Haskell",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "978-0521692694",
      ".",
      "\n",
      "O'Sullivan, Bryan",
      "; ",
      "Stewart, Don",
      "; ",
      "Goerzen, John",
      " (2008). ",
      "Real World Haskell",
      ". Sebastopol: O'Reilly. ",
      "ISBN",
      "\u00a0",
      "978-0-596-51498-3",
      "\u00a0(",
      "full text",
      ")",
      "\n",
      "Thompson, Simon (2011). ",
      "Haskell: The Craft of Functional Programming",
      " (3rd ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0201882957",
      ".",
      "\n",
      "Lipova\u010da, Miran (April 2011). ",
      "Learn You a Haskell for Great Good!",
      ". San Francisco: No Starch Press. ",
      "ISBN",
      "\u00a0",
      "978-1-59327-283-8",
      ".",
      " (",
      "full text",
      ")",
      "\n",
      "Bird, Richard",
      " (2014). ",
      "Thinking Functionally with Haskell",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "978-1-107-45264-0",
      ".",
      "\n",
      "Tutorials",
      "\n",
      "Hudak, Paul; Peterson, John; Fasel, Joseph (June 2000). ",
      "\"A Gentle Introduction To Haskell, Version 98\"",
      ". ",
      "Haskell.org",
      ".",
      "\n",
      "Yet Another Haskell Tutorial",
      ", by Hal Daum\u00e9 III; assumes far less prior knowledge than official tutorial",
      "\n",
      "Yorgey, Brent (12 March 2009). ",
      "\"The Typeclassopedia\"",
      " ",
      "(PDF)",
      ". ",
      "The Monad.Reader",
      " (13): 17\u201368.",
      "\n",
      "Maguire, Sandy (2018). ",
      "Thinking with Types: Type-Level Programming in Haskell",
      ".",
      "\n",
      "History",
      "\n",
      "Hudak, Paul",
      "; ",
      "Hughes, John",
      "; ",
      "Peyton Jones, Simon",
      "; ",
      "Wadler, Philip",
      " (2007). ",
      "\"A History of Haskell: Being Lazy with Class\"",
      " ",
      "(PDF)",
      ". ",
      "Proceedings of the Third ACM SIGPLAN Conference on History of Programming Languages (HOPL III)",
      ": 12\u20131\u201355. ",
      "doi",
      ":",
      "10.1145/1238844.1238856",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-59593-766-7",
      ".",
      "CS1 maint: ref=harv (",
      "link",
      ")",
      "\n",
      "Hamilton, Naomi (19 September 2008). ",
      "\"The A-Z of Programming Languages: Haskell\"",
      ". ",
      "Computerworld",
      ".",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikibooks has a book on the topic of: ",
      "Haskell",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikibooks has a book on the topic of: ",
      "Write Yourself a Scheme in 48 Hours",
      "\n",
      "\n",
      "Official website",
      " ",
      "\n",
      "Official wiki",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNE",
      ": ",
      "XX541061",
      "\n",
      "BNF",
      ": ",
      "cb12362303j",
      " ",
      "(data)",
      "\n",
      "GND",
      ": ",
      "4318275-6",
      "\n",
      "LCCN",
      ": ",
      "sh93003496",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Haskell_(programming_language)&oldid=980969091",
      "\""
    ],
    "lastUpdated": " 29 September 2020, at 14:42"
  },
  {
    "url": "https://en.wikipedia.org/wiki/CLU_(programming_language)",
    "title": "CLU (programming language)",
    "text": [
      "This article ",
      "needs additional citations for ",
      "verification",
      ".",
      " Please help ",
      "improve this article",
      " by ",
      "adding citations to reliable sources",
      ". Unsourced material may be challenged and removed.",
      "Find sources:",
      "\u00a0",
      "\"CLU\"\u00a0programming language",
      "\u00a0\u2013\u00a0",
      "news",
      "\u00a0",
      "\u00b7",
      " ",
      "newspapers",
      "\u00a0",
      "\u00b7",
      " ",
      "books",
      "\u00a0",
      "\u00b7",
      " ",
      "scholar",
      "\u00a0",
      "\u00b7",
      " ",
      "JSTOR",
      "  ",
      "(",
      "February 2013",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "CLU",
      "Paradigm",
      "multi-paradigm",
      ": ",
      "object-oriented",
      ", ",
      "procedural",
      "Designed\u00a0by",
      "Barbara Liskov",
      " and her students",
      "Developer",
      "Massachusetts Institute of Technology",
      "First\u00a0appeared",
      "1975",
      "; 45\u00a0years ago",
      "\u00a0(",
      "1975",
      ")",
      "Stable release",
      "Native CLU 1.5 (",
      "SPARC",
      ", ",
      "VAX",
      ") / May\u00a026, 1989",
      "; 31\u00a0years ago",
      "\u00a0(",
      "1989-05-26",
      ")",
      "[1]",
      "\n",
      "Portable CLU / November\u00a06, 2009",
      "; 10\u00a0years ago",
      "\u00a0(",
      "2009-11-06",
      ")",
      "[2]",
      "\n",
      "\n   ",
      "\n",
      "Typing discipline",
      "strong",
      "Website",
      "www",
      ".pmg",
      ".lcs",
      ".mit",
      ".edu",
      "/CLU",
      ".html",
      "Major ",
      "implementations",
      "Native CLU,",
      "[1]",
      " Portable CLU,",
      "[2]",
      " clu2c",
      "[3]",
      "Influenced by",
      "ALGOL 60",
      ", ",
      "Lisp",
      ", ",
      "Simula",
      ", ",
      "Alphard",
      "Influenced",
      "Ada",
      ", ",
      "Argus",
      ", ",
      "C++",
      ", ",
      "Lua",
      ", ",
      "Python",
      ",",
      "[4]",
      " ",
      "Ruby",
      ", ",
      "Sather",
      ", ",
      "Swift",
      "[5]",
      "\n",
      "CLU",
      " is a  ",
      "programming language",
      " created at the ",
      "Massachusetts Institute of Technology",
      " (MIT) by ",
      "Barbara Liskov",
      " and her students between 1974 and 1975. While it did not find extensive use, it introduced many features that are used widely now, and is seen as a step in the development of ",
      "object-oriented programming",
      " (OOP).\n",
      "Key contributions include ",
      "abstract data types",
      ",",
      "[6]",
      " ",
      "call-by-sharing",
      ", ",
      "iterators",
      ", multiple return values (a form of ",
      "parallel assignment",
      "), type-safe ",
      "parameterized types",
      ", and type-safe ",
      "variant types",
      ". It is also notable for its use of ",
      "classes",
      " with ",
      "constructors",
      " and methods, but without ",
      "inheritance",
      ".\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Clusters",
      "\n",
      "2",
      " ",
      "Other features",
      "\n",
      "3",
      " ",
      "Influence",
      "\n",
      "4",
      " ",
      "References",
      "\n",
      "5",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Clusters",
      "[",
      "edit",
      "]",
      "\n",
      "The ",
      "syntax",
      " of CLU was based on ",
      "ALGOL",
      ", then the starting point for most new language designs. The key addition was the concept of a ",
      "cluster",
      ", CLU's type extension system and the root of the language's name (CLUster).",
      "[7]",
      " Clusters correspond generally to the concept of a \"class\" in an OO language. For instance, here is the CLU syntax for a cluster that implements ",
      "complex numbers",
      ":\n",
      "\n",
      "    complex_number = cluster is add, subtract, multiply, ...\n        rep = record [ real_part: real, imag_part: real ]\n        add = proc ... end add;\n        subtract = proc ... end subtract;\n        multiply = proc ... end multiply;\n        ...\n    end complex_number;\n",
      "\n",
      "A cluster is a module that encapsulates all of its components except for those explicitly named in the \"is\" clause. These correspond to the public components of a class in recent OO languages. A cluster also defines a type that can be named outside the cluster (in this case, \"complex_number\"), but its representation type (rep) is hidden from external clients.\n",
      "Cluster names are global, and no namespace mechanism was provided to group clusters or allow them to be created \"locally\" inside other clusters.\n",
      "CLU does not perform ",
      "implicit type conversions",
      ". In a cluster, the explicit type conversions ",
      "up",
      " and ",
      "down",
      " change between the abstract type and the representation. There is a universal type ",
      "any",
      ", and a procedure force[] to check that an object is a certain type. Objects may be mutable or immutable, the latter being ",
      "base types",
      " such as integers, booleans, characters and strings.",
      "[7]",
      "\n",
      "\n",
      "Other features",
      "[",
      "edit",
      "]",
      "\n",
      "Another key feature of the CLU type system are ",
      "iterators",
      ", which return objects from a collection serially, one after another.",
      "[7]",
      " Iterators offer an identical ",
      "application programming interface",
      " (API) no matter what data they are being used with. Thus the iterator for a collection of ",
      "complex_number",
      "s can be used interchangeably with that for an array of ",
      "integer",
      "s. A distinctive feature of CLU iterators is that they are implemented as coroutines, with each value being provided to the caller via a ",
      "yield",
      " statement. Iterators like those in CLU are now a common feature of many modern languages, such as C#, Ruby, and Python, though recently they are often referred to as generators.\n",
      "CLU also includes ",
      "exception handling",
      ", based on various attempts in other languages; exceptions are raised using ",
      "signal",
      " and handled with ",
      "except",
      ". Unlike most other languages with exception handling, exceptions are not implicitly resignaled up the calling chain. Also unlike most other languages that provide exception handling, exceptions in CLU are considered part of ordinary execution flow and are considered a \"normal\" and efficient typesafe way to break out of loops or return from functions; this allows for direct assignment of return values \"except when\" other conditions apply. Exceptions that are neither caught nor resignaled explicitly are immediately converted into a special failure exception that typically terminates the program.\n",
      "CLU is often credited as being the first language with type-safe ",
      "variant types",
      ", called ",
      "oneofs",
      ", before the language ",
      "ML",
      " had them.\n",
      "A final distinctive feature in CLU is ",
      "parallel assignment",
      " (multiple assignment), where more than one variable can appear on the left hand side of an ",
      "assignment",
      " operator. For instance, writing ",
      "x,y\u00a0:= y,x",
      " would exchange values of ",
      "x",
      " and ",
      "y",
      ". In the same way, functions could return several values, like ",
      "x,y,z\u00a0:= f(t)",
      ". Parallel assignment (though not multiple return values) predates CLU, appearing in ",
      "CPL",
      " (1963), named ",
      "simultaneous assignment",
      ",",
      "[8]",
      " but CLU popularized it and is often credited as the direct influence leading to parallel assignment in later languages.\n",
      "All objects in a CLU program live in the heap, and memory management is automatic.\n",
      "CLU supports ",
      "type parameterized",
      " user-defined data abstractions. It was the first language to offer type-safe bounded parameterized types, using structure ",
      "where clauses",
      " to express constraints on actual type arguments.\n",
      "\n",
      "Influence",
      "[",
      "edit",
      "]",
      "\n",
      "CLU and ",
      "Ada",
      " were major inspirations for ",
      "C++",
      " ",
      "templates",
      ".",
      "[",
      "citation needed",
      "]",
      "\n",
      "CLU's exception handling mechanisms influenced later languages like C++ and ",
      "Java",
      ".",
      "[",
      "citation needed",
      "]",
      "\n",
      "Sather",
      ", ",
      "Python",
      ", and ",
      "C#",
      " include ",
      "iterators",
      ", which first appeared in CLU.",
      "[",
      "citation needed",
      "]",
      "\n",
      "Perl",
      " and ",
      "Lua",
      " took multiple assignment and multiple returns from function calls from CLU.",
      "[9]",
      "\n",
      "Python",
      " and ",
      "Ruby",
      " borrowed ",
      "call by sharing",
      ", the ",
      "yield",
      " statement,",
      "[10]",
      " and multiple assignment.",
      "[11]",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Curtis, Dorothy (2009-11-06). ",
      "\"CLU home page\"",
      ". ",
      "Programming Methodology Group, Computer Science and Artificial Intelligence Laboratory",
      ". Massachusetts Institute of Technology",
      ". Retrieved ",
      "2016-05-26",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Curtis, Dorothy (2009-11-06). ",
      "\"Index of /pub/pclu\"",
      ". ",
      "Programming Methodology Group, Computer Science and Artificial Intelligence Laboratory",
      ". Massachusetts Institute of Technology",
      ". Retrieved ",
      "2016-05-26",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ushijima, Tetsu. ",
      "\"clu2c\"",
      ". ",
      "clu2c",
      ". woodsheep.jp",
      ". Retrieved ",
      "2016-05-26",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lundh, Fredrik. ",
      "\"Call By Object\"",
      ". ",
      "effbot.org",
      ". Retrieved ",
      "21 November",
      " 2017",
      ". ",
      "replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model.",
      "\n",
      "\n",
      "^",
      " ",
      "Lattner, Chris (2014-06-03). ",
      "\"Chris Lattner's Homepage\"",
      ". Chris Lattner",
      ". Retrieved ",
      "2014-06-03",
      ". ",
      "The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.",
      "\n",
      "\n",
      "^",
      " ",
      "Liskov, Barbara",
      "; Zilles, Stephen (1974). \"Programming with abstract data types\". ",
      "Proceedings of the ACM SIGPLAN symposium on Very high level languages",
      ". pp.\u00a050\u201359. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.136.3043",
      ". ",
      "doi",
      ":",
      "10.1145/800233.807045",
      ".",
      "CS1 maint: ref=harv (",
      "link",
      ")",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Liskov, B.",
      "; Snyder, A.; Atkinson, R.; Schaffert, C. (August 1977). \"Abstraction mechanisms in CLU\". ",
      "Communications of the ACM",
      ". ",
      "20",
      " (8): 564\u2013576. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.112.656",
      ". ",
      "doi",
      ":",
      "10.1145/359763.359789",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Barron, D. W.; Buxton, J. N.; Hartley, D. F.; Nixon, E.; Strachey, C. (1963). ",
      "\"The main features of CPL\"",
      ". ",
      "Computer Journal",
      ". ",
      "6",
      " (2): 134\u2013143. ",
      "doi",
      ":",
      "10.1093/comjnl/6.2.134",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ierusalimschy, R.; De Figueiredo, L. H.; Celes, W. (2007). \"The evolution of Lua\". ",
      "Proceedings of the third ACM SIGPLAN conference on History of programming languages \u2013 HOPL III",
      " ",
      "(PDF)",
      ". pp.\u00a02-1\u20132-26. ",
      "doi",
      ":",
      "10.1145/1238844.1238846",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-59593-766-7",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ruby's Roots and Matz's Leadership\"",
      ". ",
      "Appfolio Engineering",
      ". 2019-11-08",
      ". Retrieved ",
      "2019-11-15",
      ". ",
      "Matz feels that blocks are the greatest invention of Ruby (I agree.) He got the idea from a 1970s language called CLU from MIT, which called them 'iterators'...",
      "\n",
      "\n",
      "^",
      " ",
      "\"Functional Programming HOWTO \u2014 Python 3.8.3 documentation\"",
      ". ",
      "docs.python.org",
      ". Retrieved ",
      "2020-05-25",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      "\n",
      "A History of CLU",
      " (pdf)",
      "\n",
      "clu2c",
      ": a program to compile CLU code to ",
      "C",
      "\n",
      "Dictionary of Programming Languages",
      "\n",
      "CLU",
      " comparison at '99 bottles of beer' multi-language demo algorithm site",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=CLU_(programming_language)&oldid=982782167",
      "\""
    ],
    "lastUpdated": " 10 October 2020, at 09:29"
  },
  {
    "url": "https://en.wikipedia.org/wiki/APL_(programming_language)",
    "title": "APL (programming language)",
    "text": [
      "Not to be confused with ",
      "Address programming language",
      ".",
      "\n",
      "Functional, symbolic programming language for operating on multidimensional arrays",
      "\n",
      "APL",
      "Paradigm",
      "Array",
      ", ",
      "functional",
      ", ",
      "structured",
      ", ",
      "modular",
      "Designed\u00a0by",
      "Kenneth E. Iverson",
      "Developer",
      "Larry Breed",
      ", ",
      "Dick Lathwell",
      ", ",
      "Roger Moore",
      " and others",
      "First\u00a0appeared",
      "November\u00a027, 1966",
      "; 53\u00a0years ago",
      "\u00a0(",
      "1966-11-27",
      ")",
      "[1]",
      "Stable release",
      "ISO/IEC 13751:2001\n   / February\u00a01, 2001",
      "; 19\u00a0years ago",
      "\u00a0(",
      "2001-02-01",
      ")",
      "\n",
      "Typing discipline",
      "Dynamic",
      "Platform",
      "Cross platform",
      "License",
      "Proprietary",
      ", ",
      "open source",
      "Major ",
      "implementations",
      "\n",
      "APL\\360",
      "\n",
      "APL\\1130",
      "\n",
      "APL*Plus",
      "\n",
      "Sharp APL",
      "\n",
      "APL2",
      "\n",
      "Dyalog APL",
      "\n",
      "NARS2000",
      "\n",
      "APLX",
      "\n",
      "GNU APL",
      "\n",
      "Influenced by",
      "Mathematical notation",
      "Influenced",
      "\n",
      "A and A+",
      "\n",
      "C++",
      "[2]",
      "\n",
      "FP",
      "\n",
      "J",
      "\n",
      "K",
      "\n",
      "LYaPAS",
      "[",
      "citation needed",
      "]",
      "\n",
      "MATLAB",
      "\n",
      "Nial",
      "\n",
      "PPL",
      "\n",
      "Python",
      "\n",
      "S",
      "\n",
      "Speakeasy",
      "\n",
      "Wolfram Language",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "This article contains ",
      "APL",
      " ",
      "source code",
      ".",
      " Without proper ",
      "rendering support",
      ", you may see ",
      "question marks, boxes, or other symbols",
      " instead of ",
      "APL symbols",
      ".",
      "\n",
      "\n",
      "APL",
      " (named after the book ",
      "A Programming Language",
      ")",
      "[3]",
      " is a ",
      "programming language",
      " developed in the 1960s by ",
      "Kenneth E. Iverson",
      ". Its central datatype is the ",
      "multidimensional array",
      ". It uses a large range of ",
      "special graphic symbols",
      "[4]",
      " to represent most functions and operators, leading to very concise code. It has been an important influence on the development of concept modeling, ",
      "spreadsheets",
      ", ",
      "functional programming",
      ",",
      "[5]",
      " and computer math packages.",
      "[6]",
      " It has also inspired several other programming languages.",
      "[7]",
      "[8]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "History",
      "\n",
      "\n",
      "1.1",
      " ",
      "Mathematical notation",
      "\n",
      "1.2",
      " ",
      "Development into a computer programming language",
      "\n",
      "1.3",
      " ",
      "Hardware",
      "\n",
      "1.4",
      " ",
      "Commercial availability",
      "\n",
      "1.5",
      " ",
      "Microcomputers",
      "\n",
      "1.6",
      " ",
      "APL2",
      "\n",
      "1.7",
      " ",
      "Modern implementations",
      "\n",
      "1.8",
      " ",
      "Derivative languages",
      "\n",
      "\n",
      "\n",
      "2",
      " ",
      "Language characteristics",
      "\n",
      "\n",
      "2.1",
      " ",
      "Character set",
      "\n",
      "2.2",
      " ",
      "Design",
      "\n",
      "2.3",
      " ",
      "Terminology",
      "\n",
      "2.4",
      " ",
      "Syntax",
      "\n",
      "2.5",
      " ",
      "Examples",
      "\n",
      "\n",
      "2.5.1",
      " ",
      "Hello, World",
      "\n",
      "2.5.2",
      " ",
      "Exponentiation",
      "\n",
      "2.5.3",
      " ",
      "Simple statistics",
      "\n",
      "2.5.4",
      " ",
      "Pick 6",
      " lottery numbers",
      "\n",
      "2.5.5",
      " ",
      "Prime numbers",
      "\n",
      "2.5.6",
      " ",
      "Sorting",
      "\n",
      "2.5.7",
      " ",
      "Game of Life",
      "\n",
      "2.5.8",
      " ",
      "HTML tags removal",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Use",
      "\n",
      "4",
      " ",
      "Notable implementations",
      "\n",
      "\n",
      "4.1",
      " ",
      "APL\\360",
      "\n",
      "4.2",
      " ",
      "APL\\1130",
      "\n",
      "4.3",
      " ",
      "APL*Plus and Sharp APL",
      "\n",
      "4.4",
      " ",
      "APL2",
      "\n",
      "4.5",
      " ",
      "Dyalog APL",
      "\n",
      "4.6",
      " ",
      "NARS2000",
      "\n",
      "4.7",
      " ",
      "APLX",
      "\n",
      "4.8",
      " ",
      "GNU APL",
      "\n",
      "\n",
      "\n",
      "5",
      " ",
      "Interpretation and compilation of APL",
      "\n",
      "\n",
      "5.1",
      " ",
      "Idiom recognition",
      "\n",
      "5.2",
      " ",
      "Optimised bytecode",
      "\n",
      "5.3",
      " ",
      "Compilation",
      "\n",
      "\n",
      "\n",
      "6",
      " ",
      "Standards",
      "\n",
      "7",
      " ",
      "References",
      "\n",
      "8",
      " ",
      "Further reading",
      "\n",
      "\n",
      "8.1",
      " ",
      "Video",
      "\n",
      "\n",
      "\n",
      "9",
      " ",
      "External links",
      "\n",
      "\n",
      "9.1",
      " ",
      "Online resources",
      "\n",
      "9.2",
      " ",
      "Providers",
      "\n",
      "9.3",
      " ",
      "User groups and societies",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Mathematical notation",
      "[",
      "edit",
      "]",
      "\n",
      "A ",
      "mathematical notation",
      " for manipulating arrays was developed by ",
      "Kenneth E. Iverson",
      ", starting in 1957 at ",
      "Harvard University",
      ". In 1960, he began work for ",
      "IBM",
      " where he developed this notation with ",
      "Adin Falkoff",
      " and published it in his book ",
      "A Programming Language",
      " in 1962.",
      "[3]",
      " The preface states its premise:\n",
      "\n",
      ".mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}",
      "Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or ",
      "programs",
      ". Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a ",
      "programming language",
      ".\n",
      "\n",
      "This notation was used inside IBM for short research reports on computer systems, such as the ",
      "Burroughs B5000",
      " and its stack mechanism when ",
      "stack machines",
      " versus ",
      "register machines",
      " were being evaluated by IBM for upcoming computers.\n",
      "Iverson also used his notation in a draft of the chapter ",
      "A Programming Language",
      ", written for a book he was writing with ",
      "Fred Brooks",
      ", ",
      "Automatic Data Processing",
      ", which would be published in 1963.",
      "[9]",
      "[10]",
      "\n",
      "In 1979, Iverson received the ",
      "Turing Award",
      " for his work on APL.",
      "[11]",
      "\n",
      "\n",
      "Development into a computer programming language",
      "[",
      "edit",
      "]",
      "\n",
      "As early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with William C. Carter his work to standardize the instruction set for the machines that later became the ",
      "IBM System/360",
      " family.\n",
      "In 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an ",
      "IBM 1620",
      " computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a part of the notation was called Personalized Array Translator (PAT).",
      "[12]",
      "\n",
      "In 1963, Falkoff, Iverson, and ",
      "Edward H. Sussenguth Jr.",
      ", all working at IBM, used the notation for a formal description of the ",
      "IBM System/360",
      " series machine architecture and functionality, which resulted in a paper published in ",
      "IBM Systems Journal",
      " in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with ",
      "Science Research Associates",
      ", an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help use the language as a tool to develop and use computers in education.",
      "[13]",
      "\n",
      "After ",
      "Lawrence M. Breed",
      " and ",
      "Philip S. Abrams",
      " of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in ",
      "FORTRAN IV",
      " for a part of the notation which had been done for the ",
      "IBM 7090",
      " computer running on the ",
      "IBSYS",
      " operating system. This work was finished in late 1965 and later named IVSYS (for Iverson system). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, \"An Interpreter for Iverson Notation\" in 1966, the academic aspect of this was formally supervised by ",
      "Niklaus Wirth",
      ".",
      "[14]",
      " Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a ",
      "time-sharing",
      " system and, by November 1966, it had been reprogrammed for the ",
      "IBM System/360 Model 50",
      " computer running in a time sharing mode and was used internally at IBM.",
      "[15]",
      "\n",
      "\n",
      "Hardware",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "IBM typeballs (one OCR) with clip, \u20ac2 coin for scale",
      "\n",
      "  ",
      "A programmer's view of the IBM 2741 keyboard layout with the APL typing element print head inserted",
      "\n",
      "A key development in the ability to use APL effectively, before the wide use of cathode ray tube (",
      "CRT",
      ") terminals, was the development of a special ",
      "IBM Selectric typewriter",
      " interchangeable typing element with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typing element mechanism, such as the ",
      "IBM 1050",
      " and ",
      "IBM 2741",
      " terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could type in and see proper APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typing elements, 987 and 988, designed in late 1964, although no APL computer system was available to use them.",
      "[16]",
      " Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typing element for the APL character set.",
      "[17]",
      "\n",
      "Many APL symbols, even with the APL characters on the Selectric typing element, still had to be typed in by over-striking two extant element characters. An example is the ",
      "grade up",
      " character, which had to be made from a ",
      "delta",
      " (shift-H) and a ",
      "Sheffer stroke",
      " (shift-M). This was necessary because the APL character set was much larger than the 88 characters allowed on the typing element, even when letters were restricted to upper-case (capitals).\n",
      "\n",
      "Commercial availability",
      "[",
      "edit",
      "]",
      "\n",
      "The first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near ",
      "Thomas J. Watson Research Center",
      ", the home of APL, in ",
      "Yorktown Heights, New York",
      ".",
      "[16]",
      "\n",
      "IBM was chiefly responsible for introducing APL to the marketplace. APL was first available in 1967 for the ",
      "IBM 1130",
      " as ",
      "APL\\1130",
      ".",
      "[18]",
      "[19]",
      " It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk.\n",
      "APL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would support multiple users on lower-specification systems that had no ",
      "dynamic address translation",
      " hardware.",
      "[20]",
      " Additional improvements in performance for selected ",
      "IBM System/370",
      " mainframe systems included the ",
      "APL Assist Microcode",
      " in which some support for APL execution was included in the processor's ",
      "firmware",
      ", as distinct from being implemented entirely by higher-level software. Somewhat later, as suitably performing hardware was finally growing available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.\n",
      "Early IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were their own timesharing systems. First introduced in 1966, the ",
      "APL\\360",
      "[21]",
      "[22]",
      "[23]",
      " system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged \"I-beam\" functions, using both ",
      "monadic",
      " and ",
      "dyadic",
      " operations.",
      "[24]",
      "\n",
      "In 1973, IBM released ",
      "APL.SV",
      ", which was a continuation of the same product, but which offered ",
      "shared variables",
      " as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the ",
      "IBM 5100",
      " desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered ",
      "BASIC",
      ". In the 1980s, the ",
      "VSAPL",
      " program product enjoyed wide use with ",
      "Conversational Monitor System",
      " (CMS), ",
      "Time Sharing Option",
      " (TSO), ",
      "VSPC",
      ", ",
      "MUSIC/SP",
      ", and ",
      "CICS",
      " users.\n",
      "In 1973\u20131974, Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the 1100 line of the Sperry ",
      "UNIVAC 1100/2200 series",
      " mainframe computers.",
      "[25]",
      " At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.",
      "[26]",
      " Xerox APL was available from June 1975 for Xerox 560 and Sigma 6, 7, and 9 mainframes running ",
      "CP-V",
      " and for ",
      "Honeywell CP-6",
      ".",
      "[27]",
      "\n",
      "In the 1960s and 1970s, several timesharing firms arose that sold APL services using modified versions of the IBM APL\\360",
      "[23]",
      " interpreter. In North America, the better-known ones were ",
      "I. P. Sharp Associates",
      ", ",
      "Scientific Time Sharing Corporation",
      " (STSC), Time Sharing Resources (TSR), and ",
      "The Computer Company",
      " (TCC). CompuServe also entered the market in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's, which ran on DEC's KI and KL 36-bit machines. CompuServe's APL was available both to its commercial market and the consumer information service. With the advent first of less expensive mainframes such as the ",
      "IBM 4300",
      ", and later the personal computer, by the mid-1980s, the timesharing industry was all but gone.\n",
      "Sharp APL",
      " was available from ",
      "I. P. Sharp Associates",
      ", first as a timesharing service in the 1960s, and later as a program product starting around 1979. ",
      "Sharp APL",
      " was an advanced APL implementation with many language extensions, such as ",
      "packages",
      " (the ability to put one or more objects into a single variable), file system, nested arrays, and ",
      "shared variables",
      ".\n",
      "APL interpreters were available from other mainframe and mini-computer manufacturers also, notably ",
      "Burroughs",
      ", ",
      "Control Data Corporation",
      " (CDC), ",
      "Data General",
      ", ",
      "Digital Equipment Corporation",
      " (DEC), ",
      "Harris",
      ", ",
      "Hewlett-Packard",
      " (HP), ",
      "Siemens AG",
      ", ",
      "Xerox",
      ", and others.\n",
      "Garth Foster of ",
      "Syracuse University",
      " sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in ",
      "Blue Mountain Lake, New York",
      ". In later years, Eugene McDonnell organized similar meetings at the ",
      "Asilomar Conference Grounds",
      " near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the ",
      "Association for Computing Machinery",
      " continues to support the APL community.",
      "[28]",
      "\n",
      "\n",
      "Microcomputers",
      "[",
      "edit",
      "]",
      "\n",
      "On microcomputers, which became available from the mid 1970s onwards, ",
      "BASIC",
      " became the dominant programming language.",
      "[29]",
      " Nevertheless, some microcomputers provided APL instead - the first being the ",
      "Intel 8008",
      "-based ",
      "MCM/70",
      " which was released in 1974",
      "[30]",
      "[31]",
      " and which was primarily used in education.",
      "[32]",
      " Another machine of this time was the ",
      "VideoBrain Family Computer",
      ", released in 1977, which was supplied with its dialect of APL called APL/S.",
      "[33]",
      "\n",
      "The ",
      "Commodore SuperPET",
      ", introduced in 1981, included an APL interpreter developed by the ",
      "University of Waterloo",
      ".",
      "[34]",
      "\n",
      "In 1976, Bill Gates claimed in his ",
      "Open Letter to Hobbyists",
      " that ",
      "Microsoft Corporation",
      " was implementing APL for the ",
      "Intel 8080",
      " and ",
      "Motorola 6800",
      " but had \"very little incentive to make [it] available to hobbyists\" because of ",
      "software piracy",
      ".",
      "[35]",
      " It was never released.\n",
      "\n",
      "APL2",
      "[",
      "edit",
      "]",
      "\n",
      "Starting in the early 1980s, IBM APL development, under the leadership of ",
      "Jim Brown",
      ", implemented a new version of the APL language that contained as its primary enhancement the concept of ",
      "nested arrays",
      ", where an array can contain other arrays, and new language features which facilitated integrating nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined ",
      "I. P. Sharp Associates",
      ", where one of his major contributions was directing the evolution of Sharp APL to be more in accord with his vision.",
      "[36]",
      "[37]",
      "[38]",
      "\n",
      "As other vendors were busy developing APL interpreters for new hardware, notably ",
      "Unix",
      "-based ",
      "microcomputers",
      ", APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.",
      "[39]",
      "[40]",
      "\n",
      "APL2",
      " for IBM mainframe computers is still available. IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,",
      "[41]",
      " for teaching mathematics and other subjects, visualization and database access",
      "[42]",
      " and was first available for ",
      "CMS",
      " and ",
      "TSO",
      " in 1984.",
      "[43]",
      " The APL2 Workstation edition (Windows, ",
      "OS/2",
      ", ",
      "AIX",
      ", ",
      "Linux",
      ", and ",
      "Solaris",
      ") followed much later in the early 1990s.",
      "[",
      "citation needed",
      "]",
      "\n",
      "\n",
      "Modern implementations",
      "[",
      "edit",
      "]",
      "\n",
      "Various implementations of APL by APLX, Dyalog, et al., include extensions for ",
      "object-oriented programming",
      ", support for ",
      ".NET Framework",
      ", XML-array conversion primitives, graphing, operating system interfaces, and ",
      "lambda calculus",
      " expressions.\n",
      "\n",
      "Derivative languages",
      "[",
      "edit",
      "]",
      "\n",
      "APL has formed the basis of, or influenced, the following languages:",
      "[",
      "citation needed",
      "]",
      "\n",
      "\n",
      "A and A+",
      ", an alternative APL, the latter with graphical extensions.",
      "\n",
      "FP",
      ", a functional programming language.",
      "\n",
      "Ivy, an interpreter for an APL-like language developed by ",
      "Rob Pike",
      ", and which uses ",
      "ASCII",
      " as input.",
      "[44]",
      "\n",
      "J",
      ", which was also designed by Iverson, and which uses ",
      "ASCII",
      " with ",
      "digraphs",
      " instead of special symbols.",
      "[7]",
      "\n",
      "K",
      ", a proprietary variant of APL developed by Arthur Whitney.",
      "[8]",
      "\n",
      "LYaPAS",
      ", a ",
      "Soviet",
      " extension to APL.",
      "[",
      "citation needed",
      "]",
      "\n",
      "MATLAB",
      ", a numerical computation tool.",
      "[6]",
      "\n",
      "Nial",
      ", a high-level array programming language with a functional programming notation.",
      "\n",
      "Polymorphic Programming Language",
      ", an interactive, extensible language with a similar base language.",
      "\n",
      "S",
      ", a statistical programming language.",
      "\n",
      "Speakeasy",
      ", a numerical computing interactive environment.",
      "\n",
      "Wolfram Language",
      ", the programming language of ",
      "Mathematica",
      ".",
      "[45]",
      "\n",
      "Language characteristics",
      "[",
      "edit",
      "]",
      "\n",
      "Character set",
      "[",
      "edit",
      "]",
      "\n",
      "Main articles: ",
      "APL (codepage)",
      " and ",
      "syntax and symbols.",
      "\n",
      "APL has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference. In the 1960s and 1970s, few terminal devices and even display monitors could reproduce the APL character set. The most popular ones employed the ",
      "IBM Selectric",
      " print mechanism used with a special APL type element. One of the early APL ",
      "line terminals",
      " (line-mode operation only, ",
      "not",
      " full screen) was the Texas Instruments TI Model 745 (circa 1977) with the full APL character set",
      "[46]",
      " which featured ",
      "half and full duplex",
      " ",
      "telecommunications",
      " modes, for interacting with an APL ",
      "time-sharing",
      " service or remote mainframe to run a remote computer job, ",
      "called an RJE",
      ".\n",
      "Over time, with the universal use of high-quality graphic displays, printing devices and ",
      "Unicode",
      " support, the APL character font problem has largely been eliminated. However, entering APL characters requires the use of ",
      "input method editors",
      ", keyboard mappings, virtual/on-screen APL symbol sets,",
      "[47]",
      "[48]",
      " or easy-reference printed keyboard cards which can frustrate beginners accustomed to other programming languages.",
      "[49]",
      "[50]",
      "[51]",
      " With beginners who have no prior experience with other programming languages, a study involving high school students found that typing and using APL characters did not hinder the students in any measurable way.",
      "[52]",
      "\n",
      "In defense of APL use, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating systems such as Microsoft Windows.",
      "[53]",
      " The reported productivity gains assume that one will spend enough time working in APL to make it worthwhile to memorize the symbols, their semantics, and keyboard mappings, not to mention a substantial number of idioms for common tasks.",
      "[",
      "citation needed",
      "]",
      "\n",
      "\n",
      "Design",
      "[",
      "edit",
      "]",
      "\n",
      "Unlike traditionally structured programming languages, APL code is typically structured as chains of ",
      "monadic",
      " or ",
      "dyadic",
      " ",
      "functions",
      ", and ",
      "operators",
      "[54]",
      " acting on ",
      "arrays",
      ".",
      "[55]",
      " APL has many nonstandard ",
      "primitives",
      " (functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same ",
      "precedence",
      ", and always associate to the right. Thus, APL is ",
      "read",
      " or best understood from ",
      "right-to-left",
      ".\n",
      "Early APL implementations (circa 1970 or so) had no programming loop-",
      "flow control",
      " structures, such as ",
      "do",
      " or ",
      "while",
      " loops, and ",
      "if-then-else",
      " constructs. Instead, they used array operations, and use of ",
      "structured programming",
      " constructs was often not necessary, since an operation could be performed on a full array in one statement. For example, the ",
      "iota",
      " function (",
      "\u03b9",
      ") can replace for-loop ",
      "iteration",
      ": \u03b9N when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated.\n",
      "The APL environment is called a ",
      "workspace",
      ". In a workspace the user can define programs and data, i.e., the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.",
      "[56]",
      " In the examples below, the APL interpreter first types six spaces before awaiting the user's input. Its own output starts in column one.\n",
      "\n",
      "\n\n",
      "\n",
      "      ",
      "n",
      " ",
      "\u2190",
      " ",
      "4",
      " ",
      "5",
      " ",
      "6",
      " ",
      "7",
      "\n",
      "\n",
      "\n",
      "Assigns ",
      "vector",
      " of values, {4 5 6 7}, to variable ",
      "n",
      ", an array create operation. An equivalent yet more concise APL expression would be ",
      "n",
      " ",
      "\u2190",
      " ",
      "3",
      " ",
      "+",
      " ",
      "\u2373",
      "4",
      ". Multiple values are stored in array ",
      "n",
      ", the operation performed ",
      "without formal loops or control flow language",
      ".\n",
      "\n",
      "\n",
      "      ",
      "n",
      " \n",
      "4",
      " ",
      "5",
      " ",
      "6",
      " ",
      "7",
      "\n",
      "\n",
      "\n",
      "Display the contents of ",
      "n",
      ", currently an array or vector.\n",
      "\n",
      "\n",
      "      ",
      "n",
      "+",
      "4",
      "\n",
      "8",
      " ",
      "9",
      " ",
      "10",
      " ",
      "11",
      "\n",
      "\n",
      "\n",
      "4 is now added to all elements of vector ",
      "n",
      ", creating a 4-element vector {8 9 10 11}.",
      " As above, APL's interpreter displays the result because the expression's value was not assigned to a variable (with a ",
      "\u2190",
      ").\n",
      "\n",
      "\n",
      "      ",
      "+",
      "/",
      "n",
      "\n",
      "22",
      "\n",
      "\n",
      "\n",
      "APL displays the sum of components of the vector ",
      "n",
      ", i.e., ",
      "22 (= 4 + 5 + 6 + 7)",
      " using a very compact notation: read +/ as \"plus, over...\" and a slight change would be \"multiply, over...\"\n",
      "\n",
      "\n",
      "      ",
      "m",
      " ",
      "\u2190",
      " ",
      "+",
      "/",
      "(",
      "3",
      "+\u2373",
      "4",
      ")",
      "\n      ",
      "m",
      "\n",
      "22",
      "\n",
      "\n",
      "\n",
      "These operations can be combined into one statement, remembering that APL evaluates expressions right to left: first ",
      "\u2373",
      "4",
      " creates an array, ",
      "[",
      "1",
      ",",
      "2",
      ",",
      "3",
      ",",
      "4",
      "]",
      ", then 3 is added to each component, which are summed together and the result stored in variable ",
      "m",
      ", finally displayed.\n",
      "In normal mathematical notation, it is equivalent to: ",
      "\n  ",
      "\n    ",
      "\n      ",
      "\n        ",
      "\n          ",
      "m",
      "\n          ",
      "=",
      "\n          ",
      "\n            ",
      "\u2211",
      "\n            ",
      "\n              ",
      "i",
      "\n              ",
      "=",
      "\n              ",
      "1",
      "\n            ",
      "\n            ",
      "\n              ",
      "4",
      "\n            ",
      "\n          ",
      "\n          ",
      "(",
      "\n          ",
      "i",
      "\n          ",
      "+",
      "\n          ",
      "3",
      "\n          ",
      ")",
      "\n        ",
      "\n      ",
      "\n    ",
      "\n    ",
      "{\\displaystyle \\displaystyle m=\\sum \\limits _{i=1}^{4}(i+3)}",
      "\n  ",
      "\n",
      ". Recall that mathematical expressions are not read or evaluated from right-to-left.\n",
      "\n",
      "\n",
      "The user can save the workspace with all values, programs, and execution status.\n",
      "APL uses a set of non-",
      "ASCII",
      " symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for single instruction, multiple data (",
      "SIMD",
      ") vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing ",
      "Conway's Game of Life",
      " in one line of code.",
      "[57]",
      " In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code.\n",
      "Because of the unusual ",
      "character set",
      ", many programmers use special ",
      "keyboards",
      " with APL keytops to write APL code.",
      "[58]",
      " Although there are various ways to write APL code using only ASCII characters,",
      "[59]",
      " in practice it is almost never done. (This may be thought to support Iverson's thesis about ",
      "notation as a tool of thought",
      ".",
      "[60]",
      ") Most if not all modern implementations use standard keyboard layouts, with special mappings or ",
      "input method editors",
      " to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font.\n",
      "Advocates of APL",
      "[",
      "who?",
      "]",
      " claim that the examples of so-called ",
      "write-only code",
      " (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology.",
      "[",
      "citation needed",
      "]",
      "\n",
      "They also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be reduced greatly. Many APL advocates and practitioners also view standard programming languages such as ",
      "COBOL",
      " and ",
      "Java",
      " as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.",
      "[61]",
      "[62]",
      "[63]",
      "[64]",
      "\n",
      "\n",
      "Terminology",
      "[",
      "edit",
      "]",
      "\n",
      "APL makes a clear distinction between ",
      "functions",
      " and ",
      "operators",
      ".",
      "[54]",
      "[65]",
      " Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to ",
      "higher-order functions",
      ") take functions or arrays as arguments, and derive related functions. For example, the ",
      "sum",
      " function is derived by applying the ",
      "reduction",
      " operator to the ",
      "addition",
      " function. Applying the same reduction operator to the ",
      "maximum",
      " function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms ",
      "verb",
      " for ",
      "function",
      " and ",
      "adverb",
      " or ",
      "conjunction",
      " for ",
      "operator",
      ".\n",
      "APL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as ",
      "primitives",
      ". Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment.\n",
      "Some words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science.\n",
      "\n",
      "\n",
      "Terminology of APL operators\n",
      "\n",
      "\n",
      "Term\n",
      "\n",
      "Description\n",
      "\n",
      "\n",
      "function\n",
      "\n",
      "operation or mapping that takes zero, one (right) or two (left & right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be:\n",
      "Primitive: built-in and represented by a single glyph;",
      "[66]",
      "\n",
      "Defined: as a named and ordered collection of program statements;",
      "[66]",
      "\n",
      "Derived: as a combination of an operator with its arguments.",
      "[66]",
      "\n",
      "\n",
      "\n",
      "array\n",
      "\n",
      "data valued object of zero or more ",
      "orthogonal",
      " dimensions in ",
      "row-major",
      " order in which each item is a primitive scalar datum or another array.",
      "[67]",
      "\n",
      "\n",
      "\n",
      "niladic\n",
      "\n",
      "not taking or requiring any arguments,",
      "[68]",
      "\n",
      "\n",
      "\n",
      "monadic\n",
      "\n",
      "requiring only one argument; on the right for a function, on the left for an operator, unary",
      "[68]",
      "\n",
      "\n",
      "\n",
      "dyadic\n",
      "\n",
      "requiring both a left and a right argument, binary",
      "[68]",
      "\n",
      "\n",
      "\n",
      "ambivalent or monadic\n",
      "\n",
      "capable of use in a monadic or dyadic context, permitting its left argument to be elided",
      "[66]",
      "\n",
      "\n",
      "\n",
      "operator\n",
      "\n",
      "operation or mapping that takes one (left) or two (left & right) function or array valued arguments (operands) and derives a function. An operator may be:\n",
      "Primitive: built-in and represented by a single glyph;",
      "[66]",
      "\n",
      "Defined: as a named and ordered collection of program statements.",
      "[66]",
      "\n",
      "\n",
      "Syntax",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "APL syntax and symbols",
      "\n",
      "APL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, and tools to experiment on them.",
      "[69]",
      "\n",
      "\n",
      "Examples",
      "[",
      "edit",
      "]",
      "\n",
      "Hello, World",
      "[",
      "edit",
      "]",
      "\n",
      "This displays \"",
      "Hello, world",
      "\":\n",
      "\n",
      "'Hello, world'",
      "\n",
      "\n",
      "'Hello World,' sample user session on YouTube",
      "[70]",
      "\n",
      "A design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.\n",
      "The 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).\n",
      "\n",
      "Exponentiation",
      "[",
      "edit",
      "]",
      "\n",
      "Another example of this theme is that exponentiation in APL is written as \"",
      "2\u22c63",
      "\", which indicates raising 2 to the power 3 (this would be written as \"",
      "2^3",
      "\" in some other languages and \"",
      "2**3",
      "\" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses ",
      "2\u00d73",
      " for that. However, if no base is specified (as with the statement \"",
      "\u22c63",
      "\" in APL, or \"",
      "^3",
      "\" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant ",
      "e",
      " (2.71828....), and so interpreting \"",
      "\u22c63",
      "\" as \"",
      "2.71828\u22c63",
      "\".\n",
      "\n",
      "Simple statistics",
      "[",
      "edit",
      "]",
      "\n",
      "Suppose that ",
      "X",
      " is an array of numbers. Then ",
      "(+/X)\u00f7\u2374X",
      " gives its average. Reading ",
      "right-to-left",
      ", ",
      "\u2374X",
      " gives the number of elements in X, and since ",
      "\u00f7",
      " is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of ",
      "X\u00f7\u2374X",
      ", of each element of X divided by the number of elements in X), and ",
      "+/X",
      " adds all the elements of X. Building on this, ",
      "((",
      "+",
      "/",
      "((",
      "X",
      " ",
      "-",
      " ",
      "(",
      "+",
      "/",
      "X",
      ")",
      "\u00f7\u2374",
      "X",
      ")",
      "*",
      "2",
      "))",
      "\u00f7\u2374",
      "X",
      ")",
      "*",
      "0.5",
      " calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so \n",
      "\n",
      "SD",
      "\u2190",
      "((",
      "+",
      "/",
      "((",
      "X",
      " ",
      "-",
      " ",
      "AV",
      "\u2190",
      "(",
      "T",
      "\u2190",
      "+",
      "/",
      "X",
      ")",
      "\u00f7\u2374",
      "X",
      ")",
      "*",
      "2",
      "))",
      "\u00f7\u2374",
      "X",
      ")",
      "*",
      "0.5",
      "\n",
      "\n",
      "would place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time.\n",
      "\n",
      "Pick 6",
      " lottery numbers",
      "[",
      "edit",
      "]",
      "\n",
      "This following immediate-mode expression generates a typical set of ",
      "Pick 6",
      " ",
      "lottery",
      " numbers: six ",
      "pseudo-random",
      " ",
      "integers",
      " ranging from 1 to 40, ",
      "guaranteed non-repeating",
      ", and displays them sorted in ascending order:\n",
      "\n",
      "x",
      "[",
      "\u234b",
      "x",
      "\u2190",
      "6",
      "?",
      "40",
      "]",
      "\n",
      "\n",
      "The above does a lot, concisely; although it seems complex to a new ",
      "APLer",
      ". It combines the following APL ",
      "functions",
      " (also called ",
      "primitives",
      "[71]",
      " and ",
      "glyphs",
      "[72]",
      "):\n",
      "\n",
      "The first to be executed (APL executes from rightmost to leftmost) is dyadic function ",
      "?",
      " (named ",
      "deal",
      " when dyadic) that returns a ",
      "vector",
      " consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum \u2265 vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.",
      "[73]",
      "\n",
      "This vector is then ",
      "assigned",
      " (",
      "\u2190",
      ") to the variable ",
      "x",
      ", because it is needed later.",
      "\n",
      "This vector is then ",
      "sorted",
      " in ascending order by a monadic ",
      "\u234b",
      " function, which has as its right argument everything to the right of it up to the next unbalanced ",
      "close-bracket",
      " or close-parenthesis. The result of ",
      "\u234b",
      " is the indices that will put its argument into ascending order.",
      "\n",
      "Then the output of ",
      "\u234b",
      " is used to index the variable ",
      "x",
      ", which we saved earlier for this purpose, thereby selecting its items in ",
      "ascending",
      " sequence.",
      "\n",
      "Since there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.\n",
      "?",
      " also has a monadic equivalent called ",
      "roll",
      ", which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a ",
      "role-playing game",
      " program might use the expression ",
      "?20",
      " to roll a twenty-sided die.\n",
      "\n",
      "Prime numbers",
      "[",
      "edit",
      "]",
      "\n",
      "The following expression finds all ",
      "prime numbers",
      " from 1 to R. In both time and space, the calculation complexity is ",
      "\n  ",
      "\n    ",
      "\n      ",
      "\n        ",
      "O",
      "\n        ",
      "(",
      "\n        ",
      "\n          ",
      "R",
      "\n          ",
      "\n            ",
      "2",
      "\n          ",
      "\n        ",
      "\n        ",
      ")",
      "\n        ",
      "\n        ",
      "\n      ",
      "\n    ",
      "\n    ",
      "{\\displaystyle O(R^{2})\\,\\!}",
      "\n  ",
      "\n",
      " (in ",
      "Big O notation",
      ").\n",
      "\n",
      "(",
      "~",
      "R",
      "\u220a",
      "R",
      "\u2218.",
      "\u00d7",
      "R",
      ")",
      "/",
      "R",
      "\u2190",
      "1",
      "\u2193",
      "\u03b9",
      "R",
      "\n",
      "\n",
      "Executed from right to left, this means:\n",
      "\n",
      "Iota",
      " ",
      "\u03b9",
      " creates a vector containing ",
      "integers",
      " from ",
      "1",
      " to ",
      "R",
      " (if ",
      "R= 6",
      " at the start of the program, ",
      "\u03b9R",
      " is ",
      "1 2 3 4 5 6",
      ")",
      "\n",
      "Drop",
      " first element of this vector (",
      "\u2193",
      " function), i.e., ",
      "1",
      ". So ",
      "1\u2193\u03b9R",
      " is ",
      "2 3 4 5 6",
      "\n",
      "Set",
      " ",
      "R",
      " to the new vector (",
      "\u2190",
      ", ",
      "assignment",
      " primitive), i.e., ",
      "2 3 4 5 6",
      "\n",
      "The ",
      "/",
      " ",
      "reduction",
      " operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses):",
      "\n",
      "Generate ",
      "outer product",
      " of ",
      "R",
      " multiplied by ",
      "R",
      ", i.e., a matrix that is the ",
      "multiplication table",
      " of R by R (",
      "\u00b0.\u00d7",
      " operator), i.e.,",
      "\n",
      "\n\n",
      "\n",
      "4\n",
      "\n",
      "6\n",
      "\n",
      "8\n",
      "\n",
      "10\n",
      "\n",
      "12\n",
      "\n",
      "\n",
      "6\n",
      "\n",
      "9\n",
      "\n",
      "12\n",
      "\n",
      "15\n",
      "\n",
      "18\n",
      "\n",
      "\n",
      "8\n",
      "\n",
      "12\n",
      "\n",
      "16\n",
      "\n",
      "20\n",
      "\n",
      "24\n",
      "\n",
      "\n",
      "10\n",
      "\n",
      "15\n",
      "\n",
      "20\n",
      "\n",
      "25\n",
      "\n",
      "30\n",
      "\n",
      "\n",
      "12\n",
      "\n",
      "18\n",
      "\n",
      "24\n",
      "\n",
      "30\n",
      "\n",
      "36\n",
      "\n",
      "Build a vector the same length as ",
      "R",
      " with ",
      "1",
      " in each place where the corresponding number in ",
      "R",
      " is in the outer product matrix (",
      "\u2208",
      ", ",
      "set inclusion",
      " or ",
      "element of",
      " or ",
      "Epsilon",
      " operator), i.e., ",
      "0 0 1 0 1",
      "\n",
      "Logically negate (",
      "not",
      ") values in the vector (change zeros to ones and ones to zeros) (",
      "\u223c",
      ", logical ",
      "not",
      " or ",
      "Tilde",
      " operator), i.e., ",
      "1 1 0 1 0",
      "\n",
      "Select the items in ",
      "R",
      " for which the corresponding element is ",
      "1",
      " (",
      "/",
      " ",
      "reduction",
      " operator), i.e., ",
      "2 3 5",
      "\n",
      "(Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that ",
      "\u03b96",
      " is ",
      "0 1 2 3 4 5",
      ", which is convenient for some calculations.)\n",
      "\n",
      "Sorting",
      "[",
      "edit",
      "]",
      "\n",
      "The following expression ",
      "sorts",
      " a word list stored in matrix X according to word length:\n",
      "\n",
      "X",
      "[",
      "\u234b",
      "X",
      "+",
      ".",
      "\u2260",
      "' '",
      ";]",
      "\n",
      "\n",
      "Game of Life",
      "[",
      "edit",
      "]",
      "\n",
      "The following function \"life\", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to ",
      "Conway's Game of Life",
      ". It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.\n",
      "\n",
      "life",
      "\u2190",
      "{",
      "\u2191",
      "1",
      " ",
      "\u2375",
      "\u2228",
      ".",
      "\u2227",
      "3",
      " ",
      "4",
      "=+",
      "/",
      ",",
      "\u00af1",
      " ",
      "0",
      " ",
      "1",
      "\u2218.",
      "\u2296",
      "\u00af1",
      " ",
      "0",
      " ",
      "1",
      "\u2218.",
      "\u233d\u2282",
      "\u2375",
      "}",
      "\n",
      "\n",
      "HTML tags removal",
      "[",
      "edit",
      "]",
      "\n",
      "In the following example, also Dyalog, the first line assigns some HTML code to a variable ",
      "txt",
      " and then uses an APL expression to remove all the HTML tags (",
      "explanation",
      "):\n",
      "\n",
      "      ",
      "txt",
      "\u2190",
      "'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'",
      "\n      ",
      "{",
      "\u2375",
      " ",
      "/\u2368",
      " ",
      "~",
      "{",
      "\u2375",
      "\u2228\u2260",
      "\\",
      "\u2375",
      "}",
      "\u2375",
      "\u220a",
      "'<>'",
      "}",
      " ",
      "txt",
      "\n",
      "This",
      " ",
      "is",
      " ",
      "emphasized",
      " ",
      "text",
      ".",
      "\n",
      "\n",
      "Use",
      "[",
      "edit",
      "]",
      "\n",
      "APL is used for many purposes including ",
      "financial",
      " and ",
      "insurance",
      " applications,",
      "[74]",
      " ",
      "artificial intelligence",
      ",",
      "[75]",
      "[76]",
      "\n",
      "neural networks",
      "[77]",
      "\nand ",
      "robotics",
      ".",
      "[78]",
      " It has been argued that APL is a ",
      "calculation",
      " tool and not a programming language;",
      "[79]",
      " its symbolic nature and array capabilities have made it popular with ",
      "domain experts",
      " and ",
      "data scientists",
      "[80]",
      " who do not have or require the skills of a ",
      "computer programmer",
      ".\n",
      "APL is well suited to ",
      "image manipulation",
      " and ",
      "computer animation",
      ", where graphic transformations can be encoded as matrix multiplications. One of the first commercial computer graphics houses, ",
      "Digital Effects",
      ", produced an APL graphics product named ",
      "Visions",
      ", which was used to create television commercials and animation for the 1982 film ",
      "Tron",
      ".",
      "[81]",
      " Latterly, the ",
      "Stormwind",
      " ",
      "boating simulator",
      " uses APL to implement its core logic, its interfacing to the rendering pipeline middleware and a major part of its ",
      "physics engine",
      ".",
      "[82]",
      "\n",
      "Today, APL remains in use in a wide range of commercial and scientific applications, for example\n",
      "investment management",
      ",",
      "[74]",
      "\n",
      "asset management",
      ",",
      "[83]",
      "\n",
      "health care",
      ",",
      "[84]",
      "\nand ",
      "DNA profiling",
      ",",
      "[85]",
      "[86]",
      " \nand by hobbyists.",
      "[87]",
      "\n",
      "\n",
      "Notable implementations",
      "[",
      "edit",
      "]",
      "\n",
      "APL\\360",
      "[",
      "edit",
      "]",
      "\n",
      "The first implementation of APL using recognizable APL symbols was APL\\360 which ran on the ",
      "IBM System/360",
      ", and was completed in November 1966",
      "[1]",
      " though at that time remained in use only within IBM.",
      "[43]",
      " In 1973 its implementors, ",
      "Larry Breed",
      ", ",
      "Dick Lathwell",
      " and ",
      "Roger Moore",
      ", were awarded the ",
      "Grace Murray Hopper Award",
      " from the ",
      "Association for Computing Machinery",
      " (ACM). It was given \"for their work in the design and implementation of APL\\360, setting new standards in simplicity, efficiency, reliability and response time for interactive systems.\"",
      "[88]",
      "[89]",
      "[90]",
      "\n",
      "In 1975, the ",
      "IBM 5100",
      " microcomputer offered APL\\360",
      "[91]",
      " as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.",
      "[92]",
      "\n",
      "Significant developments to APL\\360 included CMS/APL, which made use of the ",
      "virtual storage",
      " capabilities of ",
      "CMS",
      " and APLSV, which introduced ",
      "shared variables",
      ", system variables and system functions. It was subsequently ported to the ",
      "IBM System/370",
      " and ",
      "VSPC",
      " platforms until its final release in 1983, after which it was replaced by APL2.",
      "[43]",
      "\n",
      "\n",
      "APL\\1130",
      "[",
      "edit",
      "]",
      "\n",
      "In 1968, APL\\1130 became the first publicly available APL system,",
      "[93]",
      " created by IBM for the ",
      "IBM 1130",
      ". It became the most popular ",
      "IBM Type-III Library",
      " software that IBM released.",
      "[94]",
      "\n",
      "\n",
      "APL*Plus and Sharp APL",
      "[",
      "edit",
      "]",
      "\n",
      "Main articles: ",
      "I. P. Sharp Associates",
      " and ",
      "Scientific Time Sharing Corporation",
      "\n",
      "APL*Plus and Sharp APL are versions of APL\\360 with added business-oriented extensions such as data formatting and facilities to store APL arrays in external files. They were jointly developed by two companies, employing various members of the original IBM APL\\360 development team.",
      "[95]",
      "\n",
      "The two companies were ",
      "I. P. Sharp Associates",
      " (IPSA), an APL\\360 services company formed in 1964 by Ian Sharp, Roger Moore and others, and ",
      "STSC",
      ", a time-sharing and consulting service company formed in 1969 by Lawrence Breed and others. Together the two developed APL*Plus and thereafter continued to work together but develop APL separately as APL*Plus and Sharp APL. STSC ported APL*Plus to many platforms with versions being made for the VAX 11,",
      "[96]",
      " PC and UNIX, whereas IPSA took a different approach to the arrival of the ",
      "Personal Computer",
      " and made Sharp APL available on this platform using additional ",
      "PC-XT/360",
      " hardware. In 1993, ",
      "Soliton Incorporated",
      " was formed to support Sharp APL and it developed Sharp APL into SAX (Sharp APL for Unix). As of 2018",
      "[update]",
      ", APL*Plus continues as APL2000 APL+Win.\n",
      "In 1985, Ian Sharp, and Dan Dyer of STSC, jointly received the ",
      "Kenneth E. Iverson Award for Outstanding Contribution to APL",
      ".",
      "[97]",
      "\n",
      "\n",
      "APL2",
      "[",
      "edit",
      "]",
      "\n",
      "APL2 was a significant re-implementation of APL by IBM which was developed from 1971 and first released in 1984. It provides many additions to the language, of which the most notable is nested (non-rectangular) array support.",
      "[43]",
      " As of 2018",
      "[update]",
      " it is available for mainframe computers running ",
      "z/OS",
      " or ",
      "z/VM",
      " and workstations running ",
      "AIX",
      ", ",
      "Linux",
      ", ",
      "Sun Solaris",
      ", and ",
      "Microsoft Windows",
      ".",
      "[98]",
      "\n",
      "The entire APL2 Products and Services Team was awarded the Iverson Award in 2007.",
      "[97]",
      "\n",
      "\n",
      "Dyalog APL",
      "[",
      "edit",
      "]",
      "\n",
      "Dyalog APL was first released by ",
      "British",
      " company Dyalog Ltd.",
      "[99]",
      " in 1983",
      "[100]",
      " and, as of 2018",
      "[update]",
      ", is available for ",
      "AIX",
      ", ",
      "Linux",
      " (including on the ",
      "Raspberry Pi",
      "), ",
      "macOS",
      " and ",
      "Microsoft Windows",
      " platforms. It is based on APL2, with extensions to support ",
      "object-oriented programming",
      "[101]",
      " and ",
      "functional programming",
      ".",
      "[102]",
      " Licences are free for personal/non-commercial use.",
      "[103]",
      "\n",
      "In 1995, two of the development team - ",
      "John Scholes",
      " and Peter Donnelly - were awarded the Iverson Award for their work on the interpreter.",
      "[97]",
      " Gitte Christensen and Morten Kromberg were joint recipients of the Iverson Award in 2016.",
      "[104]",
      "\n",
      "\n",
      "NARS2000",
      "[",
      "edit",
      "]",
      "\n",
      "NARS2000 is an open-source APL interpreter written by Bob Smith, a prominent APL developer and implementor from ",
      "STSC",
      " in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes and runs natively on ",
      "Microsoft Windows",
      ", and other platforms under ",
      "Wine",
      ".",
      "[105]",
      "\n",
      "\n",
      "APLX",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "APLX",
      "\n",
      "APLX is a ",
      "cross-platform",
      " ",
      "dialect",
      " of APL, based on APL2 and with several extensions, which was first released by ",
      "British",
      " company MicroAPL in 2002. Although no longer in development or on commercial sale it is now available free of charge from Dyalog.",
      "[106]",
      "\n",
      "\n",
      "GNU APL",
      "[",
      "edit",
      "]",
      "\n",
      "GNU APL is a free implementation of Extended APL as specified in ISO/IEC 13751:2001 and is thus an implementation of APL2. It runs on GNU/Linux and on Windows using ",
      "Cygwin",
      ", and uses ",
      "Unicode",
      " internally. It was written by J\u00fcrgen Sauermann.",
      "[107]",
      "\n",
      "Richard Stallman",
      ", founder of the ",
      "GNU Project",
      ", was an early adopter of APL, using it to write a text editor as a high school student in the summer of 1969.",
      "[108]",
      "\n",
      "\n",
      "Interpretation and compilation of APL",
      "[",
      "edit",
      "]",
      "\n",
      "APL is traditionally an ",
      "interpreted language",
      ", having language characteristics such as ",
      "weak variable typing",
      " not well suited to ",
      "compilation",
      ".",
      "[109]",
      " However, with arrays as its core data structure",
      "[110]",
      " it provides opportunities for performance gains through ",
      "parallelism",
      ",",
      "[111]",
      " ",
      "parallel computing",
      ",",
      "[112]",
      "[113]",
      " ",
      "massively parallel",
      " applications,",
      "[114]",
      "[115]",
      " and ",
      "very-large-scale integration",
      " (VLSI),",
      "[116]",
      "[117]",
      " and from the outset APL has been regarded as a high-performance language",
      "[118]",
      " - for example, it was noted for the speed with which it could perform complicated matrix operations \"because it operates on arrays and performs operations like matrix inversion internally\".",
      "[119]",
      "\n",
      "Nevertheless, APL is rarely purely interpreted and compilation or partial compilation techniques that are, or have been, used include the following:\n",
      "\n",
      "Idiom recognition",
      "[",
      "edit",
      "]",
      "\n",
      "Most APL interpreters support ",
      "idiom",
      " recognition",
      "[120]",
      " and evaluate common idioms as single operations.",
      "[121]",
      "[122]",
      " For example, by evaluating the idiom ",
      "BV/\u2373\u2374A",
      " as a single operation (where ",
      "BV",
      " is a Boolean vector and ",
      "A",
      " is an array), the creation of two intermediate arrays is avoided.",
      "[123]",
      "\n",
      "\n",
      "Optimised bytecode",
      "[",
      "edit",
      "]",
      "\n",
      "Weak typing in APL means that a name may reference an array (of any datatype), a function or an operator. In general, the interpreter cannot know in advance which form it will be and must therefore perform analysis, syntax checking etc. at run-time.",
      "[124]",
      " However, in certain circumstances, it is possible to deduce in advance what type a name is expected to reference and then generate ",
      "bytecode",
      " which can be executed with reduced run-time overhead. This bytecode can also be optimised using compilation techniques such as ",
      "constant folding",
      " or ",
      "common subexpression elimination",
      ".",
      "[125]",
      " The interpreter will execute the bytecode when present and when any assumptions which have been made are met. Dyalog APL includes support for optimised bytecode.",
      "[125]",
      "\n",
      "\n",
      "Compilation",
      "[",
      "edit",
      "]",
      "\n",
      "Compilation",
      " of APL has been the subject of research and experiment since the language first became available; the first compiler is considered to be the Burroughs APL-700",
      "[126]",
      " which was released around 1971.",
      "[127]",
      " In order to be able to compile APL, language limitations have to be imposed.",
      "[126]",
      "[128]",
      " APEX is a research APL compiler which was written by ",
      "Robert Bernecky",
      " and is available under the ",
      "GNU Public License",
      ".",
      "[129]",
      "\n",
      "The ",
      "STSC",
      " APL Compiler is a hybrid of a bytecode optimiser and a compiler - it enables compilation of functions to ",
      "machine code",
      " provided that its sub-functions and globals are ",
      "declared",
      ", but the interpreter is still used as a ",
      "runtime library",
      " and to execute functions which do not meet the compilation requirements.",
      "[130]",
      "\n",
      "\n",
      "Standards",
      "[",
      "edit",
      "]",
      "\n",
      "APL has been standardized by the ",
      "American National Standards Institute",
      " (ANSI) ",
      "working group",
      " X3J10 and ",
      "International Organization for Standardization",
      " (ISO) and ",
      "International Electrotechnical Commission",
      " (IEC), ISO/IEC Joint Technical Committee 1 Subcommittee 22 Working Group 3. The Core APL language is specified in ISO 8485:1989, and the Extended APL language is specified in ISO/IEC 13751:2001.\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"APL Quotations and Anecdotes\"",
      ". ",
      "jsoftware.com",
      ". ",
      "jsoftware",
      ". Retrieved ",
      "April 14,",
      " 2018",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\"std::iota\"",
      ". ",
      "cppreference.com",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Iverson, Kenneth E.",
      " (1962). ",
      "A Programming Language",
      ". Wiley. ",
      "ISBN",
      "\u00a0",
      "978-0-471-43014-8",
      ". Archived from ",
      "the original",
      " on 2014-10-27",
      ". Retrieved ",
      "2014-10-27",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "McIntyre, Donald B. (1991). ",
      "\"Language as an Intellectual Tool: From Hieroglyphics to APL\"",
      ". ",
      "IBM Systems Journal",
      ". ",
      "30",
      " (4): 554\u2013581. ",
      "doi",
      ":",
      "10.1147/sj.304.0554",
      ". Archived from ",
      "the original",
      " on March 4, 2016",
      ". Retrieved ",
      "January 9,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"ACM Award Citation\u00a0\u2013 John Backus\"",
      ". Awards.acm.org. 1977. Archived from ",
      "the original",
      " on February 12, 2008",
      ". Retrieved ",
      "February 3,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Moler, Cleve. ",
      "\"The Growth of MATLAB\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on April 11, 2009",
      ". Retrieved ",
      "February 3,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"A Bibliography of APL and J\"",
      ". Jsoftware.com",
      ". Retrieved ",
      "March 2,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"An Interview with Arthur Whitney\"",
      ". Kx Systems. January 4, 2004. Archived from ",
      "the original",
      " on April 4, 2009",
      ". Retrieved ",
      "March 2,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Iverson, Kenneth E., ",
      "\"Automatic Data Processing: Chapter 6: A programming language\"",
      " ",
      "Archived",
      " June 4, 2009, at the ",
      "Wayback Machine",
      ", 1960, Draft copy for Brooks and Iverson 1963 book, ",
      "Automatic Data Processing",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Brooks, Fred",
      "; Iverson, Kenneth, (1963), ",
      "Automatic Data Processing",
      ", John Wiley & Sons Inc.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Turing Award Citation 1979\"",
      ". Awards.acm.org. Archived from ",
      "the original",
      " on 2009-12-23",
      ". Retrieved ",
      "February 3,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hellerman, H. (July 1964). \"Experimental Personalized Array Translator System\". ",
      "Communications of the ACM",
      ". ",
      "7",
      " (7): 433\u2013438. ",
      "doi",
      ":",
      "10.1145/364520.364573",
      ". ",
      "S2CID",
      "\u00a0",
      "2181070",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Falkoff, Adin D.; Iverson, Kenneth E., ",
      "\"The Evolution of APL\"",
      ", ACM SIGPLAN Notices 13, 1978-08.",
      "\n",
      "\n",
      "^",
      " ",
      "Abrams, Philip S., ",
      "An interpreter for \"Iverson notation\"",
      ", Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966;",
      "\n",
      "\n",
      "^",
      " ",
      "Haigh, Thomas (2005). \"Biographies: Kenneth E. Iverson\". ",
      "IEEE Annals of the History of Computing",
      ". ",
      "doi",
      ":",
      "10.1109/MAHC.2005.4",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Breed, Larry, ",
      "\"The First APL Terminal Session\"",
      ", ",
      "APL Quote Quad",
      ", Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4.",
      "\n",
      "\n",
      "^",
      " ",
      "19, 2009 Adin Falkoff",
      " \u2013 Computer History Museum. \"Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Breed, Larry",
      " (August 2006). ",
      "\"How We Got to APL\\1130\"",
      ". ",
      "Vector (British APL Association)",
      ". ",
      "22",
      " (3). ",
      "ISSN",
      "\u00a0",
      "0955-1433",
      ". Archived from ",
      "the original",
      " on 2008-05-12",
      ". Retrieved ",
      "2007-04-02",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "APL\\1130 Manual",
      " ",
      "Archived",
      " 2011-02-21 at the ",
      "Wayback Machine",
      ", May 1969",
      "\n",
      "\n",
      "^",
      " ",
      "\"Remembering APL\"",
      ". Quadibloc.com",
      ". Retrieved ",
      "June 17,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Falkoff, Adin; Iverson, Kenneth E., ",
      "\"APL\\360 Users Guide\"",
      " ",
      "Archived",
      " 2012-02-29 at the ",
      "Wayback Machine",
      ", IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968.",
      "\n",
      "\n",
      "^",
      " ",
      "\"APL\\360 Terminal System\"",
      " ",
      "Archived",
      " 2010-07-11 at the ",
      "Wayback Machine",
      ", IBM Research, Thomas J. Watson Research Center, March 1967.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Pakin, Sandra (1968). ",
      "APL\\360 Reference Manual",
      ". Science Research Associates, Inc. ",
      "ISBN",
      "\u00a0",
      "978-0-574-16135-2",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Falkoff, Adin D.; Iverson, Kenneth E.,",
      "The Design of APL",
      ", ",
      "IBM Journal of Research and Development",
      ", Volume 17, Number 4, July 1973. \"These environmental defined functions were based on the use of still another class of functions\u2014called \"I-beams\" because of the shape of the symbol used for them\u2014which provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Minker, Jack (January 2004). ",
      "\"Beginning of Computing and Computer Sciences at the University of Maryland\"",
      " ",
      "(PDF)",
      ". Section 2.3.4: University of Maryland. p.\u00a038. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on June 10, 2011",
      ". Retrieved ",
      "May 23,",
      " 2011",
      ".",
      "CS1 maint: location (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "Stebbens, Alan. ",
      "\"How it all began\"",
      ". Archived from ",
      "the original",
      " on 2016-03-04",
      ". Retrieved ",
      "2011-05-22",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Xerox APL Language and Operations Reference Manual\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"SIGAPL\"",
      ". Sigapl.org",
      ". Retrieved ",
      "June 17,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Fifty Years of BASIC, the Programming Language That Made Computers Personal\"",
      ". ",
      "time.com",
      ". TIME. April 29, 2014",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"MCM Computers M70/M700\"",
      ". ",
      "old-computers.com",
      ". Archived from ",
      "the original",
      " on April 3, 2018",
      ". Retrieved ",
      "April 8,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stachniak, Stachniak (2011). ",
      "Inventing the PC: The MCM/70 Story",
      ". McGill Queens's University Press. ",
      "ISBN",
      "\u00a0",
      "978-0-7735-3852-8",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Miller, Michael (December 17, 2014). ",
      "\"PCs That Paved the Way for the Altair\"",
      ". ",
      "PCMagazine",
      ". Ziff Davis",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"VideoBrain Family Computer\"",
      ", ",
      "Popular Science",
      ", November 1978, advertisement.",
      "\n",
      "\n",
      "^",
      " ",
      "\"A Look at SuperPet\"",
      ". ",
      "COMPUTE! The Journal for Progressive Computing",
      ". Small System Services Inc. December 1981",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Gates, Bill (January 31, 1976). ",
      "\"An Open Letter to Hobbyists\"",
      ". ",
      "Homebrew Computer Club Newsletter",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hui, Roger. ",
      "\"Remembering Ken Iverson\"",
      ". ",
      "keiapl.org",
      ". KEIAPL",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "ACM A.M. Turing Award. ",
      "\"Kenneth E. Iverson \u2013 Citation\"",
      ". ",
      "amturing.acm.org",
      ". ACM",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "ACM SIGPLAN. ",
      "\"APL2: The Early Years\"",
      ". ",
      "www.sigapl.org",
      ". ACM",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Micro APL. ",
      "\"Overview of the APL System\"",
      ". ",
      "www.microapl.co.uk",
      ". Micro APL",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Robertson, Graeme. ",
      "\"A Personal View of APL2010\"",
      ". ",
      "archive.vector.org.uk",
      ". Vector \u2013 Journal of the British APL Association. Archived from ",
      "the original",
      " on April 2, 2015",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Rodriguez, P.; Rojas, J.; Alfonseca, M.; Burgos, J. I. (1989). \"An Expert System in Chemical Synthesis written in APL2/PC\". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "19",
      " (4): 299\u2013303. ",
      "doi",
      ":",
      "10.1145/75144.75185",
      ". ",
      "S2CID",
      "\u00a0",
      "16876053",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "IBM. ",
      "\"APL2: A Programming Language for Problem Solving, Visualization and Database Access\"",
      ". ",
      "www-03.ibm.com",
      ". IBM",
      ". Retrieved ",
      "January 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Falkoff, Adin D. (1991). \"The IBM family of APL systems\". ",
      "IBM Systems Journal",
      ". ",
      "30",
      " (4): 416\u2013432. ",
      "doi",
      ":",
      "10.1147/sj.304.0416",
      ". ",
      "S2CID",
      "\u00a0",
      "19030940",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Pike, Rob (2018-03-25). ",
      "\"Ivy\"",
      ". ",
      "GoDoc",
      ". Archived from ",
      "the original",
      " on 2019-08-13.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Wolfram Language FAQ\"",
      ". Wolfram",
      ". Retrieved ",
      "February 20,",
      " 2020",
      ". ",
      "LISP and APL were two early influences",
      "\n",
      "\n",
      "^",
      " ",
      "Texas Instruments (1977). ",
      "\"TI 745 full page ad: Introducing a New Set of Characters\"",
      ". ",
      "Computerworld",
      ". ",
      "11",
      " (27): 32",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dyalog. ",
      "\"APL Fonts and Keyboards\"",
      ". ",
      "www.dyalog.com",
      ". Dyalog",
      ". Retrieved ",
      "January 19,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Smith, Bob. ",
      "\"NARS2000 Keyboard\"",
      ". ",
      "www.sudleyplace.com",
      ". Bob Smith / NARS2000",
      ". Retrieved ",
      "January 19,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "MicroAPL Ltd. ",
      "\"Introduction to APL \u2013 APL Symbols\"",
      ". ",
      "www.microapl.co.uk",
      ". MicroAPL Ltd",
      ". Retrieved ",
      "January 8,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Brown, James A.; Hawks, Brent; Trimble, Ray (1993). \"Extending the APL character set\". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "24",
      " (1): 41\u201346. ",
      "doi",
      ":",
      "10.1145/166198.166203",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kromberg, Morten. ",
      "\"Unicode Support for APL\"",
      ". ",
      "archive.vector.org.uk",
      ". Vector, Journal of the British APL Association. Archived from ",
      "the original",
      " on January 20, 2015",
      ". Retrieved ",
      "January 8,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hsu, Aaron. ",
      "\"Computer Science Outreach and Education with APL\"",
      ". Dyalog, Ltd",
      ". Retrieved ",
      "July 15,",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dyalog, Inc. APL fonts and keyboards. ",
      "http://www.dyalog.com/apl-font-keyboard.htm",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "MicroAPL. ",
      "\"Operators\"",
      ". ",
      "www.microapl.co.uk",
      ". MicroAPL",
      ". Retrieved ",
      "January 12,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Primitive Functions. ",
      "\"Primitive Functions\"",
      ". ",
      "www.microapl.co.uk/",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Workspace. ",
      "\"The Workspace\"",
      ". ",
      "www.microapl.co.uk",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"example\"",
      ". Catpad.net. Archived from ",
      "the original",
      " on July 8, 2013",
      ". Retrieved ",
      "June 17,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "APL Symbols. ",
      "\"Entering APL Symbols\"",
      ". ",
      "www.microapl.co.uk",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dickey, Lee, A list of APL Transliteration Schemes",
      ", 1993",
      "\n",
      "\n",
      "^",
      " ",
      "Iverson K.E.,\n\"",
      "Notation as a Tool of Thought",
      " ",
      "Archived",
      " 2013-09-20 at the ",
      "Wayback Machine",
      "\", ",
      "Communications of the ACM",
      ", 23: 444-465 (August 1980).",
      "\n",
      "\n",
      "^",
      " ",
      "Batenburg. ",
      "\"APL Efficiency\"",
      ". ",
      "www.ekevanbatenburg.nl",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Vaxman. ",
      "\"APL Great Programming\"",
      " ",
      "(PDF)",
      ". ",
      "www.vaxman.de",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Janko, Wolfgang (May 1987). \"Investigation into the efficiency of using APL for the programming of an inference machine\". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "17",
      " (4): 450\u2013456. ",
      "doi",
      ":",
      "10.1145/384282.28372",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Borealis. ",
      "\"Why APL?\"",
      ". ",
      "www.aplborealis.com",
      ". Retrieved ",
      "January 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Iverson, Kenneth E.",
      " ",
      "\"A Dictionary of APL\"",
      ". ",
      "www.jsoftware.com",
      ". JSoftware; Iverson Estate",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "\"APL concepts\"",
      ". Microapl.co.uk",
      ". Retrieved ",
      "February 3,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Nested array theory\"",
      ". Nial.com. Archived from ",
      "the original",
      " on 2011-07-09",
      ". Retrieved ",
      "February 3,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "\"Programmera i APL\", Bohman, Fr\u00f6berg, ",
      "Studentlitteratur",
      ", ",
      "ISBN",
      "\u00a0",
      "91-44-13162-3",
      "\n",
      "\n",
      "^",
      " ",
      "Iverson, Kenneth E.",
      " ",
      "\"APL Syntax and Semantics\"",
      ". ",
      "www.jsoftware.com",
      ". I. P. Sharp Associates",
      ". Retrieved ",
      "January 11,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dyalog APL/W. ",
      "\"Producing a standalone 'Hello World' program in APL\"",
      ". ",
      "www.youtube.com",
      ". Dyalog-APLtrainer",
      ". Retrieved ",
      "January 11,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "MicroAPL. ",
      "\"APL Primitives\"",
      ". ",
      "www.microapl.co.uk",
      ". MicroAPL",
      ". Retrieved ",
      "January 11,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "NARS2000. ",
      "\"APL Font \u2013 Extra APL Glyphs\"",
      ". ",
      "wiki.nars2000.org",
      ". NARS2000",
      ". Retrieved ",
      "January 11,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fox, Ralph L. ",
      "\"Systematically Random Numbers\"",
      ". ",
      "www.sigapl.org",
      ". SIGAPL",
      ". Retrieved ",
      "January 11,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"2017 Annual Report\"",
      " ",
      "(PDF)",
      ". SimCorp. February 1, 2018",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ". ",
      "Sofia is a front-to-back investment management platform like SimCorp Dimension. ... Sofia is based on the APL coding language just like some parts of SimCorp Dimension.",
      "\n",
      "\n",
      "^",
      " ",
      "Lee, Georges; Lelouche, Ruddy; Meissonnier, Vincent; Zarri, Gian Piero (September 1, 1982). ",
      "\"Using APL in an Artificial Intelligence environment\"",
      ". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "13",
      " (1): 183\u2013191. ",
      "doi",
      ":",
      "10.1145/390006.802242",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fordyce, K.; Sullivan, G. (1985). \"Artificial Intelligence Development Aids\". ",
      "APL Quote Quad",
      ". APL 85 Conf. Proc. (15): 106\u2013113. ",
      "doi",
      ":",
      "10.1145/255315.255347",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Alfonseca, Manuel (July 1990). ",
      "\"Neural networks in APL\"",
      ". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "20",
      " (4): 2\u20136. ",
      "doi",
      ":",
      "10.1145/97811.97816",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kromberg, Morten. ",
      "\"Robot Programming in APL\"",
      ". ",
      "www.dyalog.com/",
      ". Retrieved ",
      "January 6,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Holmes, W N (May 1978). ",
      "\"Is APL a Programming Language?\"",
      ". ",
      "The Computer Journal",
      ". ",
      "21",
      " (2): 128\u2013131. ",
      "doi",
      ":",
      "10.1093/comjnl/21.2.128",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hsu, Aaron (November 18, 2017). ",
      "\"Design Patterns vs. Anti-pattern in APL\"",
      ". ",
      "functionalconf.com",
      ". Retrieved ",
      "2018-04-07",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Magnenat-Thalmann, Nadia; Thalmann, Daniel (1985). ",
      "Computer Animation Theory and Practice",
      ". ",
      "Springer-Verlag",
      ". p.\u00a038. ",
      "ISBN",
      "\u00a0",
      "9784431684336",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ". ",
      "Digital Effects",
      " is another production house that worked on Tron. They used a laser-scanning system to digitize, store and reproduce images. Judson Rosebush, president of Digital Effects, is the primary designer of APL VISION and FORTRAN VISION, two computer animation packages that are currently used.",
      "\n",
      "\n",
      "^",
      " ",
      "Gutsell, Sam (October 17, 2017). ",
      "\"Stormwind Simulator at Dyalog '16\"",
      ". ",
      "www.optima-systems.co.uk",
      ". Optima Systems",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ". ",
      "Stormwind is a [3D boating simulator] that has gained a huge amount of interest in the APL community.",
      "\n",
      "\n",
      "^",
      " ",
      "\"OP-Pohjola ja Tieto hoitivat sovelluksen muutosty\u00f6t sujuvalla yhteisty\u00f6ll\u00e4\"",
      " [Smooth cooperation between ",
      "OP-Pohjola",
      " and Tieto enabled app modification] ",
      "(PDF)",
      ". ",
      "www.tieto.com",
      " (in Finnish). ",
      "Tieto",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ".",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "\n",
      "^",
      " ",
      "\"Vi idag\"",
      " [We today]. ",
      "profdoccare.se",
      " (in Swedish)",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ". ",
      "Through the choice of APL as a technical platform, it is relatively easy to quickly build a solution that can be called a executable prototype (translated from the original)",
      "\n",
      "\n",
      "^",
      " ",
      "Brenner, Charles. ",
      "\"DNA Identification Technology and APL\"",
      ". ",
      "dna-view.com",
      ". Presentation at the 2005 APL User Conference",
      ". Retrieved ",
      "January 9,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Brenner, Charles. ",
      "\"There's DNA Everywhere \u2013 an Opportunity for APL\"",
      ". ",
      "www.youtube.com",
      ". YouTube",
      ". Retrieved ",
      "January 9,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Tips for golfing in APL\"",
      ". ",
      "stackexchange.com",
      ". Retrieved ",
      "April 3,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Awards \u2013 1973 \u2013 Lawrence Breed\"",
      ". Association for Computing Machinery. Archived from ",
      "the original",
      " on April 2, 2012.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Awards \u2013 1973 \u2013 Richard Lathwell\"",
      ". Association for Computing Machinery. Archived from ",
      "the original",
      " on April 2, 2012.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Awards \u2013 1973 \u2013 Roger Moore\"",
      ". Association for Computing Machinery. Archived from ",
      "the original",
      " on April 2, 2012.",
      "\n",
      "\n",
      "^",
      " ",
      "\"IBM 5100\"",
      ". ",
      "old-computers.com",
      ". Archived from ",
      "the original",
      " on April 30, 2018",
      ". Retrieved ",
      "April 8,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Welcome, IBM, to personal computing\"",
      ". ",
      "BYTE",
      ". December 1975. p.\u00a090",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chronology of APL and its Influences on Computer Language Development\"",
      ". ",
      "www.sigapl.org",
      ". ACM",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Larry Breed",
      " (August 2006). ",
      "\"How We Got To APL\\1130\"",
      ". ",
      "Vector (British APL Association)",
      ". ",
      "22",
      " (3). ",
      "ISSN",
      "\u00a0",
      "0955-1433",
      ". Archived from ",
      "the original",
      " on May 12, 2008",
      ". Retrieved ",
      "April 29,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Roger Moore",
      " (2005). ",
      "\"History of I. P. Sharp Associates Timesharing and Network\"",
      ". ",
      "Rogerdmoore.ca",
      ". Roger Moore",
      ". Retrieved ",
      "March 7,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Blumenthal, Marcia (May 18, 1981). ",
      "\"VAX-11s Acquire APL Processor\"",
      ". ",
      "Computerworld",
      ". Retrieved ",
      "April 22,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "\"Kenneth E. Iverson Award for Outstanding Contribution to APL\"",
      ". ",
      "SIGPLAN",
      " Chapter on Array Programming Languages (SIGAPL). Archived from ",
      "the original",
      " on February 26, 2012.",
      "\n",
      "\n",
      "^",
      " ",
      "\"APL2: What's New\"",
      ". ",
      "ibm.com",
      ". ibm",
      ". Retrieved ",
      "April 22,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Dyalog Ltd website\"",
      ". Retrieved ",
      "6 June",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Dyalog at 25\"",
      " ",
      "(PDF)",
      ". ",
      "Vector Magazine",
      ". British APL Association. September 2008",
      ". Retrieved ",
      "April 14,",
      " 2018",
      ".",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "\n",
      "^",
      " ",
      "Kromberg, Morten (22 October 2007). ",
      "\"Arrays of Objects\"",
      " ",
      "(PDF)",
      ". ",
      "Proceedings of the 2007 Symposium on Dynamic Languages",
      ": 20. ",
      "doi",
      ":",
      "10.1145/1297081.1297087",
      ". ",
      "ISBN",
      "\u00a0",
      "9781595938688",
      ". ",
      "S2CID",
      "\u00a0",
      "18484472",
      ". Retrieved ",
      "27 August",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Scholes, John. ",
      "\"D: A functional subset of Dyalog APL\"",
      ". British APL Asscociation.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Dyalog - Prices and Licences\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2016 Iverson Award Recognises Dyalog's CEO and CXO\"",
      ". Retrieved ",
      "6 June",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter\"",
      ". ",
      "NARS2000",
      ". Sudley Place Software",
      ". Retrieved ",
      "July 10,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"APLX has been withdrawn from commercial sale but can be downloaded free of charge\"",
      ". Microapl.com",
      ". Retrieved ",
      "April 14,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"GNU APL\"",
      ". ",
      "directory.fsf.org",
      ". ",
      "Free Software Directory",
      ". Retrieved ",
      "September 28,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stallman, Richard M. ",
      "\"RMS Ber\u00e4ttar\"",
      ". Archived from ",
      "the original",
      " on November 26, 2018",
      ". Retrieved ",
      "April 22,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Budd, Timothy (1988). ",
      "An APL Compiler",
      ". Springer-Verlag. ",
      "ISBN",
      "\u00a0",
      "978-0-387-96643-4",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "SIGAPL. ",
      "\"What is APL?\"",
      ". ",
      "www.sigapl.org",
      ". SIGAPL",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ju, Dz-Ching; Ching, Wai-Mee (1991). \"Exploitation of APL data parallelism on a shared-memory MIMD machine\". ",
      "Newsletter ACM SIGPLAN Notices",
      ". ",
      "26",
      " (7): 61\u201372. ",
      "doi",
      ":",
      "10.1145/109625.109633",
      ". ",
      "S2CID",
      "\u00a0",
      "8584353",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hsu, Aaron W.; Bowman, William J. ",
      "\"Revisiting APL in the Modern Era\"",
      " ",
      "(PDF)",
      ". ",
      "www.cs.princeton.edu",
      ". Indiana University / Princeton",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ching, W.-M.; Ju, D. (1991). ",
      "\"Execution of automatically parallelized APL programs on RP3\"",
      ". ",
      "IBM Journal of Research & Development",
      ". ",
      "35",
      " (5/6): 767\u2013777. ",
      "doi",
      ":",
      "10.1147/rd.355.0767",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Blelloch, Guy E.; Sabot, Gary W. (1990). \"Compiling Collection-Oriented Languages onto Massively Parallel Computers\". ",
      "Journal of Parallel and Distributed Computing",
      ". ",
      "8",
      " (2): 119\u2013134. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.51.5088",
      ". ",
      "doi",
      ":",
      "10.1016/0743-7315(90)90087-6",
      ". ",
      "Collection oriented languages include APL, APL2",
      "\n",
      "\n",
      "^",
      " ",
      "Jendrsczok, Johannes; Hoffmann, Rolf; Ediger, Patrick; Keller, J\u00f6rg. ",
      "\"Implementing APL-like data parallel functions on a GCA machine\"",
      " ",
      "(PDF)",
      ". ",
      "www.fernuni-hagen.de",
      ". Fernuni-Hagen.De. pp.\u00a01\u20136. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on January 22, 2015",
      ". Retrieved ",
      "January 22,",
      " 2015",
      ". ",
      "GCA \u2013 Global Cellular Automation. Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures.",
      "\n",
      "\n",
      "^",
      " ",
      "Brenner of IBM T.J.Watson Research Center, Norman (1984). \"VLSI circuit design using APL with fortran subroutines\". ",
      "Proceedings of the international conference on APL - APL '84",
      ". ",
      "ACM SIGAPL APL Quote Quad",
      ". ",
      "14",
      ". ACM SIGAPL. pp.\u00a077\u201379. ",
      "doi",
      ":",
      "10.1145/800058.801079",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0897911375",
      ". ",
      "S2CID",
      "\u00a0",
      "30863491",
      ". ",
      "APL for interactiveness and ease of coding",
      "\n",
      "\n",
      "^",
      " ",
      "Gamble, D.J.; Hobson, R.F. (1989). \"Towards a graphics/Procedural environment for constructing VLSI module generators\". ",
      "Conference Proceeding IEEE Pacific Rim Conference on Communications, Computers and Signal Processing",
      ". pp.\u00a0606\u2013611. ",
      "doi",
      ":",
      "10.1109/PACRIM.1989.48437",
      ". ",
      "S2CID",
      "\u00a0",
      "7921438",
      ". ",
      "VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display",
      "\n",
      "\n",
      "^",
      " ",
      "Lee, Robert S. (1983). ",
      "\"Two Implementations of APL\"",
      ". ",
      "PC Magazine",
      ". ",
      "2",
      " (5): 379",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "MARTHA and LLAMA. ",
      "\"The APL Computer Language\"",
      ". ",
      "marthallama.org",
      ". MarthaLlama",
      ". Retrieved ",
      "January 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Metzger, Robert; Wen, Zhaofang (2000). ",
      "Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization",
      ". The MIT press. ",
      "ISBN",
      "\u00a0",
      "9780262133685",
      ". Retrieved ",
      "May 6,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Snyder, Lawrence (1982). \"Recognition and Selection of Idioms for Code Optimization\". ",
      "Acta Informatica",
      ". ",
      "17",
      " (3). ",
      "doi",
      ":",
      "10.1007/BF00264357",
      ". ",
      "S2CID",
      "\u00a0",
      "8369972",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Cheng, Feng Sheng (1981). ",
      "\"Idiom matching: an optimization technique for an APL compiler\"",
      ". Iowa State University",
      ". Retrieved ",
      "May 6,",
      " 2018",
      ".",
      " ",
      "Cite journal requires ",
      "|journal=",
      " (",
      "help",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "\"Idiom Recognition\"",
      ". dyalog.com",
      ". Retrieved ",
      "May 6,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Strawn, George O. (March 1977). \"Does APL really need run\u2010time parsing?\". ",
      "Journal of Software: Practice and Experience",
      ". ",
      "7",
      " (2): 193\u2013200. ",
      "doi",
      ":",
      "10.1002/spe.4380070207",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Compiler User Guide\"",
      " ",
      "(PDF)",
      ". ",
      "www.dyalog.com",
      ". Dyalog Ltd",
      ". Retrieved ",
      "May 7,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\n",
      "Driscoll Jr., Graham C.; Orth, Donald L. (November 1986). \"Compiling APL: The Yorktown APL Translator\". ",
      "IBM Journal of Research and Development",
      ". ",
      "30",
      " (6): 583\u2013593. ",
      "doi",
      ":",
      "10.1147/rd.306.0583",
      ". ",
      "S2CID",
      "\u00a0",
      "2299699",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chronology of APL\"",
      ". ",
      "www.sigapl.org",
      ". ACM",
      ". Retrieved ",
      "May 7,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\n",
      "Wai-Mee, Ching (November 1986). \"Program Analysis and Code Generation in an APL/370 Compiler\". ",
      "IBM Journal of Research and Development",
      ". ",
      "30",
      " (6): 594\u2013602. ",
      "doi",
      ":",
      "10.1147/rd.306.0594",
      ". ",
      "S2CID",
      "\u00a0",
      "17306407",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The APEX Project\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup)\"",
      ". Apr 5, 1994.",
      "\n",
      "\n",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      "An APL Machine",
      " (1970 Stanford doctoral dissertation by Philip Abrams)",
      "\n",
      "A Personal History Of APL",
      " (1982 article by ",
      "Michael S. Montalbano",
      ")",
      "\n",
      "McIntyre, Donald B. (1991). ",
      "\"Language as an intellectual tool: From hieroglyphics to APL\"",
      " ",
      "(PDF)",
      ". ",
      "IBM Systems Journal",
      ". ",
      "30",
      " (4): 554\u2013581. ",
      "doi",
      ":",
      "10.1147/sj.304.0554",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on May 4, 2006.",
      "\n",
      "Iverson, Kenneth E.",
      " (1991). ",
      "\"A Personal view of APL\"",
      " ",
      "(PDF)",
      ". ",
      "IBM Systems Journal",
      ". ",
      "30",
      " (4): 582\u2013593. ",
      "doi",
      ":",
      "10.1147/sj.304.0582",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on February 27, 2008.",
      "\n",
      "A Programming Language",
      " by ",
      "Kenneth E. Iverson",
      "\n",
      "APL in Exposition",
      " by ",
      "Kenneth E. Iverson",
      "\n",
      "Brooks, Frederick P.; Kenneth Iverson (1965). ",
      "Automatic Data Processing, System/360 Edition",
      ". ",
      "ISBN",
      "\u00a0",
      "0-471-10605-4",
      ".",
      "\n",
      "Askoolum, Ajay (August 2006). ",
      "System Building with APL + Win",
      ". Wiley. ",
      "ISBN",
      "\u00a0",
      "978-0-470-03020-2",
      ".",
      "\n",
      "Falkoff, Adin D.; ",
      "Iverson, Kenneth E.",
      "; ",
      "Sussenguth, Edward H.",
      " (1964). ",
      "\"A Formal Description of System/360\"",
      " ",
      "(PDF)",
      ". ",
      "IBM Systems Journal",
      ". ",
      "3",
      " (2): 198\u2013261. ",
      "doi",
      ":",
      "10.1147/sj.32.0198",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on February 27, 2008.",
      "\n",
      "History of Programming Languages",
      ", chapter 14",
      "[",
      "clarification needed",
      "]",
      "\n",
      "Banon, Gerald Jean Francis (1989). ",
      "Bases da Computacao Grafica",
      ". Rio de Janeiro: Campus. p.\u00a0141.",
      "\n",
      "LePage, Wilbur R. (1978). ",
      "Applied A.P.L. Programming",
      ". Prentice Hall.",
      "\n",
      "Mougin, Philippe; Ducasse, Stephane (November 2003). ",
      "\"OOPAL: Integrating Array Programming in ObjectOriented Programming\"",
      " ",
      "(PDF)",
      ". ",
      "Proceeding OOPSLA '03 Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications",
      ". ",
      "38",
      " (11): 65\u201377. ",
      "doi",
      ":",
      "10.1145/949343.949312",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on November 14, 2006.",
      "\n",
      "Dyalog Limited (September 2006). ",
      "An Introduction to Object Oriented Programming For APL Programmers",
      " ",
      "(PDF)",
      ". Dyalog Limited. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on October 4, 2007.",
      "\n",
      "Shustek, Len (October 10, 2012). ",
      "\"The APL Programming Language Source Code\"",
      ". ",
      "Computer History Museum",
      " (CHM). ",
      "Archived",
      " from the original on September 6, 2017",
      ". Retrieved ",
      "September 6,",
      " 2017",
      ".",
      "\n",
      "Svoboda, Anton\u00edn",
      "; White, Donnamaie E. (2016) [2012, 1985, 1979-08-01]. ",
      "Advanced Logical Circuit Design Techniques",
      " ",
      "(PDF)",
      " (retyped electronic reissue ed.). ",
      "Garland STPM Press",
      " (original issue) / WhitePubs Enterprises, Inc. (reissue). ",
      "ISBN",
      "\u00a0",
      "978-0-8240-7014-4",
      ". ",
      "LCCN",
      "\u00a0",
      "78-31384",
      ". ",
      "Archived",
      " ",
      "(PDF)",
      " from the original on 2017-04-14",
      ". Retrieved ",
      "2017-04-15",
      ".",
      " ",
      "[1]",
      " ",
      "[2]",
      "\n",
      "Video",
      "[",
      "edit",
      "]",
      "\n",
      "The Origins of APL",
      " - a 1974 talk show style interview with the original developers of APL.",
      "\n",
      "APL demonstration",
      " - a 1975 live demonstration of APL by ",
      "Professor Bob Spence",
      ", ",
      "Imperial College London",
      ".",
      "\n",
      "Conway's Game Of Life in APL",
      " - a 2009 tutorial by John Scholes of Dyalog Ltd. which implements ",
      "Conway's Game of Life",
      " in a single line of APL.",
      "\n",
      "50 Years of APL",
      " - a 2009 introduction to APL by Graeme Robertson.",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "This article's ",
      "use of ",
      "external links",
      " may not follow Wikipedia's policies or guidelines",
      ".",
      " Please ",
      "improve this article",
      " by removing ",
      "excessive",
      " or ",
      "inappropriate",
      " external links, and converting useful links where appropriate into ",
      "footnote references",
      ".",
      "  ",
      "(",
      "August 2020",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikimedia Commons has media related to ",
      "APL (programming language)",
      ".",
      "\n",
      "\n",
      "Online resources",
      "[",
      "edit",
      "]",
      "\n",
      "TryAPL.org",
      ", an online APL primer",
      "\n",
      "APL Wiki",
      "\n",
      "APL",
      " at ",
      "Curlie",
      "\n",
      "APL2C",
      ", a source of links to APL compilers",
      "\n",
      "Providers",
      "[",
      "edit",
      "]",
      "\n",
      "IBM APL2",
      "\n",
      "Dyalog APL",
      "\n",
      "APLX",
      "\n",
      "APL2000",
      "\n",
      "NARS2000",
      "\n",
      "GNU APL",
      "\n",
      "OpenAPL",
      "\n",
      "User groups and societies",
      "[",
      "edit",
      "]",
      "\n",
      "Finland",
      ": ",
      "Finnish APL Association (FinnAPL)",
      "\n",
      "France",
      ": ",
      "APL et J",
      "\n",
      "Germany",
      ": ",
      "APL-Germany e.V.",
      "\n",
      "Japan",
      ": ",
      "Japan APL Association (JAPLA)",
      "\n",
      "Sweden",
      ": ",
      "Swedish APL User Group (SwedAPL)",
      "\n",
      "Switzerland",
      ": ",
      "Swiss APL User Group (SAUG)",
      "\n",
      "United Kingdom",
      ": ",
      "The British APL Association",
      "\n",
      "United States",
      ": ",
      "ACM",
      " ",
      "SIGPLAN chapter on Array Programming Languages (SIGAPL)",
      "\n",
      "v",
      "t",
      "e",
      "APL programming language",
      "Features",
      "\n",
      "APL syntax and symbols",
      "\n",
      "Direct function",
      " (dfn)",
      "\n",
      "EBCDIC code page",
      "\n",
      "Iverson bracket",
      "\n",
      "Rank",
      "\n",
      "Shared Variables",
      "\n",
      "Implementations",
      "Major",
      "\n",
      "Dyalog APL",
      "\n",
      "IBM APL2",
      "\n",
      "APL2000",
      "\n",
      "SHARP APL",
      "\n",
      "APLX",
      "\n",
      "NARS2000",
      "\n",
      "Dialects",
      "\n",
      "A+",
      "\n",
      "APLNext",
      "\n",
      "ELI",
      "\n",
      "GNU APL",
      "\n",
      "J",
      "\n",
      "K",
      ", ",
      "Q",
      "; ",
      "kdb+",
      "\n",
      "LYaPAS",
      "\n",
      "Polymorphic Programming Language",
      " (PPL)",
      "\n",
      "Community",
      "Professional",
      "associations",
      "\n",
      "Association for Computing Machinery",
      ": SIGAPL",
      "\n",
      "British APL Association",
      "\n",
      "Organizations",
      "Business",
      "\n",
      "Analogic Corporation",
      "\n",
      "CompuServe",
      "\n",
      "Digital Equipment Corporation",
      " (DEC)",
      "\n",
      "DNA Systems",
      "\n",
      "Dyalog Ltd.",
      "\n",
      "IBM",
      "\n",
      "I. P. Sharp Associates",
      "\n",
      "Kx Systems",
      "\n",
      "Micro Computer Machines",
      " (MCM)",
      "\n",
      "Science Research Associates",
      "\n",
      "Scientific Time Sharing Corporation",
      " (STSC)",
      "\n",
      "Soliton Incorporated",
      "\n",
      "Telecompute Integrated Systems, Inc.",
      "\n",
      "Time Sharing Resources (TSR)",
      "\n",
      "Education",
      "\n",
      "Carnegie Mellon University",
      " (CMU)",
      "\n",
      "University of Maryland",
      "\n",
      "People",
      "\n",
      "Phil Abrams",
      "\n",
      "Bob Bernecky",
      "\n",
      "Larry Breed",
      "\n",
      "Charles Brenner",
      "\n",
      "Fred Brooks",
      "\n",
      "Jim Brown",
      "\n",
      "Adin Falkoff",
      "\n",
      "Patrick E. Hagerty",
      "\n",
      "Herbert Hellerman",
      "\n",
      "Roger Hui",
      "\n",
      "Kenneth E. Iverson",
      "\n",
      "Dick Lathwell",
      "\n",
      "Eugene McDonnell",
      "\n",
      "Robert Metzger",
      "\n",
      "Roger Moore",
      "\n",
      "Alan Perlis",
      "\n",
      "John Scholes",
      "\n",
      "J. Henri Schueler",
      "\n",
      "Bob Smith",
      "\n",
      "Edward H. Sussenguth",
      " Jr.",
      "\n",
      "Arthur Whitney",
      "\n",
      "William Yerazunis",
      "\n",
      "Rodnay Zaks",
      "\n",
      "Other",
      "\n",
      "Iverson Award",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Commons",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "ISO",
      " standards ",
      ".mw-parser-output .nobold{font-weight:normal}",
      "by standard number",
      "List of ",
      "ISO standards",
      "\u00a0/ ",
      "ISO romanizations",
      "\u00a0/ ",
      "IEC standards",
      "1\u20139999",
      "\n",
      "1",
      "\n",
      "2",
      "\n",
      "3",
      "\n",
      "4",
      "\n",
      "5",
      "\n",
      "6",
      "\n",
      "7",
      "\n",
      "9",
      "\n",
      "16",
      "\n",
      "17",
      "\n",
      "31",
      "\n",
      "-0",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-4",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "-7",
      "\n",
      "-8",
      "\n",
      "-9",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-13",
      "\n",
      "128",
      "\n",
      "216",
      "\n",
      "217",
      "\n",
      "226",
      "\n",
      "228",
      "\n",
      "233",
      "\n",
      "259",
      "\n",
      "269",
      "\n",
      "302",
      "\n",
      "306",
      "\n",
      "361",
      "\n",
      "428",
      "\n",
      "500",
      "\n",
      "518",
      "\n",
      "519",
      "\n",
      "639",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "646",
      "\n",
      "657",
      "\n",
      "668",
      "\n",
      "690",
      "\n",
      "704",
      "\n",
      "732",
      "\n",
      "764",
      "\n",
      "838",
      "\n",
      "843",
      "\n",
      "860",
      "\n",
      "898",
      "\n",
      "965",
      "\n",
      "999",
      "\n",
      "1000",
      "\n",
      "1004",
      "\n",
      "1007",
      "\n",
      "1073-1",
      "\n",
      "1155",
      "\n",
      "1413",
      "\n",
      "1538",
      "\n",
      "1629",
      "\n",
      "1745",
      "\n",
      "1989",
      "\n",
      "2014",
      "\n",
      "2015",
      "\n",
      "2022",
      "\n",
      "2033",
      "\n",
      "2047",
      "\n",
      "2108",
      "\n",
      "2145",
      "\n",
      "2146",
      "\n",
      "2240",
      "\n",
      "2281",
      "\n",
      "2533",
      "\n",
      "2709",
      "\n",
      "2711",
      "\n",
      "2720",
      "\n",
      "2788",
      "\n",
      "2848",
      "\n",
      "2852",
      "\n",
      "3029",
      "\n",
      "3103",
      "\n",
      "3166",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "3297",
      "\n",
      "3307",
      "\n",
      "3601",
      "\n",
      "3602",
      "\n",
      "3864",
      "\n",
      "3901",
      "\n",
      "3950",
      "\n",
      "3977",
      "\n",
      "4031",
      "\n",
      "4157",
      "\n",
      "4165",
      "\n",
      "4217",
      "\n",
      "4909",
      "\n",
      "5218",
      "\n",
      "5426",
      "\n",
      "5427",
      "\n",
      "5428",
      "\n",
      "5725",
      "\n",
      "5775",
      "\n",
      "5776",
      "\n",
      "5800",
      "\n",
      "5807",
      "\n",
      "5964",
      "\n",
      "6166",
      "\n",
      "6344",
      "\n",
      "6346",
      "\n",
      "6385",
      "\n",
      "6425",
      "\n",
      "6429",
      "\n",
      "6438",
      "\n",
      "6523",
      "\n",
      "6709",
      "\n",
      "6943",
      "\n",
      "7001",
      "\n",
      "7002",
      "\n",
      "7010",
      "\n",
      "7027",
      "\n",
      "7064",
      "\n",
      "7098",
      "\n",
      "7185",
      "\n",
      "7200",
      "\n",
      "7498",
      "\n",
      "-1",
      "\n",
      "7637",
      "\n",
      "7736",
      "\n",
      "7810",
      "\n",
      "7811",
      "\n",
      "7812",
      "\n",
      "7813",
      "\n",
      "7816",
      "\n",
      "7942",
      "\n",
      "8000",
      "\n",
      "8093",
      "\n",
      "8178",
      "\n",
      "8217",
      "\n",
      "8373",
      "\n",
      "8501-1",
      "\n",
      "8571",
      "\n",
      "8583",
      "\n",
      "8601",
      "\n",
      "8613",
      "\n",
      "8632",
      "\n",
      "8651",
      "\n",
      "8652",
      "\n",
      "8691",
      "\n",
      "8805/8806",
      "\n",
      "8807",
      "\n",
      "8820-5",
      "\n",
      "8859",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-4",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "-7",
      "\n",
      "-8",
      "\n",
      "-8-I",
      "\n",
      "-9",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-13",
      "\n",
      "-14",
      "\n",
      "-15",
      "\n",
      "-16",
      "\n",
      "8879",
      "\n",
      "9000/9001",
      "\n",
      "9036",
      "\n",
      "9075",
      "\n",
      "9126",
      "\n",
      "9141",
      "\n",
      "9227",
      "\n",
      "9241",
      "\n",
      "9293",
      "\n",
      "9314",
      "\n",
      "9362",
      "\n",
      "9407",
      "\n",
      "9506",
      "\n",
      "9529",
      "\n",
      "9564",
      "\n",
      "9592/9593",
      "\n",
      "9594",
      "\n",
      "9660",
      "\n",
      "9797-1",
      "\n",
      "9897",
      "\n",
      "9899",
      "\n",
      "9945",
      "\n",
      "9984",
      "\n",
      "9985",
      "\n",
      "9995",
      "\n",
      "10000\u201319999",
      "\n",
      "10005",
      "\n",
      "10006",
      "\n",
      "10007",
      "\n",
      "10116",
      "\n",
      "10118-3",
      "\n",
      "10160",
      "\n",
      "10161",
      "\n",
      "10165",
      "\n",
      "10179",
      "\n",
      "10206",
      "\n",
      "10218",
      "\n",
      "10303",
      "\n",
      "-11",
      "\n",
      "-21",
      "\n",
      "-22",
      "\n",
      "-28",
      "\n",
      "-238",
      "\n",
      "10383",
      "\n",
      "10487",
      "\n",
      "10585",
      "\n",
      "10589",
      "\n",
      "10646",
      "\n",
      "10664",
      "\n",
      "10746",
      "\n",
      "10861",
      "\n",
      "10957",
      "\n",
      "10962",
      "\n",
      "10967",
      "\n",
      "11073",
      "\n",
      "11170",
      "\n",
      "11179",
      "\n",
      "11404",
      "\n",
      "11544",
      "\n",
      "11783",
      "\n",
      "11784",
      "\n",
      "11785",
      "\n",
      "11801",
      "\n",
      "11889",
      "\n",
      "11898",
      "\n",
      "11940",
      " (",
      "-2",
      ")",
      "\n",
      "11941",
      "\n",
      "11941 (TR)",
      "\n",
      "11992",
      "\n",
      "12006",
      "\n",
      "12182",
      "\n",
      "12207",
      "\n",
      "12234-2",
      "\n",
      "13211",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "13216",
      "\n",
      "13250",
      "\n",
      "13399",
      "\n",
      "13406-2",
      "\n",
      "13450",
      "\n",
      "13485",
      "\n",
      "13490",
      "\n",
      "13567",
      "\n",
      "13568",
      "\n",
      "13584",
      "\n",
      "13616",
      "\n",
      "14000",
      "\n",
      "14031",
      "\n",
      "14224",
      "\n",
      "14289",
      "\n",
      "14396",
      "\n",
      "14443",
      "\n",
      "14496",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-6",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-14",
      "\n",
      "-17",
      "\n",
      "-20",
      "\n",
      "14644",
      "\n",
      "14649",
      "\n",
      "14651",
      "\n",
      "14698",
      "\n",
      "14750",
      "\n",
      "14764",
      "\n",
      "14882",
      "\n",
      "14971",
      "\n",
      "15022",
      "\n",
      "15189",
      "\n",
      "15288",
      "\n",
      "15291",
      "\n",
      "15292",
      "\n",
      "15398",
      "\n",
      "15408",
      "\n",
      "15444",
      "\n",
      "-3",
      "\n",
      "15445",
      "\n",
      "15438",
      "\n",
      "15504",
      "\n",
      "15511",
      "\n",
      "15686",
      "\n",
      "15693",
      "\n",
      "15706",
      "\n",
      "-2",
      "\n",
      "15707",
      "\n",
      "15897",
      "\n",
      "15919",
      "\n",
      "15924",
      "\n",
      "15926",
      "\n",
      "15926 WIP",
      "\n",
      "15930",
      "\n",
      "16023",
      "\n",
      "16262",
      "\n",
      "16355-1",
      "\n",
      "16612-2",
      "\n",
      "16750",
      "\n",
      "16949 (TS)",
      "\n",
      "17024",
      "\n",
      "17025",
      "\n",
      "17100",
      "\n",
      "17203",
      "\n",
      "17369",
      "\n",
      "17442",
      "\n",
      "17799",
      "\n",
      "18000",
      "\n",
      "18004",
      "\n",
      "18014",
      "\n",
      "18245",
      "\n",
      "18629",
      "\n",
      "18916",
      "\n",
      "19005",
      "\n",
      "19011",
      "\n",
      "19092",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "19114",
      "\n",
      "19115",
      "\n",
      "19125",
      "\n",
      "19136",
      "\n",
      "19407",
      "\n",
      "19439",
      "\n",
      "19500",
      "\n",
      "19501",
      "\n",
      "19502",
      "\n",
      "19503",
      "\n",
      "19505",
      "\n",
      "19506",
      "\n",
      "19507",
      "\n",
      "19508",
      "\n",
      "19509",
      "\n",
      "19510",
      "\n",
      "19600",
      "\n",
      "19752",
      "\n",
      "19757",
      "\n",
      "19770",
      "\n",
      "19775-1",
      "\n",
      "19794-5",
      "\n",
      "19831",
      "\n",
      "20000+",
      "\n",
      "20000",
      "\n",
      "20022",
      "\n",
      "20121",
      "\n",
      "20400",
      "\n",
      "21000",
      "\n",
      "21047",
      "\n",
      "21500",
      "\n",
      "21827",
      "\n",
      "22000",
      "\n",
      "22300",
      "\n",
      "22395",
      "\n",
      "23270",
      "\n",
      "23271",
      "\n",
      "23360",
      "\n",
      "24517",
      "\n",
      "24613",
      "\n",
      "24617",
      "\n",
      "24707",
      "\n",
      "25178",
      "\n",
      "25964",
      "\n",
      "26000",
      "\n",
      "26262",
      "\n",
      "26300",
      "\n",
      "26324",
      "\n",
      "27000 series",
      "\n",
      "27000",
      "\n",
      "27001",
      "\n",
      "27002",
      "\n",
      "27005",
      "\n",
      "27006",
      "\n",
      "27729",
      "\n",
      "28000",
      "\n",
      "29110",
      "\n",
      "29148",
      "\n",
      "29199-2",
      "\n",
      "29500",
      "\n",
      "30170",
      "\n",
      "31000",
      "\n",
      "32000",
      "\n",
      "37001",
      "\n",
      "38500",
      "\n",
      "40500",
      "\n",
      "42010",
      "\n",
      "45001",
      "\n",
      "50001",
      "\n",
      "55000",
      "\n",
      "80000",
      "\n",
      "-1",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "List of International Electrotechnical Commission standards",
      "IEC standards",
      "\n",
      "IEC 60027",
      "\n",
      "IEC 60034",
      "\n",
      "IEC 60038",
      "\n",
      "IEC 60062",
      "\n",
      "IEC 60063",
      "\n",
      "IEC 60068",
      "\n",
      "IEC 60112",
      "\n",
      "IEC 60228",
      "\n",
      "IEC 60269",
      "\n",
      "IEC 60297",
      "\n",
      "IEC 60309",
      "\n",
      "IEC 60320",
      "\n",
      "IEC 60364",
      "\n",
      "IEC 60446",
      "\n",
      "IEC 60559",
      "\n",
      "IEC 60601",
      "\n",
      "IEC 60870",
      "\n",
      "IEC 60870-5",
      "\n",
      "IEC 60870-6",
      "\n",
      "IEC 60906-1",
      "\n",
      "IEC 60908",
      "\n",
      "IEC 60929",
      "\n",
      "IEC 60958",
      "\n",
      "AES3",
      "\n",
      "S/PDIF",
      "\n",
      "IEC 61030",
      "\n",
      "IEC 61131",
      "\n",
      "IEC 61131-3",
      "\n",
      "IEC 61131-9",
      "\n",
      "IEC 61158",
      "\n",
      "IEC 61162",
      "\n",
      "IEC 61334",
      "\n",
      "IEC 61346",
      "\n",
      "IEC 61355",
      "\n",
      "IEC 61360",
      "\n",
      "IEC 61400",
      "\n",
      "IEC 61499",
      "\n",
      "IEC 61508",
      "\n",
      "IEC 61511",
      "\n",
      "IEC 61784",
      "\n",
      "IEC 61850",
      "\n",
      "IEC 61851",
      "\n",
      "IEC 61883",
      "\n",
      "IEC 61960",
      "\n",
      "IEC 61968",
      "\n",
      "IEC 61970",
      "\n",
      "IEC 62014-4",
      "\n",
      "IEC 62026",
      "\n",
      "IEC 62056",
      "\n",
      "IEC 62061",
      "\n",
      "IEC 62196",
      "\n",
      "IEC 62262",
      "\n",
      "IEC 62264",
      "\n",
      "IEC 62304",
      "\n",
      "IEC 62325",
      "\n",
      "IEC 62351",
      "\n",
      "IEC 62365",
      "\n",
      "IEC 62366",
      "\n",
      "IEC 62379",
      "\n",
      "IEC 62386",
      "\n",
      "IEC 62455",
      "\n",
      "IEC 62680",
      "\n",
      "IEC 62682",
      "\n",
      "IEC 62700",
      "\n",
      "IEC 63110",
      "\n",
      "IEC 63119",
      "\n",
      "ISO/IEC standards",
      "\n",
      "ISO/IEC 646",
      "\n",
      "ISO/IEC 2022",
      "\n",
      "ISO/IEC 4909",
      "\n",
      "ISO/IEC 5218",
      "\n",
      "ISO/IEC 6429",
      "\n",
      "ISO/IEC 6523",
      "\n",
      "ISO/IEC 7810",
      "\n",
      "ISO/IEC 7811",
      "\n",
      "ISO/IEC 7812",
      "\n",
      "ISO/IEC 7813",
      "\n",
      "ISO/IEC 7816",
      "\n",
      "ISO/IEC 7942",
      "\n",
      "ISO/IEC 8613",
      "\n",
      "ISO/IEC 8632",
      "\n",
      "ISO/IEC 8652",
      "\n",
      "ISO/IEC 8859",
      "\n",
      "ISO/IEC 9126",
      "\n",
      "ISO/IEC 9293",
      "\n",
      "ISO/IEC 9592",
      "\n",
      "ISO/IEC 9593",
      "\n",
      "ISO/IEC 9899",
      "\n",
      "ISO/IEC 9945",
      "\n",
      "ISO/IEC 9995",
      "\n",
      "ISO/IEC 10021",
      "\n",
      "ISO/IEC 10116",
      "\n",
      "ISO/IEC 10165",
      "\n",
      "ISO/IEC 10179",
      "\n",
      "ISO/IEC 10646",
      "\n",
      "ISO/IEC 10967",
      "\n",
      "ISO/IEC 11172",
      "\n",
      "ISO/IEC 11179",
      "\n",
      "ISO/IEC 11404",
      "\n",
      "ISO/IEC 11544",
      "\n",
      "ISO/IEC 11801",
      "\n",
      "ISO/IEC 12207",
      "\n",
      "ISO/IEC 13250",
      "\n",
      "ISO/IEC 13346",
      "\n",
      "ISO/IEC 13522-5",
      "\n",
      "ISO/IEC 13568",
      "\n",
      "ISO/IEC 13818",
      "\n",
      "ISO/IEC 14443",
      "\n",
      "ISO/IEC 14496",
      "\n",
      "ISO/IEC 14882",
      "\n",
      "ISO/IEC 15288",
      "\n",
      "ISO/IEC 15291",
      "\n",
      "ISO/IEC 15408",
      "\n",
      "ISO/IEC 15444",
      "\n",
      "ISO/IEC 15445",
      "\n",
      "ISO/IEC 15504",
      "\n",
      "ISO/IEC 15511",
      "\n",
      "ISO/IEC 15693",
      "\n",
      "ISO/IEC 15897",
      "\n",
      "ISO/IEC 15938",
      "\n",
      "ISO/IEC 16262",
      "\n",
      "ISO/IEC 17024",
      "\n",
      "ISO/IEC 17025",
      "\n",
      "ISO/IEC 18000",
      "\n",
      "ISO/IEC 18004",
      "\n",
      "ISO/IEC 18014",
      "\n",
      "ISO/IEC 19752",
      "\n",
      "ISO/IEC 19757",
      "\n",
      "ISO/IEC 19770",
      "\n",
      "ISO/IEC 19788",
      "\n",
      "ISO/IEC 20000",
      "\n",
      "ISO/IEC 21000",
      "\n",
      "ISO/IEC 21827",
      "\n",
      "ISO/IEC 23000",
      "\n",
      "ISO/IEC 23003",
      "\n",
      "ISO/IEC 23008",
      "\n",
      "ISO/IEC 23270",
      "\n",
      "ISO/IEC 23360",
      "\n",
      "ISO/IEC 24707",
      "\n",
      "ISO/IEC 24727",
      "\n",
      "ISO/IEC 24744",
      "\n",
      "ISO/IEC 24752",
      "\n",
      "ISO/IEC 26300",
      "\n",
      "ISO/IEC 27000",
      "\n",
      "ISO/IEC 27000-series",
      "\n",
      "ISO/IEC 27002",
      "\n",
      "ISO/IEC 27040",
      "\n",
      "ISO/IEC 29119",
      "\n",
      "ISO/IEC 33001",
      "\n",
      "ISO/IEC 38500",
      "\n",
      "ISO/IEC 42010",
      "\n",
      "ISO/IEC 80000",
      "\n",
      "Related",
      "\n",
      "International Electrotechnical Commission",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=APL_(programming_language)&oldid=982545121",
      "\""
    ],
    "lastUpdated": " 8 October 2020, at 20:25"
  },
  {
    "url": "https://en.wikipedia.org/wiki/C%2B%2B",
    "title": "C++",
    "text": [
      "General-purpose programming language",
      "\n",
      "\"CXX\" redirects here. For other uses, see ",
      "CXX (disambiguation)",
      ".",
      "\n",
      "\n\n",
      "\n",
      "C++",
      "The C++ logo endorsed by Standard C++",
      "Paradigms",
      "Multi-paradigm",
      ": ",
      "procedural",
      ", ",
      "functional",
      ", ",
      "object-oriented",
      ", ",
      "generic",
      ", ",
      "modular",
      "Family",
      "C",
      "Designed\u00a0by",
      "Bjarne Stroustrup",
      "Developer",
      "ISO/IEC JTC1 (Joint Technical Committee 1) / SC22 (Subcommittee 22) / WG21 (Working Group 21)",
      "First\u00a0appeared",
      "1985",
      "; 35\u00a0years ago",
      "\u00a0(",
      "1985",
      ")",
      "Stable release",
      "C++17 ",
      "(ISO/IEC 14882:2017)",
      "\n   / 1\u00a0December 2017",
      "; 2\u00a0years ago",
      "\u00a0(",
      "2017-12-01",
      ")",
      "Preview release",
      "C++20\n   ",
      "\n",
      "Typing discipline",
      "Static",
      ", ",
      "nominative",
      ", ",
      "partially inferred",
      "OS",
      "Most major",
      "Filename extensions",
      ".C, .cc, .cpp, .cxx, ",
      ".c++",
      ", .h, .hh, .hpp, .hxx, ",
      ".h++",
      "Website",
      "isocpp",
      ".org",
      "Major ",
      "implementations",
      "GCC",
      ",  ",
      "LLVM Clang",
      ", ",
      "Microsoft Visual C++",
      ", ",
      "Embarcadero C++Builder",
      ", ",
      "Intel C++ Compiler",
      ", ",
      "IBM XL C++",
      ", ",
      "EDG",
      "Influenced by",
      "Ada",
      ",",
      "[1]",
      " ",
      "ALGOL 68",
      ", ",
      "C",
      ", ",
      "CLU",
      ",",
      "[1]",
      " ",
      "ML",
      ", ",
      "Mesa",
      ",",
      "[1]",
      " ",
      "Modula-2",
      ",",
      "[1]",
      " ",
      "Simula",
      ", ",
      "Smalltalk",
      "[1]",
      "Influenced",
      "Ada 95",
      ", ",
      "C#",
      ",",
      "[2]",
      " ",
      "C99",
      ", ",
      "Chapel",
      ",",
      "[3]",
      " ",
      "Clojure",
      ",",
      "[4]",
      " ",
      "D",
      ", ",
      "Java",
      ",",
      "[5]",
      " ",
      "JS++",
      ",",
      "[6]",
      " ",
      "Lua",
      ", ",
      "Nim",
      ",",
      "[7]",
      " ",
      "Perl",
      ", ",
      "PHP",
      ", ",
      "Python",
      ",",
      "[8]",
      " ",
      "Rust",
      ", ",
      "Seed7",
      "\n",
      " ",
      "C++ Programming",
      " at Wikibooks",
      "\n",
      "\n",
      "C++",
      " (",
      "/",
      "\u02cc",
      "s",
      "i\u02d0",
      "\u02cc",
      "p",
      "l",
      "\u028c",
      "s",
      "\u02c8",
      "p",
      "l",
      "\u028c",
      "s",
      "/",
      ") is a ",
      "general-purpose programming language",
      " created by ",
      "Bjarne Stroustrup",
      " as an extension of the ",
      "C programming language",
      ", or \"C with ",
      "Classes",
      "\". The language has expanded significantly over time, and modern C++ now has ",
      "object-oriented",
      ", ",
      "generic",
      ", and ",
      "functional",
      " features in addition to facilities for ",
      "low-level",
      " ",
      "memory",
      " manipulation. It is almost always implemented as a ",
      "compiled language",
      ", and many vendors provide ",
      "C++ compilers",
      ", including the ",
      "Free Software Foundation",
      ", ",
      "LLVM",
      ", ",
      "Microsoft",
      ", ",
      "Intel",
      ", ",
      "Oracle",
      ", and ",
      "IBM",
      ", so it is available on many platforms.",
      "[9]",
      "\n",
      "C++ was designed with a bias toward ",
      "system programming",
      " and ",
      "embedded",
      ", resource-constrained software and large systems, with ",
      "performance",
      ", efficiency, and flexibility of use as its design highlights.",
      "[10]",
      " C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,",
      "[10]",
      " including ",
      "desktop applications",
      ", ",
      "video games",
      ", ",
      "servers",
      " (e.g. ",
      "e-commerce",
      ", ",
      "Web search",
      ", or ",
      "SQL",
      " servers), and performance-critical applications (e.g. ",
      "telephone switches",
      " or ",
      "space probes",
      ").",
      "[11]",
      "\n",
      "C++ is standardized by the ",
      "International Organization for Standardization",
      " (ISO), with the latest standard version ratified and published by ISO in December 2017 as ",
      "ISO/IEC 14882:2017",
      " (informally known as ",
      "C++17",
      ").",
      "[12]",
      " The C++ programming language was initially standardized in 1998 as ",
      "ISO/IEC 14882:1998",
      ", which was then amended by the ",
      "C++03",
      ", ",
      "C++11",
      " and ",
      "C++14",
      " standards. The current ",
      "C++17",
      " standard supersedes these with new features and an enlarged ",
      "standard library",
      ".  Before the initial standardization in 1998, C++ was developed by Danish computer scientist ",
      "Bjarne Stroustrup",
      " at ",
      "Bell Labs",
      " since 1979 as an extension of the ",
      "C language",
      "; he wanted an efficient and flexible language similar to C that also provided ",
      "high-level features",
      " for program organization.",
      "[13]",
      " Since 2012, C++ is on a three-year release schedule,",
      "[14]",
      " with ",
      "C++20",
      " the next planned standard (and then ",
      "C++23",
      ").",
      "[15]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "History",
      "\n",
      "\n",
      "1.1",
      " ",
      "Etymology",
      "\n",
      "1.2",
      " ",
      "Philosophy",
      "\n",
      "1.3",
      " ",
      "Standardization",
      "\n",
      "\n",
      "\n",
      "2",
      " ",
      "Language",
      "\n",
      "\n",
      "2.1",
      " ",
      "Object storage",
      "\n",
      "\n",
      "2.1.1",
      " ",
      "Static storage duration objects",
      "\n",
      "2.1.2",
      " ",
      "Thread storage duration objects",
      "\n",
      "2.1.3",
      " ",
      "Automatic storage duration objects",
      "\n",
      "2.1.4",
      " ",
      "Dynamic storage duration objects",
      "\n",
      "\n",
      "\n",
      "2.2",
      " ",
      "Templates",
      "\n",
      "2.3",
      " ",
      "Objects",
      "\n",
      "\n",
      "2.3.1",
      " ",
      "Encapsulation",
      "\n",
      "2.3.2",
      " ",
      "Inheritance",
      "\n",
      "\n",
      "\n",
      "2.4",
      " ",
      "Operators and operator overloading",
      "\n",
      "2.5",
      " ",
      "Polymorphism",
      "\n",
      "\n",
      "2.5.1",
      " ",
      "Static polymorphism",
      "\n",
      "2.5.2",
      " ",
      "Dynamic polymorphism",
      "\n",
      "\n",
      "2.5.2.1",
      " ",
      "Inheritance",
      "\n",
      "2.5.2.2",
      " ",
      "Virtual member functions",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "2.6",
      " ",
      "Lambda expressions",
      "\n",
      "2.7",
      " ",
      "Exception handling",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Standard library",
      "\n",
      "4",
      " ",
      "C++ Core Guidelines",
      "\n",
      "5",
      " ",
      "Compatibility",
      "\n",
      "\n",
      "5.1",
      " ",
      "With C",
      "\n",
      "\n",
      "\n",
      "6",
      " ",
      "Criticism",
      "\n",
      "7",
      " ",
      "See also",
      "\n",
      "8",
      " ",
      "References",
      "\n",
      "9",
      " ",
      "Further reading",
      "\n",
      "10",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office c. 2000",
      "\n",
      "In 1979, ",
      "Bjarne Stroustrup",
      ", a Danish ",
      "computer scientist",
      ", began work on \"",
      "C with ",
      "Classes",
      "\", the predecessor to C++.",
      "[16]",
      " The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that ",
      "Simula",
      " had features that were very helpful for large software development, but the language was too slow for practical use, while ",
      "BCPL",
      " was fast but too low-level to be suitable for large software development. When Stroustrup started working in ",
      "AT&T Bell Labs",
      ", he had the problem of analyzing the ",
      "UNIX",
      " ",
      "kernel",
      " with respect to ",
      "distributed computing",
      ". Remembering his Ph.D. experience, Stroustrup set out to enhance the ",
      "C",
      " language with ",
      "Simula",
      "-like features.",
      "[17]",
      " C was chosen because it was general-purpose, fast, portable and widely used. As well as C and Simula's influences, other languages also influenced this new language, including ",
      "ALGOL 68",
      ", ",
      "Ada",
      ", ",
      "CLU",
      " and ",
      "ML",
      ".\n",
      "Initially, Stroustrup's \"C with Classes\" added features to the C compiler, Cpre, including ",
      "classes",
      ", ",
      "derived classes",
      ", ",
      "strong typing",
      ", ",
      "inlining",
      " and ",
      "default arguments",
      ".",
      "[18]",
      "\n",
      "In 1982, Stroustrup started to develop a successor to C with Classes, which he named \"C++\" (",
      "++",
      " being the ",
      "increment operator",
      " in C) after going through several other names. New features were added, including ",
      "virtual functions",
      ", function name and ",
      "operator overloading",
      ", ",
      "references",
      ", constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (",
      "//",
      "). Furthermore, Stroustrup developed a new, standalone compiler for C++, ",
      "Cfront",
      ".\n",
      "In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by ",
      "Doug McIlroy",
      "[1]",
      " (who had previously suggested ",
      "Unix pipes",
      ").\n",
      "In 1985, the first edition of ",
      "The C++ Programming Language",
      " was released, which became the definitive reference for the language, as there was not yet an official standard.",
      "[19]",
      " The first commercial implementation of C++ was released in October of the same year.",
      "[16]",
      "\n",
      "In 1989, C++ 2.0 was released, followed by the updated second edition of ",
      "The C++ Programming Language",
      " in 1991.",
      "[20]",
      " New features in 2.0 included multiple inheritance, abstract classes, static member functions, ",
      "const member functions",
      ", and protected members. In 1990, ",
      "The Annotated C++ Reference Manual",
      " was published. This work became the basis for the future standard. Later feature additions included ",
      "templates",
      ", ",
      "exceptions",
      ", ",
      "namespaces",
      ", new ",
      "casts",
      ", and a ",
      "Boolean type",
      ".\n",
      "\n",
      "  ",
      "A quiz on C++11 features being given in Paris in 2015",
      "\n",
      "In 1998, C++98 was released, standardizing the language, and a minor update (",
      "C++03",
      ") was released in 2003.\n",
      "After C++98, C++ evolved relatively slowly until, in 2011, the ",
      "C++11",
      " standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor ",
      "C++14",
      " update released in December 2014, various new additions were introduced in ",
      "C++17",
      ".",
      "[21]",
      " The C++20 standard became technically finalized in February 2020,",
      "[22]",
      " and a draft was approved on 4th September 2020; it is expected to be published by the end of 2020.",
      "[23]",
      "[24]",
      "\n",
      "As of 2019,",
      "[update]",
      " C++ is now the fourth most popular programming language, behind ",
      "Java",
      ", C, and ",
      "Python",
      ".",
      "[25]",
      "[26]",
      "\n",
      "On January 3, 2018, Stroustrup was announced as the 2018 winner of the ",
      "Charles Stark Draper Prize",
      " for Engineering, \"for conceptualizing and developing the C++ programming language\".",
      "[27]",
      "\n",
      "\n",
      "\n",
      "Etymology",
      "[",
      "edit",
      "]",
      "\n",
      "According to Stroustrup, \"the name signifies the evolutionary nature of the changes from C\".",
      "[28]",
      " This name is credited to Rick Mascitti (mid-1983)",
      "[18]",
      " and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a ",
      "tongue-in-cheek",
      " spirit. The name comes from C's ",
      "++",
      " ",
      "operator",
      " (which ",
      "increments",
      " the ",
      "value",
      " of a ",
      "variable",
      ") and a common ",
      "naming convention",
      " of using \"+\" to indicate an enhanced computer program.\n",
      "During C++'s development period, the language had been referred to as \"new C\" and \"C with Classes\"",
      "[18]",
      "[29]",
      " before acquiring its final name.\n",
      "\n",
      "Philosophy",
      "[",
      "edit",
      "]",
      "\n",
      "Throughout C++'s life, its development and evolution has been guided by a set of principles:",
      "[17]",
      "\n",
      "\n",
      "It must be driven by actual problems and its features should be immediately useful in real world programs.",
      "\n",
      "Every feature should be implementable (with a reasonably obvious way to do so).",
      "\n",
      "Programmers should be free to pick their own programming style, and that style should be fully supported by C++.",
      "\n",
      "Allowing a useful feature is more important than preventing every possible misuse of C++.",
      "\n",
      "It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts.",
      "\n",
      "No implicit violations of the ",
      "type system",
      " (but allow explicit violations; that is, those explicitly requested by the programmer).",
      "\n",
      "User-created types need to have the same support and performance as built-in types.",
      "\n",
      "Unused features should not negatively impact created executables (e.g. in lower performance).",
      "\n",
      "There should be no language beneath C++ (except ",
      "assembly language",
      ").",
      "\n",
      "C++ should work alongside other existing ",
      "programming languages",
      ", rather than fostering its own separate and incompatible ",
      "programming environment",
      ".",
      "\n",
      "If the programmer's intent is unknown, allow the programmer to specify it by providing manual control.",
      "\n",
      "Standardization",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Scene during the C++ Standards Committee meeting in Stockholm in 1996",
      "\n",
      "\n",
      "C++ standards\n",
      "\n",
      "\n",
      "Year\n",
      "\n",
      "C++ Standard\n",
      "\n",
      "Informal name\n",
      "\n",
      "\n",
      "1998\n",
      "\n",
      "ISO/IEC 14882:1998",
      "[30]",
      "\n",
      "C++98\n",
      "\n",
      "\n",
      "2003\n",
      "\n",
      "ISO/IEC 14882:2003",
      "[31]",
      "\n",
      "C++03",
      "\n",
      "\n",
      "\n",
      "2011\n",
      "\n",
      "ISO/IEC 14882:2011",
      "[32]",
      "\n",
      "C++11",
      ", C++0x\n",
      "\n",
      "\n",
      "2014\n",
      "\n",
      "ISO/IEC 14882:2014",
      "[33]",
      "\n",
      "C++14",
      ", C++1y\n",
      "\n",
      "\n",
      "2017\n",
      "\n",
      "ISO/IEC 14882:2017",
      "[12]",
      "\n",
      "C++17",
      ", C++1z\n",
      "\n",
      "\n",
      "2020\n",
      "\n",
      "to be determined",
      "\n",
      "C++20",
      ",",
      "[21]",
      " C++2a\n",
      "\n",
      "C++ is standardized by an ",
      "ISO",
      " working group known as ",
      "JTC1/SC22/WG21",
      ". So far, it has published five revisions of the C++ standard and is currently working on the next revision, ",
      "C++20",
      ".\n",
      "In 1998, the ISO working group standardized C++ for the first time as ",
      "ISO/IEC 14882:1998",
      ", which is informally known as ",
      "C++98",
      ". In 2003, it published a new version of the C++ standard called ",
      "ISO/IEC 14882:2003",
      ", which fixed problems identified in C++98.\n",
      "The next major revision of the standard was informally referred to as \"C++0x\", but it was not released until 2011.",
      "[34]",
      "  ",
      "C++11",
      " (14882:2011) included many additions to both the core language and the standard library.",
      "[32]",
      "\n",
      "In 2014, ",
      "C++14",
      " (also known as C++1y) was released as a small extension to ",
      "C++11",
      ", featuring mainly bug fixes and small improvements.",
      "[35]",
      "  The Draft International Standard ballot procedures completed in mid-August 2014.",
      "[36]",
      "\n",
      "After C++14, a major revision ",
      "C++17",
      ", informally known as C++1z, was completed by the ISO C++ Committee in mid July 2017 and was approved and published in December 2017.",
      "[37]",
      "\n",
      "As part of the standardization process, ISO also publishes ",
      "technical reports and specifications",
      ":\n",
      "\n",
      "ISO/IEC TR 18015:2006",
      "[38]",
      " on the use of C++ in embedded systems and on performance implications of C++ language and library features,",
      "\n",
      "ISO/IEC TR 19768:2007",
      "[39]",
      " (also known as the ",
      "C++ Technical Report 1",
      ") on library extensions mostly integrated into ",
      "C++11",
      ",",
      "\n",
      "ISO/IEC TR 29124:2010",
      "[40]",
      " on special mathematical functions,",
      "\n",
      "ISO/IEC TR 24733:2011",
      "[41]",
      " on ",
      "decimal floating point",
      " arithmetic,",
      "\n",
      "ISO/IEC TS 18822:2015",
      "[42]",
      " on the standard filesystem library,",
      "\n",
      "ISO/IEC TS 19570:2015",
      "[43]",
      " on ",
      "parallel",
      " versions of the standard library algorithms,",
      "\n",
      "ISO/IEC TS 19841:2015",
      "[44]",
      " on software ",
      "transactional memory",
      ",",
      "\n",
      "ISO/IEC TS 19568:2015",
      "[45]",
      " on a new set of library extensions, some of which are already integrated into ",
      "C++17",
      ",",
      "\n",
      "ISO/IEC TS 19217:2015",
      "[46]",
      " on the C++ ",
      "concepts",
      ", integrated into ",
      "C++20",
      "\n",
      "ISO/IEC TS 19571:2016",
      "[47]",
      " on the library extensions for concurrency",
      "\n",
      "ISO/IEC TS 19568:2017",
      "[48]",
      " on a new set of general-purpose library extensions",
      "\n",
      "ISO/IEC TS 21425:2017",
      "[49]",
      " on the library extensions for ranges, integrated into ",
      "C++20",
      "\n",
      "ISO/IEC TS 22277:2017",
      "[50]",
      " on coroutines",
      "\n",
      "ISO/IEC TS 19216:2018",
      "[51]",
      " on the networking library",
      "\n",
      "ISO/IEC TS 21544:2018",
      "[52]",
      " on modules",
      "\n",
      "ISO/IEC TS 19570:2018",
      "[53]",
      " on a new set of library extensions for parallelism",
      "\n",
      "More technical specifications are in development and pending approval, including static reflection.",
      "[54]",
      "\n",
      "\n",
      "Language",
      "[",
      "edit",
      "]",
      "\n",
      "The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as \"a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions\";",
      "[10]",
      " and \"offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages.\"",
      "[55]",
      "\n",
      "C++ inherits most of ",
      "C's syntax",
      ". The following is Bjarne Stroustrup's version of the ",
      "Hello world program",
      " that uses the ",
      "C++ Standard Library",
      " stream facility to write a message to ",
      "standard output",
      ":",
      "[56]",
      "[57]",
      "\n",
      "\n",
      "1 ",
      "#include",
      " ",
      "<iostream>",
      "\n",
      "2 ",
      "\n",
      "3 ",
      "int",
      " ",
      "main",
      "()",
      "\n",
      "4 ",
      "{",
      "\n",
      "5 ",
      "    ",
      "std",
      "::",
      "cout",
      " ",
      "<<",
      " ",
      "\"Hello, world!",
      "\\n",
      "\"",
      ";",
      "\n",
      "6 ",
      "}",
      "\n",
      "\n",
      "Object storage",
      "[",
      "edit",
      "]",
      "\n",
      "As in C, C++ supports four types of ",
      "memory management",
      ": static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.",
      "[58]",
      "\n",
      "\n",
      "Static storage duration objects",
      "[",
      "edit",
      "]",
      "\n",
      "Static storage duration objects are created before ",
      "main()",
      " is entered (see exceptions below) and destroyed in reverse order of creation after ",
      "main()",
      " exits. The exact order of creation is not specified by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that \"shall last for the duration of the program\".",
      "[59]",
      "\n",
      "Static storage duration objects are initialized in two phases. First, \"static initialization\" is performed, and only ",
      "after",
      " all static initialization is performed, \"dynamic initialization\" is performed.  In static initialization, all objects are first initialized with zeros; after that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or ",
      "constexpr",
      "). Though it is not specified in the standard, the static initialization phase can be completed at compile time and saved in the data partition of the executable.  Dynamic initialization involves all object initialization done via a constructor or function call (unless the function is marked with ",
      "constexpr",
      ", in C++11). The dynamic initialization order is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units.\n",
      "\n",
      "Thread storage duration objects",
      "[",
      "edit",
      "]",
      "\n",
      "Variables of this type are very similar to static storage duration objects. The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined.",
      "[60]",
      "\n",
      "\n",
      "Automatic storage duration objects",
      "[",
      "edit",
      "]",
      "\n",
      "The most common variable types in C++ are local variables inside a function or block, and temporary variables.",
      "[61]",
      " The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the ",
      "reverse",
      " order of creation when the scope is left. This is implemented by allocation on the ",
      "stack",
      ".\n",
      "Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed ",
      "RAII",
      ", which is widely used in C++.\n",
      "Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e. If the parent is an \"automatic object\" then it will be destroyed when it goes out of scope which triggers the destruction of all its members.\n",
      "Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the ",
      ";",
      " at the end of a statement).\n",
      "\n",
      "Dynamic storage duration objects",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "new and delete (C++)",
      "\n",
      "These objects have a dynamic lifespan and can be created directly with a call to ",
      "new",
      " and destroyed explicitly with a call to ",
      "delete",
      ".",
      "[62]",
      " C++ also supports ",
      "malloc",
      " and ",
      "free",
      ", from C, but these are not compatible with ",
      "new",
      " and ",
      "delete",
      ". Use of ",
      "new",
      " returns an address to the allocated memory. The C++ Core Guidelines advise against using ",
      "new",
      " directly for creating dynamic objects in favor of smart pointers through ",
      "make_unique",
      "<",
      "T",
      ">",
      " for single ownership and ",
      "make_shared",
      "<",
      "T",
      ">",
      " for reference-counted multiple ownership,",
      "[63]",
      " which were introduced in C++11.\n",
      "\n",
      "Templates",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Template metaprogramming",
      " and ",
      "Generic programming",
      "\n",
      "C++ templates",
      " enable ",
      "generic programming",
      ". C++ supports function, class, alias, and variable templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by ",
      "instantiation",
      " at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase \"",
      "Substitution failure is not an error",
      "\" (SFINAE). Templates are a powerful tool that can be used for ",
      "generic programming",
      ", ",
      "template metaprogramming",
      ", and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand.",
      "[64]",
      " This is in contrast to run-time generics seen in other languages (e.g., ",
      "Java",
      ") where at compile-time the type is erased and a single template body is preserved.\n",
      "Templates are different from ",
      "macros",
      ": while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static ",
      "polymorphism",
      " (see below) and ",
      "generic programming",
      ".\n",
      "In addition, templates are a compile time mechanism in C++ that is ",
      "Turing-complete",
      ", meaning that any computation expressible by a computer program can be computed, in some form, by a ",
      "template metaprogram",
      " prior to runtime.\n",
      "In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.\n",
      "\n",
      "Objects",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C++ classes",
      "\n",
      "C++ introduces ",
      "object-oriented programming",
      " (OOP) features to C. It offers ",
      "classes",
      ", which provide the four features commonly present in OOP (and some non-OOP) languages: ",
      "abstraction",
      ", ",
      "encapsulation",
      ", ",
      "inheritance",
      ", and ",
      "polymorphism",
      ". One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic ",
      "destructors",
      ", which in turn provide support for the ",
      "Resource Acquisition is Initialization",
      " (RAII) concept.\n",
      "\n",
      "Encapsulation",
      "[",
      "edit",
      "]",
      "\n",
      "Encapsulation",
      " is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class (\"friends\"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends.\n",
      "The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers can declare parts or all of the representation of a type to be public, and they are allowed to make public entities not part of the representation of a type. Therefore, C++ supports not just object-oriented programming, but other decomposition paradigms such as ",
      "modular programming",
      ".\n",
      "It is generally considered good practice to make all ",
      "data",
      " private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.",
      "[65]",
      "[66]",
      "\n",
      "\n",
      "Inheritance",
      "[",
      "edit",
      "]",
      "\n",
      "Inheritance",
      " allows one data type to acquire properties of other data types. Inheritance from a ",
      "base class",
      " may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by \"inheritance\". The other two forms are much less frequently used. If the access specifier is omitted, a \"class\" inherits privately, while a \"struct\" inherits publicly. Base classes may be declared as virtual; this is called ",
      "virtual inheritance",
      ". Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance.\n",
      "Multiple inheritance",
      " is a C++ feature not found in most other languages, allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a \"Flying Cat\" class can inherit from both \"Cat\" and \"Flying Mammal\". Some other languages, such as ",
      "C#",
      " or ",
      "Java",
      ", accomplish something similar (although more limited) by allowing inheritance of multiple ",
      "interfaces",
      " while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an ",
      "abstract base class",
      " or \"ABC\". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called ",
      "dominance",
      ".\n",
      "\n",
      "Operators and operator overloading",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "Operators that cannot be overloaded\n",
      "\n",
      "\n",
      "Operator\n",
      "\n",
      "Symbol\n",
      "\n",
      "\n",
      "Scope resolution operator\n",
      "\n",
      "::",
      "\n",
      "\n",
      "\n",
      "Conditional operator\n",
      "\n",
      "?:",
      "\n",
      "\n",
      "\n",
      "dot operator\n",
      "\n",
      ".",
      "\n",
      "\n",
      "\n",
      "Member selection operator\n",
      "\n",
      ".",
      "*",
      "\n",
      "\n",
      "\n",
      "\"sizeof\" operator\n",
      "\n",
      "sizeof",
      "\n",
      "\n",
      "\n",
      "\"typeid\" operator\n",
      "\n",
      "typeid",
      "\n",
      "\n",
      "Main article: ",
      "Operators in C and C++",
      "\n",
      "C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be ",
      "overloaded",
      " for user-defined types, with a few notable exceptions such as member access (",
      ".",
      " and ",
      ".*",
      ") as well as the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types.\n",
      "Overloadable operators are also an essential part of many advanced C++ programming techniques, such as ",
      "smart pointers",
      ". Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded \"",
      "&&",
      "\" and \"",
      "||",
      "\" operators lose their ",
      "short-circuit evaluation",
      " property.\n",
      "\n",
      "Polymorphism",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Polymorphism (computer science)",
      "\n",
      "Polymorphism",
      " enables one common interface for many implementations, and for objects to act differently under different circumstances.\n",
      "C++ supports several kinds of ",
      "static",
      " (resolved at ",
      "compile-time",
      ") and ",
      "dynamic",
      " (resolved at ",
      "run-time",
      ") ",
      "polymorphisms",
      ", supported by the language features described above. ",
      "Compile-time polymorphism",
      " does not allow for certain run-time decisions, while ",
      "runtime polymorphism",
      " typically incurs a performance penalty.\n",
      "\n",
      "Static polymorphism",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Parametric polymorphism",
      " and ",
      "ad hoc polymorphism",
      "\n",
      "Function overloading",
      " allows programs to declare multiple functions having the same name but with different arguments (i.e. ",
      "ad hoc",
      " polymorphism",
      "). The functions are distinguished by the number or types of their ",
      "formal parameters",
      ". Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and would result in a compile-time error message.\n",
      "When declaring a function, a programmer can specify for one or more parameters a ",
      "default value",
      ". Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters.\n",
      "Templates",
      " in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. ",
      "parametric polymorphism",
      "). In particular, through the ",
      "curiously recurring template pattern",
      ", it's possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and ",
      "Turing-complete",
      ", they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through ",
      "template metaprogramming",
      ". Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.",
      "[64]",
      "\n",
      "\n",
      "Dynamic polymorphism",
      "[",
      "edit",
      "]",
      "\n",
      "Inheritance",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "Subtyping",
      "\n",
      "Variable pointers and references to a base class type in C++ can also refer to objects of any derived classes of that type. This allows arrays and other kinds of containers to hold pointers to objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently, depending on their (actual, derived) types.\n",
      "C++ also provides the ",
      "dynamic_cast",
      " operator, which allows code to safely attempt conversion of an object, via a base reference/pointer, to a more derived type: ",
      "downcasting",
      ". The ",
      "attempt",
      " is necessary as often one does not know which derived type is referenced. (",
      "Upcasting",
      ", conversion to a more general type, can always be checked/performed at compile-time via ",
      "static_cast",
      ", as ancestral classes are specified in the derived class's interface, visible to all callers.) ",
      "dynamic_cast",
      " relies on ",
      "run-time type information",
      " (RTTI), metadata in the program that enables differentiating types and their relationships. If a ",
      "dynamic_cast",
      " to a pointer fails, the result is the ",
      "nullptr",
      " constant, whereas if the destination is a reference (which cannot be null), the cast throws an exception. Objects ",
      "known",
      " to be of a certain derived type can be cast to that with ",
      "static_cast",
      ", bypassing RTTI and the safe runtime type-checking of ",
      "dynamic_cast",
      ", so this should be used only if the programmer is very confident the cast is, and will always be, valid.\n",
      "\n",
      "Virtual member functions",
      "[",
      "edit",
      "]",
      "\n",
      "Ordinarily, when a function in a derived class ",
      "overrides",
      " a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called ",
      "dynamic dispatch",
      ". ",
      "Virtual member functions",
      " or ",
      "methods",
      "[67]",
      " allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using ",
      "virtual function tables",
      ". If the object type is known, this may be bypassed by prepending a ",
      "fully qualified class name",
      " before the function call, but in general calls to virtual functions are resolved at run time.\n",
      "In addition to standard member functions, operator overloads and destructors can be virtual. As a rule of thumb, if any function in the class is virtual, the destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a ",
      "clone",
      "()",
      " (or similar) virtual function that creates and returns a copy of the derived class when called.\n",
      "A member function can also be made \"pure virtual\" by appending it with ",
      "=",
      " ",
      "0",
      " after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an ",
      "abstract class",
      ". Objects cannot be created from an abstract class; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed.\n",
      "\n",
      "Lambda expressions",
      "[",
      "edit",
      "]",
      "\n",
      "C++ provides support for ",
      "anonymous functions",
      ", also known as lambda expressions, with the following form:\n",
      "\n",
      "[",
      "capture",
      "](",
      "parameters",
      ")",
      " ",
      "->",
      " ",
      "return_type",
      " ",
      "{",
      " ",
      "function_body",
      " ",
      "}",
      "\n",
      "\n",
      "If the lambda takes no parameters, the () can be omitted, that is,\n",
      "\n",
      "[",
      "capture",
      "]",
      " ",
      "->",
      " ",
      "return_type",
      " ",
      "{",
      " ",
      "function_body",
      " ",
      "}",
      "\n",
      "\n",
      "Also, the return type of a lambda expression can be automatically inferred, if possible, e.g.:\n",
      "\n",
      "[](",
      "int",
      " ",
      "x",
      ",",
      " ",
      "int",
      " ",
      "y",
      ")",
      " ",
      "{",
      " ",
      "return",
      " ",
      "x",
      " ",
      "+",
      " ",
      "y",
      ";",
      " ",
      "}",
      " ",
      "// inferred",
      "\n",
      "[](",
      "int",
      " ",
      "x",
      ",",
      " ",
      "int",
      " ",
      "y",
      ")",
      " ",
      "->",
      " ",
      "int",
      " ",
      "{",
      " ",
      "return",
      " ",
      "x",
      " ",
      "+",
      " ",
      "y",
      ";",
      " ",
      "}",
      " ",
      "// explicit",
      "\n",
      "\n",
      "The ",
      "[",
      "capture",
      "]",
      " list supports the definition of ",
      "closures",
      ". Such lambda expressions are defined in the standard as ",
      "syntactic sugar",
      " for an unnamed ",
      "function object",
      ".\n",
      "\n",
      "Exception handling",
      "[",
      "edit",
      "]",
      "\n",
      "Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.",
      "[68]",
      " It permits this to be done in a uniform manner and separately from the main code, while detecting all errors.",
      "[69]",
      " Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.",
      "[70]",
      " At the same time, an exception is presented as an object carrying the data about the detected problem.",
      "[71]",
      "\n",
      "Some C++ style guides, such as Google's,",
      "[72]",
      " LLVM's,",
      "[73]",
      " and Qt's",
      "[74]",
      " forbid the usage of exceptions.\n",
      "The exception-causing code is placed inside a ",
      "try",
      " block. The exceptions are handled in separate ",
      "catch",
      " blocks (the handlers); each ",
      "try",
      " block can have multiple exception handlers, as it is visible in the example below.",
      "[75]",
      "\n",
      "\n",
      " 1 ",
      "#include",
      " ",
      "<iostream>",
      "\n",
      " 2 ",
      "#include",
      " ",
      "<vector>",
      "\n",
      " 3 ",
      "#include",
      " ",
      "<stdexcept>",
      "\n",
      " 4 ",
      "\n",
      " 5 ",
      "int",
      " ",
      "main",
      "()",
      " ",
      "{",
      "\n",
      " 6 ",
      "    ",
      "try",
      " ",
      "{",
      "\n",
      " 7 ",
      "        ",
      "std",
      "::",
      "vector",
      "<",
      "int",
      ">",
      " ",
      "vec",
      "{",
      "3",
      ",",
      " ",
      "4",
      ",",
      " ",
      "3",
      ",",
      " ",
      "1",
      "};",
      "\n",
      " 8 ",
      "        ",
      "int",
      " ",
      "i",
      "{",
      "vec",
      ".",
      "at",
      "(",
      "4",
      ")};",
      " ",
      "// Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)",
      "\n",
      " 9 ",
      "    ",
      "}",
      "\n",
      "10 ",
      "    ",
      "// An exception handler, catches std::out_of_range, which is thrown by vec.at(4)",
      "\n",
      "11 ",
      "    ",
      "catch",
      " ",
      "(",
      "std",
      "::",
      "out_of_range",
      " ",
      "&",
      "e",
      ")",
      " ",
      "{",
      "\n",
      "12 ",
      "        ",
      "std",
      "::",
      "cerr",
      " ",
      "<<",
      " ",
      "\"Accessing a non-existent element: \"",
      " ",
      "<<",
      " ",
      "e",
      ".",
      "what",
      "()",
      " ",
      "<<",
      " ",
      "'\\n'",
      ";",
      "\n",
      "13 ",
      "    ",
      "}",
      "\n",
      "14 ",
      "    ",
      "// To catch any other standard library exceptions (they derive from std::exception)",
      "\n",
      "15 ",
      "    ",
      "catch",
      " ",
      "(",
      "std",
      "::",
      "exception",
      " ",
      "&",
      "e",
      ")",
      " ",
      "{",
      "\n",
      "16 ",
      "        ",
      "std",
      "::",
      "cerr",
      " ",
      "<<",
      " ",
      "\"Exception thrown: \"",
      " ",
      "<<",
      " ",
      "e",
      ".",
      "what",
      "()",
      " ",
      "<<",
      " ",
      "'\\n'",
      ";",
      "\n",
      "17 ",
      "    ",
      "}",
      "\n",
      "18 ",
      "    ",
      "// Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)",
      "\n",
      "19 ",
      "    ",
      "catch",
      " ",
      "(...)",
      " ",
      "{",
      "\n",
      "20 ",
      "        ",
      "std",
      "::",
      "cerr",
      " ",
      "<<",
      " ",
      "\"Some fatal error",
      "\\n",
      "\"",
      ";",
      "\n",
      "21 ",
      "    ",
      "}",
      "\n",
      "22 ",
      "}",
      "\n",
      "\n",
      "It is also possible to raise exceptions purposefully, using the ",
      "throw",
      " keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot be used due to technical reasons. One such example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled.",
      "[76]",
      "\n",
      "Unlike ",
      "signal handling",
      ", in which the handling function is called from the point of failure, exception handling exits the current scope before the catch block is entered, which may be located in the current function or any of the previous function calls currently on the stack.\n",
      "\n",
      "Standard library",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "The draft \"Working Paper\" standard that became approved as C++98; half of its size was devoted to the C++ Standard Library",
      "\n",
      "Main article: ",
      "C++ Standard Library",
      "\n",
      "The C++ ",
      "standard",
      " consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (",
      "vectors",
      ", lists, maps, sets, queues, stacks, arrays, tuples), ",
      "algorithms",
      " (find, ",
      "for_each",
      ", ",
      "binary_search",
      ", random_shuffle, etc.), input/output facilities (",
      "iostream",
      ", for reading from and writing to the console and files), filesystem library, localisation support, ",
      "smart pointers",
      " for automatic memory management, ",
      "regular expression",
      " support, ",
      "multi-threading",
      " library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that doesn't use C++ ",
      "exceptions",
      " into C++ exceptions, a ",
      "random number generator",
      " and a slightly modified version of the ",
      "C standard library",
      " (to make it comply with the C++ type system).\n",
      "A large part of the C++ library is based on the ",
      "Standard Template Library",
      " (STL). Useful tools provided by the STL include ",
      "containers",
      " as the collections of objects (such as ",
      "vectors",
      " and ",
      "lists",
      "), ",
      "iterators",
      " that provide array-like access to containers, and ",
      "algorithms",
      " that perform operations such as searching and sorting.\n",
      "Furthermore, (multi)maps (",
      "associative arrays",
      ") and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the ",
      "features",
      " of the ",
      "library",
      " are accessed by using the ",
      "#include",
      " ",
      "directive",
      " to include a ",
      "standard header",
      ". The ",
      "C++ Standard Library",
      " provides 105 standard headers, of which 27 are deprecated.\n",
      "The standard incorporates the STL that was originally designed by ",
      "Alexander Stepanov",
      ", who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as \"STL\", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).",
      "[77]",
      "\n",
      "Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library.\n",
      "\n",
      "C++ Core Guidelines",
      "[",
      "edit",
      "]",
      "\n",
      "The C++ Core Guidelines",
      "[78]",
      " are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language standards C++14 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices.\n",
      "The main aim is to efficiently and consistently write type and resource safe C++.\n",
      "The Core Guidelines were announced",
      "[79]",
      " in the opening keynote at CPPCon 2015.\n",
      "The Guidelines are accompanied by the Guideline Support Library (GSL),",
      "[80]",
      " a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules.",
      "[81]",
      "\n",
      "\n",
      "Compatibility",
      "[",
      "edit",
      "]",
      "\n",
      "To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of ",
      "name mangling",
      ", ",
      "exception handling",
      ", and other implementation-specific features. The downside of this decision is that ",
      "object code",
      " produced by different ",
      "compilers",
      " is expected to be incompatible. There were, however, attempts to standardize compilers for particular machines or ",
      "operating systems",
      " (for example C++ ABI),",
      "[82]",
      " though they seem to be largely abandoned now.\n",
      "\n",
      "With C",
      "[",
      "edit",
      "]",
      "\n",
      "Further information: ",
      "Compatibility of C and C++",
      "\n",
      "C++ is often considered to be a superset of ",
      "C",
      " but this is not strictly true.",
      "[83]",
      " Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from ",
      "void",
      "*",
      " to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as ",
      "new",
      " and ",
      "class",
      ", which may be used as identifiers (for example, variable names) in a C program.\n",
      "Some incompatibilities have been removed by the 1999 revision of the C standard (",
      "C99",
      "), which now supports C++ features such as line comments (",
      "//",
      ") and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as ",
      "variable-length arrays",
      ", native complex-number types (however, the ",
      "std",
      "::",
      "complex",
      " class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, ",
      "compound literals",
      ", and the ",
      "restrict",
      " keyword.",
      "[84]",
      " Some of the C99-introduced features were included in the subsequent version of the C++ standard, ",
      "C++11",
      " (out of those which were not redundant).",
      "[85]",
      "[86]",
      "[87]",
      " However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C.\n",
      "To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an ",
      "extern",
      " ",
      "\"C\"",
      " ",
      "{",
      "/*...*/",
      "}",
      " block. Such a function may not rely on features depending on ",
      "name mangling",
      " (i.e., function overloading).\n",
      "\n",
      "Criticism",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Criticism of C++",
      "\n",
      "Despite its widespread adoption, some notable programmers have criticized the C++ language, including ",
      "Linus Torvalds",
      ",",
      "[88]",
      " ",
      "Richard Stallman",
      ",",
      "[89]",
      " ",
      "Joshua Bloch",
      ", ",
      "Ken Thompson",
      ",",
      "[90]",
      "[91]",
      "[92]",
      " and ",
      "Donald Knuth",
      ".",
      "[93]",
      "[94]",
      "\n",
      "\nOne of the most often criticised points of C++ is its perceived complexity as a language, with the criticism that a large number of non-orthogonal features in practice necessitates restricting code to subset of C++, thus eschewing the readability benefits of common style and idioms. As expressed by ",
      "Joshua Bloch",
      ": ",
      " I think C++ was pushed well beyond its complexity threshold, and yet there are a lot of people programming it. But what you do is you force people to subset it. So almost every shop that I know of that uses C++ says, \u201cYes, we\u2019re using C++ but we\u2019re not doing multiple-implementation inheritance and we\u2019re not using operator overloading.\u201d There are just a bunch of features that you\u2019re not going to use because the complexity of the resulting code is too high. And I don\u2019t think it\u2019s good when you have to start doing that. You lose this programmer portability where everyone can read everyone else\u2019s code, which I think is such a good thing. ",
      "\n",
      "Donald Knuth",
      " (1993, commenting on pre-standardized C++), who said of ",
      "Edsger Dijkstra",
      " that \"to think of programming in C++\" \"would make him physically ill\":",
      "[93]",
      "[94]",
      " ",
      " The problem that I have with them today is that... C++ is too complicated. At the moment, it's impossible for me to write portable code that I believe would work on lots of different systems, unless I avoid all exotic features. Whenever the C++ language designers had two competing ideas as to how they should solve some problem, they said \"OK, we'll do them both\". So the language is too baroque for my taste. ",
      "\n",
      "Ken Thompson",
      ", who was a colleague of Stroustrup at Bell Labs, gives his assessment:",
      "[91]",
      "[92]",
      " ",
      " It certainly has its good points. But by and large I think it\u2019s a bad language. It does a lot of things half well and it\u2019s just a garbage heap of ideas that are mutually exclusive. Everybody I know, whether it\u2019s personal or corporate, selects a subset and these subsets are different. So it\u2019s not a good language to transport an algorithm\u2014to say, \u201cI wrote it; here, take it.\u201d It\u2019s way too big, way too complex. And it\u2019s obviously ",
      "built by a committee",
      ". \nStroustrup campaigned for years and years and years, way beyond any sort of technical contributions he made to the language, to get it adopted and used. And he sort of ran all the standards committees with a whip and a chair. And he said \u201cno\u201d to no one. He put every feature in that language that ever existed. It wasn\u2019t cleanly designed\u2014it was just the union of everything that came along. And I think it suffered drastically from that. ",
      "\nHowever ",
      "Brian Kernighan",
      ", also a colleague at Bell Labs, disputes this assessment:",
      "[95]",
      " ",
      "C++ has been enormously influential. ... Lots of people say C++ is too big and too complicated etc. etc. but in fact it is a very powerful language and pretty much everything that is in there is there for a really sound reason: it is not somebody doing random invention, it is actually people trying to solve real world problems. Now a lot of the programs that we take for granted today, that we just use, are C++ programs. ",
      "\n",
      "Stroustrup himself comments that C++ semantics are much cleaner than its syntax: \"within C++, there is a much smaller and cleaner language struggling to get out\".",
      "[96]",
      "\n",
      "Other complaints may include a lack of ",
      "reflection",
      " or ",
      "garbage collection",
      ", long compilation times, perceived ",
      "feature creep",
      ",",
      "[97]",
      " and verbose error messages, particularly from template metaprogramming.",
      "[98]",
      "\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "Comparison of programming languages",
      "\n",
      "List of C++ compilers",
      "\n",
      "Outline of C++",
      "\n",
      "Category:C++ libraries",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "Bjarne Stroustrup. \"A history of C++: 1979-1991\". ",
      "doi",
      ":",
      "10.1145/234286.1057836",
      ".",
      " ",
      "Cite journal requires ",
      "|journal=",
      " (",
      "help",
      ")",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "Naugler, David (May 2007). \"C# 2.0 for C++ and Java programmer: conference workshop\". ",
      "Journal of Computing Sciences in Colleges",
      ". ",
      "22",
      " (5). ",
      "Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chapel spec (Acknowledgements)\"",
      " ",
      "(PDF)",
      ". Cray Inc. 1 October 2015",
      ". Retrieved ",
      "14 January",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Rich Hickey Q&A by Michael Fogus\"",
      ". Archived from ",
      "the original",
      " on 11 January 2017",
      ". Retrieved ",
      "11 January",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Harry. H. Chaudhary (28 July 2014). ",
      "\"Cracking The Java Programming Interview\u00a0:: 2000+ Java Interview Que/Ans\"",
      ". Retrieved ",
      "29 May",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Roger Poon (1 May 2017). ",
      "\"Scaling JS++: Abstraction, Performance, and Readability\"",
      ". Retrieved ",
      "21 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"FAQ Nim Programming Language\"",
      ". Retrieved ",
      "21 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"9. Classes \u2014 Python 3.6.4 documentation\"",
      ". ",
      "docs.python.org",
      ". Retrieved ",
      "9 January",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne",
      " (1997). \"1\". ",
      "The C++ Programming Language",
      " (Third ed.). ",
      "ISBN",
      "\u00a0",
      "0-201-88954-4",
      ". ",
      "OCLC",
      "\u00a0",
      "59193992",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Stroustrup, B. (6 May 2014). ",
      "\"Lecture:The essence of C++. University of Edinburgh\"",
      ". Retrieved ",
      "12 June",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (17 February 2014). ",
      "\"C++ Applications\"",
      ". ",
      "stroustrup.com",
      ". Retrieved ",
      "5 May",
      " 2014",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"ISO/IEC 14882:2017\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Bjarne Stroustrup's Homepage\"",
      ". ",
      "www.stroustrup.com",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++ IS schedule\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++; Where it's heading\"",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Stroustrup, Bjarne (7 March 2010). ",
      "\"Bjarne Stroustrup's FAQ: When was C++ invented?\"",
      ". ",
      "stroustrup.com",
      ". Retrieved ",
      "16 September",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Stroustrup, Bjarne. ",
      "\"Evolving a language in and for the real world: C++ 1991-2006\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Stroustrup, Bjarne. ",
      "\"A History of C ++\u00a0: 1979\u2212 1991\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne. ",
      "\"The C++ Programming Language\"",
      " (First ed.)",
      ". Retrieved ",
      "16 September",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne. ",
      "\"The C++ Programming Language\"",
      " (Second ed.)",
      ". Retrieved ",
      "16 September",
      " 2010",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "https://herbsutter.com/2016/06/30/trip-report-summer-iso-c-standards-meeting-oulu/",
      " \"the next standard after C++17 will be C++20\"",
      "\n",
      "\n",
      "^",
      " ",
      "Dus\u00edkov\u00e1, Hana (6 November 2019). ",
      "\"N4817: 2020 Prague Meeting Invitation and Information\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "13 February",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Current Status\"",
      ". ",
      "isocpp.org",
      ". Retrieved ",
      "7 September",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++20 Approved -- Herb Sutter\"",
      ". ",
      "isocpp.org",
      ". Retrieved ",
      "8 September",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Latest news.\" TIOBE Index | TIOBE - The Software Quality Company. N.p., n.d. Web. 5 June 2017.",
      "\n",
      "\n",
      "^",
      " ",
      "Krill, Paul. \"Java, C, C face growing competition in popularity.\" InfoWorld. InfoWorld, 10 February 2017. Web. 5 June 2017.",
      "\n",
      "\n",
      "^",
      " ",
      "https://www.nae.edu/177355.aspx",
      " \"Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering\"",
      "\n",
      "\n",
      "^",
      " ",
      "\"Bjarne Stroustrup's FAQ\u00a0\u2013 Where did the name \"C++\" come from?\"",
      ". Retrieved ",
      "16 January",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C For C++ Programmers\"",
      ". ",
      "Northeastern University",
      ". Archived from ",
      "the original",
      " on 17 November 2010",
      ". Retrieved ",
      "7 September",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC 14882:1998\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC 14882:2003\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"ISO/IEC 14882:2011\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC 14882:2014\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"We have an international standard: C++0x is unanimously approved\"",
      ". ",
      "Sutter's Mill",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Future of C++\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"We have C++14!\u00a0: Standard C++\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Trip report: Summer ISO C++ standards meeting (Toronto)",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TR 18015:2006\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TR 19768:2007\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TR 29124:2010\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TR 24733:2011\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 18822:2015\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19570:2015\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19841:2015\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19568:2015\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19217:2015\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19571:2016\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19568:2017\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 21425:2017\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 22277:2017\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19216:2018\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 21544:2018\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC TS 19570:2018\"",
      ". International Organization for Standardization.",
      "\n",
      "\n",
      "^",
      " ",
      "See a list at ",
      "https://en.cppreference.com/w/cpp/experimental",
      " visited 15 February 2019.",
      "\n",
      "\n",
      "^",
      " ",
      "B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). ",
      "\"Stroustrup: Thoughts on C++17 - An Interview\"",
      ". Retrieved ",
      "8 July",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2000). ",
      "The C++ Programming Language",
      " (Special ed.). Addison-Wesley. p.\u00a046. ",
      "ISBN",
      "\u00a0",
      "0-201-70073-5",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne. ",
      "\"Open issues for The C++ Programming Language (3rd Edition)\"",
      ". This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of ",
      "'\\n'",
      " rather than ",
      "std::endl",
      ". Also see ",
      "Can I write \"void main()\"?",
      " for an explanation of the implicit ",
      "return 0;",
      " in the ",
      "main",
      " function. This implicit return is ",
      "not",
      " available in other functions.",
      "\n",
      "\n",
      "^",
      " ",
      "ISO",
      "/",
      "IEC",
      ". ",
      "Programming Languages \u2013 C++11 Draft (n3797)",
      " ",
      "Archived",
      " 2 October 2018 at the ",
      "Wayback Machine",
      " \u00a73.7 Storage duration [basic.stc]",
      "\n",
      "\n",
      "^",
      " ",
      "ISO",
      "/",
      "IEC",
      ". ",
      "Programming Languages \u2013 C++11 Draft (n3797)",
      " ",
      "Archived",
      " 2 October 2018 at the ",
      "Wayback Machine",
      " \u00a73.7.1 Static Storage duration [basic.stc.static]",
      "\n",
      "\n",
      "^",
      " ",
      "ISO",
      "/",
      "IEC",
      ". ",
      "Programming Languages \u2013 C++11 Draft (n3797)",
      " ",
      "Archived",
      " 2 October 2018 at the ",
      "Wayback Machine",
      " \u00a73.7.2 Thread Storage duration [basic.stc.thread]",
      "\n",
      "\n",
      "^",
      " ",
      "ISO",
      "/",
      "IEC",
      ". ",
      "Programming Languages \u2013 C++11 Draft (n3797)",
      " ",
      "Archived",
      " 2 October 2018 at the ",
      "Wayback Machine",
      " \u00a73.7.3 Automatic Storage duration [basic.stc.auto]",
      "\n",
      "\n",
      "^",
      " ",
      "ISO",
      "/",
      "IEC",
      ". ",
      "Programming Languages \u2013 C++11 Draft (n3797)",
      " ",
      "Archived",
      " 2 October 2018 at the ",
      "Wayback Machine",
      " \u00a73.7.4 Dynamic Storage duration [basic.stc.dynamic]",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++ Core Guidelines\"",
      ". ",
      "isocpp.github.io",
      ". Retrieved ",
      "9 February",
      " 2020",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Nobody Understands C++: Part 5: Template Code Bloat\"",
      ". articles.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008",
      ". Retrieved ",
      "8 March",
      " 2010",
      ". ",
      "On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, \"self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?\" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes!",
      "\n",
      "\n",
      "^",
      " ",
      "Sutter, Herb",
      "; ",
      "Alexandrescu, Andrei",
      " (2004). ",
      "C++ Coding Standards: 101 Rules, Guidelines, and Best Practices",
      ". Addison-Wesley.",
      "\n",
      "\n",
      "^",
      " ",
      "Henricson, Mats; Nyquist, Erik (1997). ",
      "Industrial Strength C++",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-120965-5",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2000). ",
      "The C++ Programming Language",
      " (Special ed.). Addison-Wesley. p.\u00a0310. ",
      "ISBN",
      "\u00a0",
      "0-201-70073-5",
      ". ",
      "A virtual member function is sometimes called a ",
      "method",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Mycroft, Alan (2013). ",
      "\"C and C++ Exceptions | Templates\"",
      " ",
      "(PDF)",
      ". ",
      "Cambridge Computer Laboratory - Course Materials 2013-14",
      ". Retrieved ",
      "30 August",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2013). ",
      "The C++ Programming Language",
      ". Addison Wesley. p.\u00a0345. ",
      "ISBN",
      "\u00a0",
      "9780321563842",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2013). ",
      "The C++ Programming Language",
      ". Addison Wesley. pp.\u00a0363\u2013365. ",
      "ISBN",
      "\u00a0",
      "9780321563842",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2013). ",
      "The C++ Programming Language",
      ". Addison Wesley. pp.\u00a0345, 363. ",
      "ISBN",
      "\u00a0",
      "9780321563842",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Google C++ Style Guide\"",
      ". Retrieved ",
      "25 June",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"LLVM Coding Standards\"",
      ". ",
      "LLVM 9 documentation",
      ". Retrieved ",
      "25 June",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Coding Conventions\"",
      ". ",
      "Qt Wiki",
      ". Retrieved ",
      "26 June",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2013). ",
      "The C++ Programming Language",
      ". Addison Wesley. pp.\u00a0344, 370. ",
      "ISBN",
      "\u00a0",
      "9780321563842",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne (2013). ",
      "The C++ Programming Language",
      ". Addison Wesley. p.\u00a0349. ",
      "ISBN",
      "\u00a0",
      "9780321563842",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Graziano Lo Russo (2008). ",
      "\"An Interview with A. Stepanov\"",
      ". ",
      "stlport.org",
      ". Retrieved ",
      "8 October",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++ Core Guidelines\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Bjarne Stroustrup announces C++ Core Guidelines\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Guidelines Support Library\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Use the C++ Core Guidelines checkers\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++ ABI Summary\"",
      ". 20 March 2001",
      ". Retrieved ",
      "30 May",
      " 2006",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Bjarne Stroustrup's FAQ\u00a0\u2013 Is C a subset of C++?\"",
      ". Retrieved ",
      "5 May",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C9X \u2013 The New C Standard\"",
      ". Retrieved ",
      "27 December",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++0x Support in GCC\"",
      ". Retrieved ",
      "12 October",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"C++0x Core Language Features In VC10: The Table\"",
      ". Retrieved ",
      "12 October",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Clang - C++98, C++11, and C++14 Status\"",
      ". Clang.llvm.org. 12 May 2013",
      ". Retrieved ",
      "10 June",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Re: [RFC] Convert builin-mailinfo.c to use The Better String Library\"",
      " (Mailing list). 6 September 2007",
      ". Retrieved ",
      "31 March",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Re: Efforts to attract more users?\"",
      " (Mailing list). 12 July 2010",
      ". Retrieved ",
      "31 March",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Andrew Binstock (18 May 2011). ",
      "\"Dr. Dobb's: Interview with Ken Thompson\"",
      ". Retrieved ",
      "7 February",
      " 2014",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Peter Seibel (16 September 2009). ",
      "Coders at Work: Reflections on the Craft of Programming",
      ". Apress. pp.\u00a0475\u2013476. ",
      "ISBN",
      "\u00a0",
      "978-1-4302-1948-4",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "https://gigamonkeys.wordpress.com/2009/10/16/coders-c-plus-plus/",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "https://www.drdobbs.com/architecture-and-design/an-interview-with-donald-knuth/228700500",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "http://tex.loria.fr/litte/knuth-interview",
      "\n",
      "\n",
      "^",
      " ",
      "Brian Kernighan (18 July 2018). ",
      "Brian Kernighan Q&A - Computerphile",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "http://www.stroustrup.com/bs_faq.html#really-say-that",
      "\n",
      "\n",
      "^",
      " ",
      "Pike, Rob (2012). ",
      "\"Less is exponentially more\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kreinin, Yossi (13 October 2009). ",
      "\"Defective C++\"",
      ". Retrieved ",
      "3 February",
      " 2016",
      ".",
      "\n",
      "\n",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}",
      "\n",
      "Abrahams, David",
      "; Gurtovoy, Aleksey (2005). ",
      "C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-22725-5",
      ".",
      "\n",
      "Alexandrescu, Andrei",
      " (2001). ",
      "Modern C++ Design: Generic Programming and Design Patterns Applied",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-70431-5",
      ".",
      "\n",
      "Alexandrescu, Andrei",
      "; ",
      "Sutter, Herb",
      " (2004). ",
      "C++ Design and Coding Standards: Rules and Guidelines for Writing Programs",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-11358-6",
      ".",
      "\n",
      "Becker, Pete",
      " (2006). ",
      "The C++ Standard Library Extensions\u00a0: A Tutorial and Reference",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-41299-0",
      ".",
      "\n",
      "Brokken, Frank (2010). ",
      "C++ Annotations",
      ". University of Groningen. ",
      "ISBN",
      "\u00a0",
      "978-90-367-0470-0",
      ".",
      "\n",
      "Coplien, James O.",
      " (1994) [reprinted with corrections, original year of publication 1992]. ",
      "Advanced C++: Programming Styles and Idioms",
      ". ",
      "ISBN",
      "\u00a0",
      "0-201-54855-0",
      ".",
      "\n",
      "Dewhurst, Stephen C. (2005). ",
      "C++ Common Knowledge: Essential Intermediate Programming",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-32192-8",
      ".",
      "\n",
      "Information Technology Industry Council",
      " (15 October 2003). ",
      "Programming languages\u00a0\u2013 C++",
      " (Second ed.). Geneva: ISO/IEC. 14882:2003(E).",
      "\n",
      "Josuttis, Nicolai M. (2012). ",
      "The C++ Standard Library, A Tutorial and Reference",
      " (Second ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0-321-62321-8",
      ".",
      "\n",
      "Koenig, Andrew",
      "; Moo, Barbara E. (2000). ",
      "Accelerated C++ \u2013 Practical Programming by Example",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-70353-X",
      ".",
      "\n",
      "Lippman, Stanley B.",
      "; Lajoie, Jos\u00e9e; Moo, Barbara E. (2011). ",
      "C++ Primer",
      " (Fifth ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0-321-71411-4",
      ".",
      "\n",
      "Lippman, Stanley B. (1996). ",
      "Inside the C++ Object Model",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-83454-5",
      ".",
      "\n",
      "Meyers, Scott",
      " (2005). ",
      "Effective C++",
      " (Third ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-33487-6",
      ".",
      "\n",
      "Stroustrup, Bjarne",
      " (2013). ",
      "The C++ Programming Language",
      " (Fourth ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0-321-56384-2",
      ".",
      "\n",
      "Stroustrup, Bjarne",
      " (1994). ",
      "The Design and Evolution of C++",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-54330-3",
      ".",
      "\n",
      "Stroustrup, Bjarne",
      " (2014). ",
      "Programming: Principles and Practice Using C++",
      " (Second ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0-321-99278-9",
      ".",
      "\n",
      "Sutter, Herb",
      " (2001). ",
      "More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-70434-X",
      ".",
      "\n",
      "Sutter, Herb",
      " (2004). ",
      "Exceptional C++ Style",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-76042-8",
      ".",
      "\n",
      "Vandevoorde, David; Josuttis, Nicolai M. (2003). ",
      "C++ Templates: The complete Guide",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-73484-2",
      ".",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "C++",
      "at Wikipedia's ",
      "sister projects",
      "Definitions",
      " from Wiktionary",
      "\n            ",
      "Media",
      " from Wikimedia Commons",
      "\n            ",
      "Quotations",
      " from Wikiquote",
      "\n            ",
      "Textbooks",
      " from Wikibooks",
      "\n            ",
      "Resources",
      " from Wikiversity",
      "\n            ",
      "\n",
      "\n",
      "JTC1/SC22/WG21",
      "\u00a0\u2013  the ISO/IEC C++ Standard Working Group",
      "\n",
      "Standard C++ Foundation",
      "\u00a0\u2013  a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization.",
      "\n",
      "v",
      "t",
      "e",
      "ISO",
      " standards ",
      ".mw-parser-output .nobold{font-weight:normal}",
      "by standard number",
      "List of ",
      "ISO standards",
      "\u00a0/ ",
      "ISO romanizations",
      "\u00a0/ ",
      "IEC standards",
      "1\u20139999",
      "\n",
      "1",
      "\n",
      "2",
      "\n",
      "3",
      "\n",
      "4",
      "\n",
      "5",
      "\n",
      "6",
      "\n",
      "7",
      "\n",
      "9",
      "\n",
      "16",
      "\n",
      "17",
      "\n",
      "31",
      "\n",
      "-0",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-4",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "-7",
      "\n",
      "-8",
      "\n",
      "-9",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-13",
      "\n",
      "128",
      "\n",
      "216",
      "\n",
      "217",
      "\n",
      "226",
      "\n",
      "228",
      "\n",
      "233",
      "\n",
      "259",
      "\n",
      "269",
      "\n",
      "302",
      "\n",
      "306",
      "\n",
      "361",
      "\n",
      "428",
      "\n",
      "500",
      "\n",
      "518",
      "\n",
      "519",
      "\n",
      "639",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "646",
      "\n",
      "657",
      "\n",
      "668",
      "\n",
      "690",
      "\n",
      "704",
      "\n",
      "732",
      "\n",
      "764",
      "\n",
      "838",
      "\n",
      "843",
      "\n",
      "860",
      "\n",
      "898",
      "\n",
      "965",
      "\n",
      "999",
      "\n",
      "1000",
      "\n",
      "1004",
      "\n",
      "1007",
      "\n",
      "1073-1",
      "\n",
      "1155",
      "\n",
      "1413",
      "\n",
      "1538",
      "\n",
      "1629",
      "\n",
      "1745",
      "\n",
      "1989",
      "\n",
      "2014",
      "\n",
      "2015",
      "\n",
      "2022",
      "\n",
      "2033",
      "\n",
      "2047",
      "\n",
      "2108",
      "\n",
      "2145",
      "\n",
      "2146",
      "\n",
      "2240",
      "\n",
      "2281",
      "\n",
      "2533",
      "\n",
      "2709",
      "\n",
      "2711",
      "\n",
      "2720",
      "\n",
      "2788",
      "\n",
      "2848",
      "\n",
      "2852",
      "\n",
      "3029",
      "\n",
      "3103",
      "\n",
      "3166",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "3297",
      "\n",
      "3307",
      "\n",
      "3601",
      "\n",
      "3602",
      "\n",
      "3864",
      "\n",
      "3901",
      "\n",
      "3950",
      "\n",
      "3977",
      "\n",
      "4031",
      "\n",
      "4157",
      "\n",
      "4165",
      "\n",
      "4217",
      "\n",
      "4909",
      "\n",
      "5218",
      "\n",
      "5426",
      "\n",
      "5427",
      "\n",
      "5428",
      "\n",
      "5725",
      "\n",
      "5775",
      "\n",
      "5776",
      "\n",
      "5800",
      "\n",
      "5807",
      "\n",
      "5964",
      "\n",
      "6166",
      "\n",
      "6344",
      "\n",
      "6346",
      "\n",
      "6385",
      "\n",
      "6425",
      "\n",
      "6429",
      "\n",
      "6438",
      "\n",
      "6523",
      "\n",
      "6709",
      "\n",
      "6943",
      "\n",
      "7001",
      "\n",
      "7002",
      "\n",
      "7010",
      "\n",
      "7027",
      "\n",
      "7064",
      "\n",
      "7098",
      "\n",
      "7185",
      "\n",
      "7200",
      "\n",
      "7498",
      "\n",
      "-1",
      "\n",
      "7637",
      "\n",
      "7736",
      "\n",
      "7810",
      "\n",
      "7811",
      "\n",
      "7812",
      "\n",
      "7813",
      "\n",
      "7816",
      "\n",
      "7942",
      "\n",
      "8000",
      "\n",
      "8093",
      "\n",
      "8178",
      "\n",
      "8217",
      "\n",
      "8373",
      "\n",
      "8501-1",
      "\n",
      "8571",
      "\n",
      "8583",
      "\n",
      "8601",
      "\n",
      "8613",
      "\n",
      "8632",
      "\n",
      "8651",
      "\n",
      "8652",
      "\n",
      "8691",
      "\n",
      "8805/8806",
      "\n",
      "8807",
      "\n",
      "8820-5",
      "\n",
      "8859",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-4",
      "\n",
      "-5",
      "\n",
      "-6",
      "\n",
      "-7",
      "\n",
      "-8",
      "\n",
      "-8-I",
      "\n",
      "-9",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-13",
      "\n",
      "-14",
      "\n",
      "-15",
      "\n",
      "-16",
      "\n",
      "8879",
      "\n",
      "9000/9001",
      "\n",
      "9036",
      "\n",
      "9075",
      "\n",
      "9126",
      "\n",
      "9141",
      "\n",
      "9227",
      "\n",
      "9241",
      "\n",
      "9293",
      "\n",
      "9314",
      "\n",
      "9362",
      "\n",
      "9407",
      "\n",
      "9506",
      "\n",
      "9529",
      "\n",
      "9564",
      "\n",
      "9592/9593",
      "\n",
      "9594",
      "\n",
      "9660",
      "\n",
      "9797-1",
      "\n",
      "9897",
      "\n",
      "9899",
      "\n",
      "9945",
      "\n",
      "9984",
      "\n",
      "9985",
      "\n",
      "9995",
      "\n",
      "10000\u201319999",
      "\n",
      "10005",
      "\n",
      "10006",
      "\n",
      "10007",
      "\n",
      "10116",
      "\n",
      "10118-3",
      "\n",
      "10160",
      "\n",
      "10161",
      "\n",
      "10165",
      "\n",
      "10179",
      "\n",
      "10206",
      "\n",
      "10218",
      "\n",
      "10303",
      "\n",
      "-11",
      "\n",
      "-21",
      "\n",
      "-22",
      "\n",
      "-28",
      "\n",
      "-238",
      "\n",
      "10383",
      "\n",
      "10487",
      "\n",
      "10585",
      "\n",
      "10589",
      "\n",
      "10646",
      "\n",
      "10664",
      "\n",
      "10746",
      "\n",
      "10861",
      "\n",
      "10957",
      "\n",
      "10962",
      "\n",
      "10967",
      "\n",
      "11073",
      "\n",
      "11170",
      "\n",
      "11179",
      "\n",
      "11404",
      "\n",
      "11544",
      "\n",
      "11783",
      "\n",
      "11784",
      "\n",
      "11785",
      "\n",
      "11801",
      "\n",
      "11889",
      "\n",
      "11898",
      "\n",
      "11940",
      " (",
      "-2",
      ")",
      "\n",
      "11941",
      "\n",
      "11941 (TR)",
      "\n",
      "11992",
      "\n",
      "12006",
      "\n",
      "12182",
      "\n",
      "12207",
      "\n",
      "12234-2",
      "\n",
      "13211",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "13216",
      "\n",
      "13250",
      "\n",
      "13399",
      "\n",
      "13406-2",
      "\n",
      "13450",
      "\n",
      "13485",
      "\n",
      "13490",
      "\n",
      "13567",
      "\n",
      "13568",
      "\n",
      "13584",
      "\n",
      "13616",
      "\n",
      "14000",
      "\n",
      "14031",
      "\n",
      "14224",
      "\n",
      "14289",
      "\n",
      "14396",
      "\n",
      "14443",
      "\n",
      "14496",
      "\n",
      "-2",
      "\n",
      "-3",
      "\n",
      "-6",
      "\n",
      "-10",
      "\n",
      "-11",
      "\n",
      "-12",
      "\n",
      "-14",
      "\n",
      "-17",
      "\n",
      "-20",
      "\n",
      "14644",
      "\n",
      "14649",
      "\n",
      "14651",
      "\n",
      "14698",
      "\n",
      "14750",
      "\n",
      "14764",
      "\n",
      "14882",
      "\n",
      "14971",
      "\n",
      "15022",
      "\n",
      "15189",
      "\n",
      "15288",
      "\n",
      "15291",
      "\n",
      "15292",
      "\n",
      "15398",
      "\n",
      "15408",
      "\n",
      "15444",
      "\n",
      "-3",
      "\n",
      "15445",
      "\n",
      "15438",
      "\n",
      "15504",
      "\n",
      "15511",
      "\n",
      "15686",
      "\n",
      "15693",
      "\n",
      "15706",
      "\n",
      "-2",
      "\n",
      "15707",
      "\n",
      "15897",
      "\n",
      "15919",
      "\n",
      "15924",
      "\n",
      "15926",
      "\n",
      "15926 WIP",
      "\n",
      "15930",
      "\n",
      "16023",
      "\n",
      "16262",
      "\n",
      "16355-1",
      "\n",
      "16612-2",
      "\n",
      "16750",
      "\n",
      "16949 (TS)",
      "\n",
      "17024",
      "\n",
      "17025",
      "\n",
      "17100",
      "\n",
      "17203",
      "\n",
      "17369",
      "\n",
      "17442",
      "\n",
      "17799",
      "\n",
      "18000",
      "\n",
      "18004",
      "\n",
      "18014",
      "\n",
      "18245",
      "\n",
      "18629",
      "\n",
      "18916",
      "\n",
      "19005",
      "\n",
      "19011",
      "\n",
      "19092",
      "\n",
      "-1",
      "\n",
      "-2",
      "\n",
      "19114",
      "\n",
      "19115",
      "\n",
      "19125",
      "\n",
      "19136",
      "\n",
      "19407",
      "\n",
      "19439",
      "\n",
      "19500",
      "\n",
      "19501",
      "\n",
      "19502",
      "\n",
      "19503",
      "\n",
      "19505",
      "\n",
      "19506",
      "\n",
      "19507",
      "\n",
      "19508",
      "\n",
      "19509",
      "\n",
      "19510",
      "\n",
      "19600",
      "\n",
      "19752",
      "\n",
      "19757",
      "\n",
      "19770",
      "\n",
      "19775-1",
      "\n",
      "19794-5",
      "\n",
      "19831",
      "\n",
      "20000+",
      "\n",
      "20000",
      "\n",
      "20022",
      "\n",
      "20121",
      "\n",
      "20400",
      "\n",
      "21000",
      "\n",
      "21047",
      "\n",
      "21500",
      "\n",
      "21827",
      "\n",
      "22000",
      "\n",
      "22300",
      "\n",
      "22395",
      "\n",
      "23270",
      "\n",
      "23271",
      "\n",
      "23360",
      "\n",
      "24517",
      "\n",
      "24613",
      "\n",
      "24617",
      "\n",
      "24707",
      "\n",
      "25178",
      "\n",
      "25964",
      "\n",
      "26000",
      "\n",
      "26262",
      "\n",
      "26300",
      "\n",
      "26324",
      "\n",
      "27000 series",
      "\n",
      "27000",
      "\n",
      "27001",
      "\n",
      "27002",
      "\n",
      "27005",
      "\n",
      "27006",
      "\n",
      "27729",
      "\n",
      "28000",
      "\n",
      "29110",
      "\n",
      "29148",
      "\n",
      "29199-2",
      "\n",
      "29500",
      "\n",
      "30170",
      "\n",
      "31000",
      "\n",
      "32000",
      "\n",
      "37001",
      "\n",
      "38500",
      "\n",
      "40500",
      "\n",
      "42010",
      "\n",
      "45001",
      "\n",
      "50001",
      "\n",
      "55000",
      "\n",
      "80000",
      "\n",
      "-1",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "C++",
      "\n",
      "C++",
      "\n",
      "C++98",
      "\n",
      "C++03",
      "\n",
      "C++11",
      "\n",
      "C++14",
      "\n",
      "C++17",
      "\n",
      "C++20",
      "\n",
      "C++23",
      "\n",
      "Features",
      "\n",
      "Classes",
      "\n",
      "Exception handling",
      "\n",
      "Function overloading",
      "\n",
      "new and delete",
      "\n",
      "Operator overloading",
      "\n",
      "Operators",
      "\n",
      "Templates",
      "\n",
      "Standard Library",
      "\n",
      "I/O Streams",
      "\n",
      "Smart pointers",
      "\n",
      "STL",
      "\n",
      "Strings",
      "\n",
      "Compilers",
      "\n",
      "Comparison of C++ compilers",
      "\n",
      "Borland C++",
      "\n",
      "Borland Turbo C++",
      "\n",
      "C++Builder",
      "\n",
      "Clang",
      "\n",
      "GCC",
      "\n",
      "Intel C++ Compiler",
      "\n",
      "Oracle Solaris Studio",
      "\n",
      "Visual C++",
      "\n",
      "Watcom C/C++",
      "\n",
      "IDEs",
      "\n",
      "Comparison of C IDEs",
      "\n",
      "Anjuta",
      "\n",
      "CLion",
      "\n",
      "Code::Blocks",
      "\n",
      "CodeLite",
      "\n",
      "DevC++",
      "\n",
      "Eclipse",
      "\n",
      "Geany",
      "\n",
      "Microsoft Visual Studio",
      "\n",
      "NetBeans",
      "\n",
      "KDevelop",
      "\n",
      "Qt Creator",
      "\n",
      "Superset languages",
      "\n",
      "Objective-C++",
      "\n",
      "C++/CLI",
      "\n",
      "C++/CX",
      "\n",
      "C++/WinRT",
      "\n",
      "Ch",
      "\n",
      "SYCL",
      "\n",
      "Dialects",
      "\n",
      " Embedded C++",
      "\n",
      "Relative to",
      "other languages",
      "\n",
      "Compatibility of C and C++",
      "\n",
      "Comparison of Java and C++",
      "\n",
      "Comparison of ALGOL 68 and C++",
      "\n",
      "Comparison of programming languages",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "List of International Electrotechnical Commission standards",
      "IEC standards",
      "\n",
      "IEC 60027",
      "\n",
      "IEC 60034",
      "\n",
      "IEC 60038",
      "\n",
      "IEC 60062",
      "\n",
      "IEC 60063",
      "\n",
      "IEC 60068",
      "\n",
      "IEC 60112",
      "\n",
      "IEC 60228",
      "\n",
      "IEC 60269",
      "\n",
      "IEC 60297",
      "\n",
      "IEC 60309",
      "\n",
      "IEC 60320",
      "\n",
      "IEC 60364",
      "\n",
      "IEC 60446",
      "\n",
      "IEC 60559",
      "\n",
      "IEC 60601",
      "\n",
      "IEC 60870",
      "\n",
      "IEC 60870-5",
      "\n",
      "IEC 60870-6",
      "\n",
      "IEC 60906-1",
      "\n",
      "IEC 60908",
      "\n",
      "IEC 60929",
      "\n",
      "IEC 60958",
      "\n",
      "AES3",
      "\n",
      "S/PDIF",
      "\n",
      "IEC 61030",
      "\n",
      "IEC 61131",
      "\n",
      "IEC 61131-3",
      "\n",
      "IEC 61131-9",
      "\n",
      "IEC 61158",
      "\n",
      "IEC 61162",
      "\n",
      "IEC 61334",
      "\n",
      "IEC 61346",
      "\n",
      "IEC 61355",
      "\n",
      "IEC 61360",
      "\n",
      "IEC 61400",
      "\n",
      "IEC 61499",
      "\n",
      "IEC 61508",
      "\n",
      "IEC 61511",
      "\n",
      "IEC 61784",
      "\n",
      "IEC 61850",
      "\n",
      "IEC 61851",
      "\n",
      "IEC 61883",
      "\n",
      "IEC 61960",
      "\n",
      "IEC 61968",
      "\n",
      "IEC 61970",
      "\n",
      "IEC 62014-4",
      "\n",
      "IEC 62026",
      "\n",
      "IEC 62056",
      "\n",
      "IEC 62061",
      "\n",
      "IEC 62196",
      "\n",
      "IEC 62262",
      "\n",
      "IEC 62264",
      "\n",
      "IEC 62304",
      "\n",
      "IEC 62325",
      "\n",
      "IEC 62351",
      "\n",
      "IEC 62365",
      "\n",
      "IEC 62366",
      "\n",
      "IEC 62379",
      "\n",
      "IEC 62386",
      "\n",
      "IEC 62455",
      "\n",
      "IEC 62680",
      "\n",
      "IEC 62682",
      "\n",
      "IEC 62700",
      "\n",
      "IEC 63110",
      "\n",
      "IEC 63119",
      "\n",
      "ISO/IEC standards",
      "\n",
      "ISO/IEC 646",
      "\n",
      "ISO/IEC 2022",
      "\n",
      "ISO/IEC 4909",
      "\n",
      "ISO/IEC 5218",
      "\n",
      "ISO/IEC 6429",
      "\n",
      "ISO/IEC 6523",
      "\n",
      "ISO/IEC 7810",
      "\n",
      "ISO/IEC 7811",
      "\n",
      "ISO/IEC 7812",
      "\n",
      "ISO/IEC 7813",
      "\n",
      "ISO/IEC 7816",
      "\n",
      "ISO/IEC 7942",
      "\n",
      "ISO/IEC 8613",
      "\n",
      "ISO/IEC 8632",
      "\n",
      "ISO/IEC 8652",
      "\n",
      "ISO/IEC 8859",
      "\n",
      "ISO/IEC 9126",
      "\n",
      "ISO/IEC 9293",
      "\n",
      "ISO/IEC 9592",
      "\n",
      "ISO/IEC 9593",
      "\n",
      "ISO/IEC 9899",
      "\n",
      "ISO/IEC 9945",
      "\n",
      "ISO/IEC 9995",
      "\n",
      "ISO/IEC 10021",
      "\n",
      "ISO/IEC 10116",
      "\n",
      "ISO/IEC 10165",
      "\n",
      "ISO/IEC 10179",
      "\n",
      "ISO/IEC 10646",
      "\n",
      "ISO/IEC 10967",
      "\n",
      "ISO/IEC 11172",
      "\n",
      "ISO/IEC 11179",
      "\n",
      "ISO/IEC 11404",
      "\n",
      "ISO/IEC 11544",
      "\n",
      "ISO/IEC 11801",
      "\n",
      "ISO/IEC 12207",
      "\n",
      "ISO/IEC 13250",
      "\n",
      "ISO/IEC 13346",
      "\n",
      "ISO/IEC 13522-5",
      "\n",
      "ISO/IEC 13568",
      "\n",
      "ISO/IEC 13818",
      "\n",
      "ISO/IEC 14443",
      "\n",
      "ISO/IEC 14496",
      "\n",
      "ISO/IEC 14882",
      "\n",
      "ISO/IEC 15288",
      "\n",
      "ISO/IEC 15291",
      "\n",
      "ISO/IEC 15408",
      "\n",
      "ISO/IEC 15444",
      "\n",
      "ISO/IEC 15445",
      "\n",
      "ISO/IEC 15504",
      "\n",
      "ISO/IEC 15511",
      "\n",
      "ISO/IEC 15693",
      "\n",
      "ISO/IEC 15897",
      "\n",
      "ISO/IEC 15938",
      "\n",
      "ISO/IEC 16262",
      "\n",
      "ISO/IEC 17024",
      "\n",
      "ISO/IEC 17025",
      "\n",
      "ISO/IEC 18000",
      "\n",
      "ISO/IEC 18004",
      "\n",
      "ISO/IEC 18014",
      "\n",
      "ISO/IEC 19752",
      "\n",
      "ISO/IEC 19757",
      "\n",
      "ISO/IEC 19770",
      "\n",
      "ISO/IEC 19788",
      "\n",
      "ISO/IEC 20000",
      "\n",
      "ISO/IEC 21000",
      "\n",
      "ISO/IEC 21827",
      "\n",
      "ISO/IEC 23000",
      "\n",
      "ISO/IEC 23003",
      "\n",
      "ISO/IEC 23008",
      "\n",
      "ISO/IEC 23270",
      "\n",
      "ISO/IEC 23360",
      "\n",
      "ISO/IEC 24707",
      "\n",
      "ISO/IEC 24727",
      "\n",
      "ISO/IEC 24744",
      "\n",
      "ISO/IEC 24752",
      "\n",
      "ISO/IEC 26300",
      "\n",
      "ISO/IEC 27000",
      "\n",
      "ISO/IEC 27000-series",
      "\n",
      "ISO/IEC 27002",
      "\n",
      "ISO/IEC 27040",
      "\n",
      "ISO/IEC 29119",
      "\n",
      "ISO/IEC 33001",
      "\n",
      "ISO/IEC 38500",
      "\n",
      "ISO/IEC 42010",
      "\n",
      "ISO/IEC 80000",
      "\n",
      "Related",
      "\n",
      "International Electrotechnical Commission",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNE",
      ": ",
      "XX540250",
      "\n",
      "BNF",
      ": ",
      "cb12139768z",
      " ",
      "(data)",
      "\n",
      "GND",
      ": ",
      "4193909-8",
      "\n",
      "LCCN",
      ": ",
      "sh87007505",
      "\n",
      "SUDOC",
      ": ",
      "029859778",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=C%2B%2B&oldid=981168626",
      "\""
    ],
    "lastUpdated": " 30 September 2020, at 18:01"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Ada_(programming_language)",
    "title": "Ada (programming language)",
    "text": [
      "High-level programming language first released in 1980",
      "\n",
      "Ada",
      "Paradigm",
      "Multi-paradigm",
      "Family",
      "Pascal",
      "Designed\u00a0by",
      "\n",
      "MIL-STD-1815, Ada 83: ",
      "Jean Ichbiah",
      "\n",
      "Ada 95: Tucker Taft",
      "\n",
      "Ada 2005: Tucker Taft",
      "\n",
      "Ada 2012: Tucker Taft",
      "\n",
      "First\u00a0appeared",
      "February\u00a01980",
      "; 40\u00a0years ago",
      "\u00a0(",
      "1980-02",
      ")",
      "Stable release",
      "Ada 2012 TC1",
      "[1]",
      "[2]",
      "\n   / February\u00a01, 2016",
      "; 4\u00a0years ago",
      "\u00a0(",
      "2016-02-01",
      ")",
      "Preview release",
      "Ada 2012 TC1",
      "[3]",
      "\n   / April\u00a02015",
      "; 5\u00a0years ago",
      "\u00a0(",
      "2015-04",
      ")",
      "\n",
      "Typing discipline",
      "static",
      ", ",
      "strong",
      ", ",
      "safe",
      ", ",
      "nominative",
      "OS",
      "Multi- or ",
      "cross-platform",
      "Filename extensions",
      ".adb, .ads",
      "Website",
      "www",
      ".adaic",
      ".org",
      "Major ",
      "implementations",
      "AdaCore ",
      "GNAT",
      " (free download: ",
      "http://libre.adacore.com/download",
      "),",
      "Green Hills Software",
      " Optimising Ada 95 compiler,",
      "PTC, Inc.",
      " PTC ApexAda and PTC ObjectAda,",
      "[4]",
      "\"MapuSoft Ada-C/C++ changer\"",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      ", formerly known as \"AdaMagic with C Intermediate\",",
      "[5]",
      "DDC-I",
      " Score",
      "Dialects",
      "SPARK",
      ", ",
      "Ravenscar profile",
      "Influenced by",
      "ALGOL 68",
      ", ",
      "Pascal",
      ", ",
      "C++",
      " (Ada 95), ",
      "Smalltalk",
      " (Ada 95), ",
      "Modula-2",
      " (Ada 95) ",
      "Java",
      " (Ada 2005), ",
      "Eiffel",
      " (Ada 2012)",
      "Influenced",
      "C++",
      ", ",
      "Chapel",
      ",",
      "[6]",
      " ",
      "\"Drago\"",
      ".",
      ", ",
      "D",
      ", ",
      "Eiffel",
      ", ",
      "\"Griffin\"",
      ".",
      ", ",
      "Java",
      ", ",
      "Nim",
      ", ",
      "ParaSail",
      ", ",
      "PL/SQL",
      ", ",
      "PL/pgSQL",
      ", ",
      "Python",
      ", ",
      "Ruby",
      ", ",
      "Seed7",
      ", ",
      "\"SPARforte\"",
      ".",
      ", ",
      "Sparkel",
      ", ",
      "SQL/PSM",
      ", ",
      "VHDL",
      "\n",
      " ",
      "Ada Programming",
      " at Wikibooks",
      "\n",
      "\n",
      "Ada",
      " is a ",
      "structured",
      ", ",
      "statically typed",
      ", ",
      "imperative",
      ", and ",
      "object-oriented",
      " ",
      "high-level programming language",
      ", extended from ",
      "Pascal",
      " and other languages. It has built-in language support for ",
      "design by contract",
      " (DbC), extremely ",
      "strong typing",
      ", explicit concurrency, tasks, synchronous message passing, protected objects, and ",
      "non-determinism",
      ". Ada improves code safety and maintainability by using the ",
      "compiler",
      " to find errors in favor of ",
      "runtime",
      " errors. Ada is an ",
      "international",
      " ",
      "technical standard",
      ", jointly defined by the ",
      "International Organization for Standardization",
      " (ISO), and the ",
      "International Electrotechnical Commission",
      " (IEC). As of 2020",
      "[update]",
      ", the standard, called Ada 2012 informally,",
      "[7]",
      " is ISO/IEC 8652:2012.",
      "[8]",
      "\n",
      "Ada was originally designed by a team led by French ",
      "computer scientist",
      " ",
      "Jean Ichbiah",
      " of ",
      "CII Honeywell Bull",
      " under contract to the ",
      "United States Department of Defense",
      " (DoD) from 1977 to 1983 to supersede over 450 programming languages used by the DoD at that time.",
      "[9]",
      " Ada was named after ",
      "Ada Lovelace",
      " (1815\u20131852), who has been credited as the first computer programmer.",
      "[10]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Features",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "3",
      " ",
      "Standardization",
      "\n",
      "4",
      " ",
      "Language constructs",
      "\n",
      "\n",
      "4.1",
      " ",
      "\"Hello, world!\" in Ada",
      "\n",
      "4.2",
      " ",
      "Data types",
      "\n",
      "4.3",
      " ",
      "Control structures",
      "\n",
      "4.4",
      " ",
      "Packages, procedures and functions",
      "\n",
      "4.5",
      " ",
      "Concurrency",
      "\n",
      "4.6",
      " ",
      "Pragmas",
      "\n",
      "\n",
      "\n",
      "5",
      " ",
      "See also",
      "\n",
      "6",
      " ",
      "References",
      "\n",
      "\n",
      "6.1",
      " ",
      "International standards",
      "\n",
      "6.2",
      " ",
      "Rationale",
      "\n",
      "6.3",
      " ",
      "Books",
      "\n",
      "6.4",
      " ",
      "Archives",
      "\n",
      "\n",
      "\n",
      "7",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Features",
      "[",
      "edit",
      "]",
      "\n",
      "Ada was originally designed for ",
      "embedded",
      " and ",
      "real-time",
      " systems. The Ada\u00a095 revision, designed by S. Tucker Taft of ",
      "Intermetrics",
      " between 1992 and 1995, improved support for systems, numerical, financial, and ",
      "object-oriented programming",
      " (OOP).\n",
      "Features of Ada include: ",
      "strong typing",
      ", ",
      "modular programming",
      " mechanisms (packages), ",
      "run-time checking",
      ", ",
      "parallel processing",
      " (",
      "tasks",
      ", synchronous ",
      "message passing",
      ", protected objects, and nondeterministic ",
      "select statements",
      "), ",
      "exception handling",
      ", and ",
      "generics",
      ". Ada\u00a095 added support for ",
      "object-oriented programming",
      ", including ",
      "dynamic dispatch",
      ".\n",
      "The syntax of Ada minimizes choices of ways to perform basic operations, and prefers English keywords (such as \"or else\" and \"and then\") to symbols (such as \"||\" and \"&&\"). Ada uses the basic arithmetical operators \"+\", \"-\", \"*\", and \"/\", but avoids using other symbols. Code blocks are delimited by words such as \"declare\", \"begin\", and \"end\", where the \"end\" (in most cases) is followed by the identifier of the block it closes (e.g., ",
      "if ... end if",
      ", ",
      "loop ... end loop",
      "). In the case of conditional blocks this avoids a ",
      "dangling else",
      " that could pair with the wrong nested if-expression in other languages like C or Java.\n",
      "Ada is designed for developing very large software systems. Ada packages can be compiled separately. Ada package specifications (the package interface) can also be compiled separately without the implementation to check for consistency. This makes it possible to detect problems early during the design phase, before implementation starts.\n",
      "A large number of compile-time checks are supported to help avoid bugs that would not be detectable until run-time in some other languages or would require explicit checks to be added to the source code.  For example, the syntax requires explicitly named closing of blocks to prevent errors due to mismatched end tokens. The adherence to strong typing allows detecting many common software errors (wrong parameters, range violations, invalid references, mismatched types, etc.) either during compile-time, or otherwise during run-time. As concurrency is part of the language specification, the compiler can in some cases detect potential deadlocks.",
      "[",
      "citation needed",
      "]",
      " Compilers also commonly check for misspelled identifiers, visibility of packages, redundant declarations, etc. and can provide warnings and useful suggestions on how to fix the error.\n",
      "Ada also supports run-time checks to protect against access to unallocated memory, ",
      "buffer overflow",
      " errors, range violations, ",
      "off-by-one errors",
      ", array access errors, and other detectable bugs. These checks can be disabled in the interest of runtime efficiency, but can often be compiled efficiently. It also includes facilities to help ",
      "program verification",
      ". For these reasons, Ada is widely used in critical systems, where any ",
      "anomaly",
      " might lead to very serious consequences, e.g., accidental death, injury or severe financial loss. Examples of systems where Ada is used include ",
      "avionics",
      ", ",
      "air traffic control",
      ", railways, banking, military and space technology.",
      "[11]",
      "[12]",
      "\n",
      "Ada's dynamic ",
      "memory management",
      " is high-level and type-safe. Ada has no generic or untyped ",
      "pointers",
      "; nor does it implicitly declare any pointer type. Instead, all dynamic memory allocation and deallocation must occur via explicitly declared ",
      "access types",
      ". Each access type has an associated ",
      "storage pool",
      " that handles the low-level details of memory management; the programmer can either use the default storage pool or define new ones (this is particularly relevant for ",
      "Non-Uniform Memory Access",
      "). It is even possible to declare several different access types that all designate the same type but use different storage pools. Also, the language provides for ",
      "accessibility checks",
      ", both at compile time and at run time, that ensures that an ",
      "access value",
      " cannot outlive the type of the object it points to.\n",
      "Though the semantics of the language allow automatic ",
      "garbage collection",
      " of inaccessible objects, most implementations do not support it by default, as it would cause unpredictable behaviour in real-time systems.  Ada does support a limited form of ",
      "region-based memory management",
      "; also, creative use of storage pools can provide for a limited form of automatic garbage collection, since destroying a storage pool also destroys all the objects in the pool.\n",
      "A double-",
      "dash",
      " (\"--\"), resembling an ",
      "em dash",
      ", denotes comment text.  Comments stop at end of line, to prevent unclosed comments from accidentally voiding whole sections of source code.  Disabling a whole block of code now requires the prefixing of each line (or column) individually with \"--\". While clearly denoting disabled code with a column of repeated \"--\" down the page this renders the experimental dis/re-enablement of large blocks a more drawn out process.\n",
      "The semicolon (\";\") is a ",
      "statement terminator",
      ", and the null or no-operation statement is ",
      "null;",
      ". A single ",
      ";",
      " without a statement to terminate is not allowed.\n",
      "Unlike most ",
      "ISO",
      " standards, the Ada language definition (known as the ",
      "Ada Reference Manual",
      " or ",
      "ARM",
      ", or sometimes the ",
      "Language Reference Manual",
      " or ",
      "LRM",
      ") is ",
      "free content",
      ". Thus, it is a common reference for Ada programmers, not only programmers implementing Ada compilers. Apart from the reference manual, there is also an extensive rationale document which explains the language design and the use of various language constructs. This document is also widely used by programmers. When the language was revised, a new rationale document was written.\n",
      "One notable ",
      "free software",
      " tool that is used by many Ada programmers to aid them in writing Ada source code is the ",
      "GNAT Programming Studio",
      ".\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "In the 1970s the ",
      "US Department of Defense",
      " (DoD) became concerned by the number of different programming languages being used for its embedded computer system projects, many of which were obsolete or hardware-dependent, and none of which supported safe modular programming. In 1975, a ",
      "working group",
      ", the ",
      "High Order Language Working Group",
      " (HOLWG), was formed with the intent to reduce this number by finding or creating a programming language generally suitable for the department's and the ",
      "UK Ministry of Defence",
      "'s requirements. After many iterations beginning with an original ",
      "Straw man proposal",
      " the eventual programming language was named Ada. The total number of high-level programming languages in use for such projects fell from over 450 in 1983 to 37 by 1996.\n",
      "The HOLWG working group crafted the ",
      "Steelman language requirements",
      ", a series of documents stating the requirements they felt a programming language should satisfy. Many existing languages were formally reviewed, but the team concluded in 1977 that no existing language met the specifications.\n",
      "Requests for proposals for a new programming language were issued and four contractors were hired to develop their proposals under the names of Red (",
      "Intermetrics",
      " led by Benjamin Brosgol), Green (",
      "CII Honeywell Bull",
      ", led by ",
      "Jean Ichbiah",
      "), Blue (",
      "SofTech",
      ", led by John Goodenough)",
      "[13]",
      " and Yellow (",
      "SRI International",
      ", led by Jay Spitzen). In April 1978, after public scrutiny, the Red and Green proposals passed to the next phase. In May 1979, the Green proposal, designed by Jean Ichbiah at CII Honeywell Bull, was chosen and given the name Ada\u2014after ",
      "Augusta Ada, Countess of Lovelace",
      ". This proposal was influenced by the language ",
      "LIS",
      " that Ichbiah and his group had developed in the 1970s. The preliminary Ada reference manual was published in ACM SIGPLAN Notices in June 1979. The Military Standard reference manual was approved on December 10, 1980 (",
      "Ada Lovelace",
      "'s birthday), and given the number MIL-STD-1815 in honor of Ada Lovelace's birth year. In 1981, ",
      "C. A. R. Hoare",
      " took advantage of his ",
      "Turing Award",
      " speech to criticize Ada for being overly complex and hence unreliable,",
      "[14]",
      " but subsequently seemed to recant in the foreword he wrote for an Ada textbook.",
      "[15]",
      "\n",
      "Ada attracted much attention from the programming community as a whole during its early days. Its backers and others predicted that it might become a dominant language for general purpose programming and not only defense-related work.",
      "[16]",
      " Ichbiah publicly stated that within ten years, only two programming languages would remain: Ada and ",
      "Lisp",
      ".",
      "[17]",
      "  Early Ada compilers struggled to implement the large, complex language, and both compile-time and run-time performance tended to be slow and tools primitive.",
      "[16]",
      "   Compiler vendors expended most of their efforts in passing the massive, language-conformance-testing, government-required \"ACVC\" validation suite that was required in another novel feature of the Ada language effort.",
      "[17]",
      " ",
      "The Jargon File",
      ", a dictionary of computer hacker slang originating in 1975\u20131983, notes in an ",
      "entry on Ada",
      " that \"it is precisely what one might expect given that kind of endorsement by fiat; designed by committee...difficult to use, and overall a disastrous, multi-billion-dollar boondoggle...Ada Lovelace...would almost certainly blanch at the use her name has been latterly put to; the kindest thing that has been said about it is that there is probably a good small language screaming to get out from inside its vast, {elephantine} bulk.\"\n",
      "The first validated Ada implementation was the NYU Ada/Ed translator,",
      "[18]",
      " certified on April 11, 1983. NYU Ada/Ed is implemented in the high-level set language ",
      "SETL",
      ".",
      "[19]",
      " Several commercial companies began offering Ada compilers and associated development tools, including ",
      "Alsys",
      ", ",
      "TeleSoft",
      ", ",
      "DDC-I",
      ", ",
      "Advanced Computer Techniques",
      ", ",
      "Tartan Laboratories",
      ", ",
      "TLD Systems",
      ", and ",
      "Verdix",
      ".",
      "[20]",
      "\n",
      "\n",
      "  ",
      "Augusta Ada King",
      ", Countess of Lovelace.",
      "\n",
      "In 1991, the US Department of Defense began to require the use of Ada (the ",
      "Ada mandate",
      ") for all software,",
      "[21]",
      " though exceptions to this rule were often granted.",
      "[16]",
      "  The Department of Defense Ada mandate was effectively removed in 1997, as the DoD began to embrace ",
      "COTS",
      " technology.",
      "[16]",
      " Similar requirements existed in other ",
      "NATO",
      " countries: Ada was required for NATO systems involving command and control and other functions, and Ada was the mandated or preferred language for defense-related applications in countries such as Sweden, Germany, and Canada.",
      "[22]",
      "\n",
      "By the late 1980s and early 1990s, Ada compilers had improved in performance, but there were still barriers to fully exploiting Ada's abilities, including a tasking model that was different from what most real-time programmers were used to.",
      "[17]",
      "\n",
      "Because of Ada's ",
      "safety-critical",
      " support features, it is now used not only for military applications, but also in commercial projects where a software bug can have severe consequences, e.g., ",
      "avionics",
      " and ",
      "air traffic control",
      ", commercial rockets such as the ",
      "Ariane 4 and 5",
      ", ",
      "satellites",
      " and other space systems, railway transport and banking.",
      "[12]",
      "\nFor example, the ",
      "Airplane Information Management System",
      ", the ",
      "fly-by-wire",
      " system software in the ",
      "Boeing 777",
      ", was written in Ada.",
      "[23]",
      "[24]",
      "  Developed by ",
      "Honeywell Air Transport Systems",
      " in collaboration with consultants from ",
      "DDC-I",
      ", it became arguably the best-known of any Ada project, civilian or military.",
      "[23]",
      "[24]",
      " The Canadian Automated Air Traffic System was written in 1 million lines of Ada (",
      "SLOC",
      " count). It featured advanced ",
      "distributed processing",
      ", a distributed Ada database, and object-oriented design. Ada is also used in other air traffic systems, e.g., the UK's next-generation Interim Future Area Control Tools Support (iFACTS) air traffic control system is designed and implemented using ",
      "SPARK",
      " Ada.",
      "[25]",
      "\nIt is also used in the ",
      "French",
      " ",
      "TVM",
      " in-",
      "cab signalling",
      " system on the ",
      "TGV",
      " high-speed rail system, and the metro suburban trains in Paris, London, Hong Kong and New York City.",
      "[12]",
      "[26]",
      "\n",
      "\n",
      "Standardization",
      "[",
      "edit",
      "]",
      "\n",
      "The language became an ",
      "ANSI",
      " standard in 1983 (",
      "ANSI/MIL-STD 1815A",
      "), and after translation in French and without any further changes in English became\nan ",
      "ISO standard",
      " in 1987 (ISO-8652:1987). This version of the language is commonly known as Ada\u00a083, from the date of its adoption by ANSI, but is sometimes referred to also as Ada\u00a087, from the date of its adoption by ISO.\n",
      "Ada\u00a095, the joint ISO/ANSI standard (",
      "ISO-8652:1995",
      ") was published in February 1995, making Ada\u00a095 the first ISO standard object-oriented programming language. To help with the standard revision and future acceptance, the ",
      "US Air Force",
      " funded the development of the ",
      "GNAT",
      " ",
      "Compiler",
      ". Presently, the GNAT Compiler is part of the ",
      "GNU Compiler Collection",
      ".\n",
      "Work has continued on improving and updating the technical content of the Ada language. A Technical Corrigendum to Ada\u00a095 was published in October 2001, and a major Amendment, ",
      "ISO/IEC 8652:1995/Amd 1:2007",
      " was published on March 9, 2007. At the Ada-Europe 2012 conference in Stockholm, the Ada Resource Association (ARA) and Ada-Europe announced the completion of the design of the latest version of the Ada language and the submission of the reference manual to the International Organization for Standardization (ISO) for approval. ISO/IEC 8652:2012 was published in December 2012.",
      "[8]",
      "\n",
      "Other related standards include ",
      "ISO 8651",
      "-3:1988 ",
      "Information processing systems\u2014Computer graphics\u2014Graphical Kernel System (GKS) language bindings\u2014Part 3: Ada",
      ".\n",
      "\n",
      "Language constructs",
      "[",
      "edit",
      "]",
      "\n",
      "Ada is an ",
      "ALGOL",
      "-like programming language featuring control structures with reserved words such as ",
      "if",
      ", ",
      "then",
      ", ",
      "else",
      ", ",
      "while",
      ", ",
      "for",
      ", and so on. However, Ada also has many data structuring facilities and other abstractions which were not included in the original ",
      "ALGOL 60",
      ", such as ",
      "type definitions",
      ", ",
      "records",
      ", ",
      "pointers",
      ", ",
      "enumerations",
      ". Such constructs were in part inherited from or inspired by ",
      "Pascal",
      ".\n",
      "\n",
      "\"Hello, world!\" in Ada",
      "[",
      "edit",
      "]",
      "\n",
      "A common example of a language's ",
      "syntax",
      " is the ",
      "Hello world program",
      ":\n(hello.adb)\n",
      "\n",
      "with",
      " ",
      "Ada.Text_IO",
      ";",
      " ",
      "use",
      " ",
      "Ada.Text_IO",
      ";",
      "\n",
      "procedure",
      " ",
      "Hello",
      " ",
      "is",
      "\n",
      "begin",
      "\n   ",
      "Put_Line",
      " ",
      "(",
      "\"Hello, world!\"",
      ");",
      "\n",
      "end",
      " ",
      "Hello",
      ";",
      "\n",
      "\n",
      "This program can be compiled by using the freely available open source compiler ",
      "GNAT",
      ", by executing\n",
      "\n",
      "gnatmake hello.adb\n",
      "\n",
      "Data types",
      "[",
      "edit",
      "]",
      "\n",
      "Ada's type system is not based on a set of predefined ",
      "primitive types",
      " but allows users to declare their own types. This declaration in turn is not based on the internal representation of the type but on describing the goal which should be achieved. This allows the compiler to determine a suitable memory size for the type, and to check for violations of the type definition at compile time and run time (i.e., range violations, buffer overruns, type consistency, etc.). Ada supports numerical types defined by a range, modulo types, aggregate types (records and arrays), and enumeration types. Access types define a reference to an instance of a specified type; untyped pointers are not permitted.\nSpecial types provided by the language are task types and protected types.\n",
      "For example, a date might be represented as:\n",
      "\n",
      "type",
      " ",
      "Day_type",
      "   ",
      "is",
      " ",
      "range",
      "    ",
      "1",
      " ",
      "..",
      "   ",
      "31",
      ";",
      "\n",
      "type",
      " ",
      "Month_type",
      " ",
      "is",
      " ",
      "range",
      "    ",
      "1",
      " ",
      "..",
      "   ",
      "12",
      ";",
      "\n",
      "type",
      " ",
      "Year_type",
      "  ",
      "is",
      " ",
      "range",
      " ",
      "1800",
      " ",
      "..",
      " ",
      "2100",
      ";",
      "\n",
      "type",
      " ",
      "Hours",
      " ",
      "is",
      " ",
      "mod",
      " ",
      "24",
      ";",
      "\n",
      "type",
      " ",
      "Weekday",
      " ",
      "is",
      " ",
      "(",
      "Monday",
      ",",
      " ",
      "Tuesday",
      ",",
      " ",
      "Wednesday",
      ",",
      " ",
      "Thursday",
      ",",
      " ",
      "Friday",
      ",",
      " ",
      "Saturday",
      ",",
      " ",
      "Sunday",
      ");",
      "\n\n",
      "type",
      " ",
      "Date",
      " ",
      "is",
      "\n   ",
      "record",
      "\n     ",
      "Day",
      "   ",
      ":",
      " ",
      "Day_type",
      ";",
      "\n     ",
      "Month",
      " ",
      ":",
      " ",
      "Month_type",
      ";",
      "\n     ",
      "Year",
      "  ",
      ":",
      " ",
      "Year_type",
      ";",
      "\n   ",
      "end record",
      ";",
      "\n",
      "\n",
      "Types can be refined by declaring subtypes:\n",
      "\n",
      "subtype",
      " ",
      "Working_Hours",
      " ",
      "is",
      " ",
      "Hours",
      " ",
      "range",
      " ",
      "0",
      " ",
      "..",
      " ",
      "12",
      ";",
      "            ",
      "-- at most 12 Hours to work a day",
      "\n",
      "subtype",
      " ",
      "Working_Day",
      " ",
      "is",
      " ",
      "Weekday",
      " ",
      "range",
      " ",
      "Monday",
      " ",
      "..",
      " ",
      "Friday",
      ";",
      "   ",
      "-- Days to work",
      "\n\n",
      "Work_Load",
      ":",
      " ",
      "constant",
      " ",
      "array",
      "(",
      "Working_Day",
      ")",
      " ",
      "of",
      " ",
      "Working_Hours",
      "  ",
      "-- implicit type declaration",
      "\n   ",
      ":=",
      " ",
      "(",
      "Friday",
      " ",
      "=>",
      " ",
      "6",
      ",",
      " ",
      "Monday",
      " ",
      "=>",
      " ",
      "4",
      ",",
      " ",
      "others",
      " ",
      "=>",
      " ",
      "10",
      ");",
      "           ",
      "-- lookup table for working hours with initialization",
      "\n",
      "\n",
      "Types can have modifiers such as ",
      "limited, abstract, private",
      " etc. Private types can only be accessed and limited types can only be modified or copied within the scope of the package that defines them.",
      "[27]",
      " Ada 95 adds further features for object-oriented extension of types.\n",
      "\n",
      "Control structures",
      "[",
      "edit",
      "]",
      "\n",
      "Ada is a ",
      "structured programming",
      " language, meaning that the flow of control is structured into standard statements. All standard constructs and deep-level early exit are supported, so the use of the also supported \"",
      "go to",
      "\" commands is seldom needed.\n",
      "\n",
      "-- while a is not equal to b, loop.",
      "\n",
      "while",
      " ",
      "a",
      " ",
      "/=",
      " ",
      "b",
      " ",
      "loop",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put_Line",
      " ",
      "(",
      "\"Waiting\"",
      ");",
      "\n",
      "end",
      " ",
      "loop",
      ";",
      "\n\n",
      "if",
      " ",
      "a",
      " ",
      ">",
      " ",
      "b",
      " ",
      "then",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put_Line",
      " ",
      "(",
      "\"Condition met\"",
      ");",
      "\n",
      "else",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put_Line",
      " ",
      "(",
      "\"Condition not met\"",
      ");",
      "\n",
      "end",
      " ",
      "if",
      ";",
      "\n\n",
      "for",
      " ",
      "i",
      " ",
      "in",
      " ",
      "1",
      " ",
      "..",
      " ",
      "10",
      " ",
      "loop",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "\"Iteration: \"",
      ");",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "i",
      ");",
      "\n  ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put_Line",
      ";",
      "\n",
      "end",
      " ",
      "loop",
      ";",
      "\n\n",
      "loop",
      "\n  ",
      "a",
      " ",
      ":=",
      " ",
      "a",
      " ",
      "+",
      " ",
      "1",
      ";",
      "\n  ",
      "exit",
      " ",
      "when",
      " ",
      "a",
      " ",
      "=",
      " ",
      "10",
      ";",
      "\n",
      "end",
      " ",
      "loop",
      ";",
      "\n\n",
      "case",
      " ",
      "i",
      " ",
      "is",
      "\n  ",
      "when",
      " ",
      "0",
      " ",
      "=>",
      " ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "\"zero\"",
      ");",
      "\n  ",
      "when",
      " ",
      "1",
      " ",
      "=>",
      " ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "\"one\"",
      ");",
      "\n  ",
      "when",
      " ",
      "2",
      " ",
      "=>",
      " ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "\"two\"",
      ");",
      "\n  ",
      "-- case statements have to cover all possible cases:",
      "\n  ",
      "when",
      " ",
      "others",
      " ",
      "=>",
      " ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put",
      " ",
      "(",
      "\"none of the above\"",
      ");",
      "\n",
      "end",
      " ",
      "case",
      ";",
      "\n\n",
      "for",
      " ",
      "aWeekday",
      " ",
      "in",
      " ",
      "Weekday",
      "'",
      "Range",
      " ",
      "loop",
      "               ",
      "-- loop over an enumeration",
      "\n   ",
      "Put_Line",
      " ",
      "(",
      " ",
      "Weekday",
      "'",
      "Image",
      "(",
      "aWeekday",
      ")",
      " ",
      ");",
      "         ",
      "-- output string representation of an enumeration",
      "\n   ",
      "if",
      " ",
      "aWeekday",
      " ",
      "in",
      " ",
      "Working_Day",
      " ",
      "then",
      "               ",
      "-- check of a subtype of an enumeration",
      "\n      ",
      "Put_Line",
      " ",
      "(",
      " ",
      "\" to work for \"",
      " ",
      "&",
      "\n               ",
      "Working_Hours",
      "'",
      "Image",
      " ",
      "(",
      "Work_Load",
      "(",
      "aWeekday",
      "))",
      " ",
      ");",
      " ",
      "-- access into a lookup table",
      "\n   ",
      "end",
      " ",
      "if",
      ";",
      "\n",
      "end",
      " ",
      "loop",
      ";",
      "\n",
      "\n",
      "Packages, procedures and functions",
      "[",
      "edit",
      "]",
      "\n",
      "Among the parts of an Ada program are packages, procedures and functions.\n",
      "Example:\nPackage specification (example.ads)\n",
      "\n",
      "package",
      " ",
      "Example",
      " ",
      "is",
      "\n     ",
      "type",
      " ",
      "Number",
      " ",
      "is",
      " ",
      "range",
      " ",
      "1",
      " ",
      "..",
      " ",
      "11",
      ";",
      "\n     ",
      "procedure",
      " ",
      "Print_and_Increment",
      " ",
      "(",
      "j",
      ": ",
      "in",
      " ",
      "out",
      " ",
      "Number",
      ");",
      "\n",
      "end",
      " ",
      "Example",
      ";",
      "\n",
      "\n",
      "Package body (example.adb)\n",
      "\n",
      "with",
      " ",
      "Ada.Text_IO",
      ";",
      "\n",
      "package",
      " ",
      "body",
      " ",
      "Example",
      " ",
      "is",
      "\n\n  ",
      "i",
      " ",
      ":",
      " ",
      "Number",
      " ",
      ":=",
      " ",
      "Number",
      "'",
      "First",
      ";",
      "\n\n  ",
      "procedure",
      " ",
      "Print_and_Increment",
      " ",
      "(",
      "j",
      ": ",
      "in",
      " ",
      "out",
      " ",
      "Number",
      ")",
      " ",
      "is",
      "\n\n    ",
      "function",
      " ",
      "Next",
      " ",
      "(",
      "k",
      ": ",
      "in",
      " ",
      "Number",
      ")",
      " ",
      "return",
      " ",
      "Number",
      " ",
      "is",
      "\n    ",
      "begin",
      "\n      ",
      "return",
      " ",
      "k",
      " ",
      "+",
      " ",
      "1",
      ";",
      "\n    ",
      "end",
      " ",
      "Next",
      ";",
      "\n\n  ",
      "begin",
      "\n    ",
      "Ada",
      ".",
      "Text_IO",
      ".",
      "Put_Line",
      " ",
      "(",
      " ",
      "\"The total is: \"",
      " ",
      "&",
      " ",
      "Number",
      "'",
      "Image",
      "(",
      "j",
      ")",
      " ",
      ");",
      "\n    ",
      "j",
      " ",
      ":=",
      " ",
      "Next",
      " ",
      "(",
      "j",
      ");",
      "\n  ",
      "end",
      " ",
      "Print_and_Increment",
      ";",
      "\n\n",
      "-- package initialization executed when the package is elaborated",
      "\n",
      "begin",
      "\n  ",
      "while",
      " ",
      "i",
      " ",
      "<",
      " ",
      "Number",
      "'",
      "Last",
      " ",
      "loop",
      "\n    ",
      "Print_and_Increment",
      " ",
      "(",
      "i",
      ");",
      "\n  ",
      "end",
      " ",
      "loop",
      ";",
      "\n",
      "end",
      " ",
      "Example",
      ";",
      "\n",
      "\n",
      "This program can be compiled, e.g., by using the freely available open-source compiler ",
      "GNAT",
      ", by executing\n",
      "\n",
      "gnatmake -z example.adb\n",
      "\n",
      "Packages, procedures and functions can nest to any depth, and each can also be the logical outermost block.\n",
      "Each package, procedure or function can have its own declarations of constants, types, variables, and other procedures, functions and packages, which can be declared in any order.\n",
      "\n",
      "Concurrency",
      "[",
      "edit",
      "]",
      "\n",
      "Ada has language support for task-based concurrency. The fundamental concurrent unit in Ada is a ",
      "task",
      ", which is a built-in limited type. Tasks are specified in two parts \u2013 the task declaration defines the task interface (similar to a type declaration), the task body specifies the implementation of the task. Depending on the implementation, Ada tasks are either mapped to operating system threads or processes, or are scheduled internally by the Ada runtime.\n",
      "Tasks can have entries for synchronisation (a form of ",
      "synchronous message passing",
      "). Task entries are declared in the task specification. Each task entry can have one or more ",
      "accept",
      " statements within the task body. If the control flow of the task reaches an accept statement, the task is blocked until the corresponding entry is called by another task (similarly, a calling task is blocked until the called task reaches the corresponding accept statement). Task entries can have parameters similar to procedures, allowing tasks to synchronously exchange data. In conjunction with ",
      "select",
      " statements it is possible to define ",
      "guards",
      " on accept statements (similar to Dijkstra's ",
      "guarded commands",
      ").\n",
      "Ada also offers ",
      "protected objects",
      " for ",
      "mutual exclusion",
      ". Protected objects are a ",
      "monitor-like",
      " construct, but use guards instead of conditional variables for signaling (similar to conditional critical regions). Protected objects combine the data encapsulation and safe mutual exclusion from monitors, and entry guards from conditional critical regions.  The main advantage over classical monitors is that conditional variables are not required for signaling, avoiding potential deadlocks due to incorrect locking semantics. Like tasks, the protected object is a built-in limited type, and it also has a declaration part and a body.\n",
      "A protected object consists of encapsulated private data (which can only be accessed from within the protected object), and procedures, functions and entries which are guaranteed to be mutually exclusive (with the only exception of functions, which are required to be side effect free and can therefore run concurrently with other functions). A task calling a protected object is blocked if another task is currently executing inside the same protected object, and released when this other task leaves the protected object. Blocked tasks are queued on the protected object ordered by time of arrival.\n",
      "Protected object entries are similar to procedures, but additionally have ",
      "guards",
      ". If a guard evaluates to false, a calling task is blocked and added to the queue of that entry; now another task can be admitted to the protected object, as no task is currently executing inside the protected object. Guards are re-evaluated whenever a task leaves the protected object, as this is the only time when the evaluation of guards can have changed.\n",
      "Calls to entries can be ",
      "requeued",
      " to other entries with the same signature. A task that is requeued is blocked and added to the queue of the target entry; this means that the protected object is released and allows admission of another task.\n",
      "The ",
      "select",
      " statement in Ada can be used to implement non-blocking entry calls and accepts, non-deterministic selection of entries (also with guards), time-outs and aborts.\n",
      "The following example illustrates some concepts of concurrent programming in Ada.\n",
      "\n",
      "with",
      " ",
      "Ada.Text_IO",
      ";",
      " ",
      "use",
      " ",
      "Ada.Text_IO",
      ";",
      "\n\n",
      "procedure",
      " ",
      "Traffic",
      " ",
      "is",
      "\n\n   ",
      "type",
      " ",
      "Airplane_ID",
      " ",
      "is",
      " ",
      "range",
      " ",
      "1.",
      ".",
      "10",
      ";",
      "             ",
      "-- 10 airplanes",
      "\n\n   ",
      "task",
      " ",
      "type",
      " ",
      "Airplane",
      " ",
      "(",
      "ID",
      ": ",
      "Airplane_ID",
      ");",
      "        ",
      "-- task representing airplanes, with ID as initialisation parameter",
      "\n   ",
      "type",
      " ",
      "Airplane_Access",
      " ",
      "is",
      " ",
      "access",
      " ",
      "Airplane",
      ";",
      "     ",
      "-- reference type to Airplane",
      "\n\n   ",
      "protected",
      " ",
      "type",
      " ",
      "Runway",
      " ",
      "is",
      "                     ",
      "-- the shared runway (protected to allow concurrent access)",
      "\n      ",
      "entry",
      " ",
      "Assign_Aircraft",
      " ",
      "(",
      "ID",
      ": ",
      "Airplane_ID",
      ");",
      "  ",
      "-- all entries are guaranteed mutually exclusive",
      "\n      ",
      "entry",
      " ",
      "Cleared_Runway",
      " ",
      "(",
      "ID",
      ": ",
      "Airplane_ID",
      ");",
      "\n      ",
      "entry",
      " ",
      "Wait_For_Clear",
      ";",
      "\n   ",
      "private",
      "\n      ",
      "Clear",
      ":",
      " ",
      "Boolean",
      " ",
      ":=",
      " ",
      "True",
      ";",
      "                   ",
      "-- protected private data - generally more than only a flag...",
      "\n   ",
      "end",
      " ",
      "Runway",
      ";",
      "\n   ",
      "type",
      " ",
      "Runway_Access",
      " ",
      "is",
      " ",
      "access",
      " ",
      "all",
      " ",
      "Runway",
      ";",
      "\n\n   ",
      "-- the air traffic controller task takes requests for takeoff and landing",
      "\n   ",
      "task",
      " ",
      "type",
      " ",
      "Controller",
      " ",
      "(",
      "My_Runway",
      ": ",
      "Runway_Access",
      ")",
      " ",
      "is",
      "\n      ",
      "-- task entries for synchronous message passing",
      "\n      ",
      "entry",
      " ",
      "Request_Takeoff",
      " ",
      "(",
      "ID",
      ": ",
      "in",
      " ",
      "Airplane_ID",
      ";",
      " ",
      "Takeoff",
      ": ",
      "out",
      " ",
      "Runway_Access",
      ");",
      "\n      ",
      "entry",
      " ",
      "Request_Approach",
      "(",
      "ID",
      ": ",
      "in",
      " ",
      "Airplane_ID",
      ";",
      " ",
      "Approach",
      ": ",
      "out",
      " ",
      "Runway_Access",
      ");",
      "\n   ",
      "end",
      " ",
      "Controller",
      ";",
      "\n\n   ",
      "--  allocation of instances",
      "\n   ",
      "Runway1",
      "    ",
      ":",
      " ",
      "aliased",
      " ",
      "Runway",
      ";",
      "              ",
      "-- instantiate a runway",
      "\n   ",
      "Controller1",
      ":",
      " ",
      "Controller",
      " ",
      "(",
      "Runway1",
      "'",
      "Access",
      ");",
      " ",
      "-- and a controller to manage it",
      "\n\n   ",
      "------ the implementations of the above types ------",
      "\n   ",
      "protected",
      " ",
      "body",
      " ",
      "Runway",
      " ",
      "is",
      "\n      ",
      "entry",
      " ",
      "Assign_Aircraft",
      " ",
      "(",
      "ID",
      ": ",
      "Airplane_ID",
      ")",
      "\n ",
      "when",
      " ",
      "Clear",
      " ",
      "is",
      "   ",
      "-- the entry guard - calling tasks are blocked until the condition is true",
      "\n      ",
      "begin",
      "\n       ",
      "Clear",
      " ",
      ":=",
      " ",
      "False",
      ";",
      "\n       ",
      "Put_Line",
      " ",
      "(",
      "Airplane_ID",
      "'",
      "Image",
      " ",
      "(",
      "ID",
      ")",
      " ",
      "&",
      " ",
      "\" on runway \"",
      ");",
      "\n      ",
      "end",
      ";",
      "\n\n      ",
      "entry",
      " ",
      "Cleared_Runway",
      " ",
      "(",
      "ID",
      ": ",
      "Airplane_ID",
      ")",
      "\n ",
      "when",
      " ",
      "not",
      " ",
      "Clear",
      " ",
      "is",
      "\n      ",
      "begin",
      "\n         ",
      "Clear",
      " ",
      ":=",
      " ",
      "True",
      ";",
      "\n         ",
      "Put_Line",
      " ",
      "(",
      "Airplane_ID",
      "'",
      "Image",
      " ",
      "(",
      "ID",
      ")",
      " ",
      "&",
      " ",
      "\" cleared runway \"",
      ");",
      "\n      ",
      "end",
      ";",
      "\n\n      ",
      "entry",
      " ",
      "Wait_For_Clear",
      "\n ",
      "when",
      " ",
      "Clear",
      " ",
      "is",
      "\n      ",
      "begin",
      "\n         ",
      "null",
      ";",
      "      ",
      "-- no need to do anything here - a task can only enter if \"Clear\" is true",
      "\n      ",
      "end",
      ";",
      "\n   ",
      "end",
      " ",
      "Runway",
      ";",
      "\n\n   ",
      "task",
      " ",
      "body",
      " ",
      "Controller",
      " ",
      "is",
      "\n   ",
      "begin",
      "\n      ",
      "loop",
      "\n         ",
      "My_Runway",
      ".",
      "Wait_For_Clear",
      ";",
      "   ",
      "-- wait until runway is available (blocking call)",
      "\n         ",
      "select",
      "                      ",
      "-- wait for two types of requests (whichever is runnable first)",
      "\n            ",
      "when",
      " ",
      "Request_Approach",
      "'",
      "count",
      " ",
      "=",
      " ",
      "0",
      " ",
      "=>",
      "  ",
      "-- guard statement - only accept if there are no tasks queuing on Request_Approach",
      "\n             ",
      "accept",
      " ",
      "Request_Takeoff",
      " ",
      "(",
      "ID",
      ":",
      " ",
      "in",
      " ",
      "Airplane_ID",
      ";",
      " ",
      "Takeoff",
      ":",
      " ",
      "out",
      " ",
      "Runway_Access",
      ")",
      "\n             ",
      "do",
      "                                 ",
      "-- start of synchronized part",
      "\n               ",
      "My_Runway",
      ".",
      "Assign_Aircraft",
      " ",
      "(",
      "ID",
      ");",
      "  ",
      "-- reserve runway (potentially blocking call if protected object busy or entry guard false)",
      "\n               ",
      "Takeoff",
      " ",
      ":=",
      " ",
      "My_Runway",
      ";",
      "            ",
      "-- assign \"out\" parameter value to tell airplane which runway",
      "\n             ",
      "end",
      " ",
      "Request_Takeoff",
      ";",
      "               ",
      "-- end of the synchronised part",
      "\n         ",
      "or",
      "\n            ",
      "accept",
      " ",
      "Request_Approach",
      " ",
      "(",
      "ID",
      ":",
      " ",
      "in",
      " ",
      "Airplane_ID",
      ";",
      " ",
      "Approach",
      ":",
      " ",
      "out",
      " ",
      "Runway_Access",
      ")",
      " ",
      "do",
      "\n               ",
      "My_Runway",
      ".",
      "Assign_Aircraft",
      " ",
      "(",
      "ID",
      ");",
      "\n               ",
      "Approach",
      " ",
      ":=",
      " ",
      "My_Runway",
      ";",
      "\n            ",
      "end",
      " ",
      "Request_Approach",
      ";",
      "\n         ",
      "or",
      "                          ",
      "-- terminate if no tasks left who could call",
      "\n            ",
      "terminate",
      ";",
      "\n         ",
      "end",
      " ",
      "select",
      ";",
      "\n      ",
      "end",
      " ",
      "loop",
      ";",
      "\n   ",
      "end",
      ";",
      "\n\n   ",
      "task",
      " ",
      "body",
      " ",
      "Airplane",
      " ",
      "is",
      "\n      ",
      "Rwy",
      " ",
      ":",
      " ",
      "Runway_Access",
      ";",
      "\n   ",
      "begin",
      "\n      ",
      "Controller1",
      ".",
      "Request_Takeoff",
      " ",
      "(",
      "ID",
      ",",
      " ",
      "Rwy",
      ");",
      " ",
      "-- This call blocks until Controller task accepts and completes the accept block",
      "\n      ",
      "Put_Line",
      " ",
      "(",
      "Airplane_ID",
      "'",
      "Image",
      " ",
      "(",
      "ID",
      ")",
      " ",
      "&",
      " ",
      "\"  taking off...\"",
      ");",
      "\n      ",
      "delay",
      " ",
      "2.0",
      ";",
      "\n      ",
      "Rwy",
      ".",
      "Cleared_Runway",
      " ",
      "(",
      "ID",
      ");",
      "               ",
      "-- call will not block as \"Clear\" in Rwy is now false and no other tasks should be inside protected object",
      "\n      ",
      "delay",
      " ",
      "5.0",
      ";",
      " ",
      "-- fly around a bit...",
      "\n      ",
      "loop",
      "\n         ",
      "select",
      "   ",
      "-- try to request a runway",
      "\n            ",
      "Controller1",
      ".",
      "Request_Approach",
      " ",
      "(",
      "ID",
      ",",
      " ",
      "Rwy",
      ");",
      " ",
      "-- this is a blocking call - will run on controller reaching accept block and return on completion",
      "\n            ",
      "exit",
      ";",
      " ",
      "-- if call returned we're clear for landing - leave select block and proceed...",
      "\n         ",
      "or",
      "\n            ",
      "delay",
      " ",
      "3.0",
      ";",
      "  ",
      "-- timeout - if no answer in 3 seconds, do something else (everything in following block)",
      "\n            ",
      "Put_Line",
      " ",
      "(",
      "Airplane_ID",
      "'",
      "Image",
      " ",
      "(",
      "ID",
      ")",
      " ",
      "&",
      " ",
      "\"   in holding pattern\"",
      ");",
      "  ",
      "-- simply print a message",
      "\n         ",
      "end",
      " ",
      "select",
      ";",
      "\n      ",
      "end",
      " ",
      "loop",
      ";",
      "\n      ",
      "delay",
      " ",
      "4.0",
      ";",
      "  ",
      "-- do landing approach...",
      "\n      ",
      "Put_Line",
      " ",
      "(",
      "Airplane_ID",
      "'",
      "Image",
      " ",
      "(",
      "ID",
      ")",
      " ",
      "&",
      " ",
      "\"            touched down!\"",
      ");",
      "\n      ",
      "Rwy",
      ".",
      "Cleared_Runway",
      " ",
      "(",
      "ID",
      ");",
      "  ",
      "-- notify runway that we're done here.",
      "\n   ",
      "end",
      ";",
      "\n\n   ",
      "New_Airplane",
      ":",
      " ",
      "Airplane_Access",
      ";",
      "\n\n",
      "begin",
      "\n   ",
      "for",
      " ",
      "I",
      " ",
      "in",
      " ",
      "Airplane_ID",
      "'",
      "Range",
      " ",
      "loop",
      "  ",
      "-- create a few airplane tasks",
      "\n      ",
      "New_Airplane",
      " ",
      ":=",
      " ",
      "new",
      " ",
      "Airplane",
      " ",
      "(",
      "I",
      ");",
      " ",
      "-- will start running directly after creation",
      "\n      ",
      "delay",
      " ",
      "4.0",
      ";",
      "\n   ",
      "end",
      " ",
      "loop",
      ";",
      "\n",
      "end",
      " ",
      "Traffic",
      ";",
      "\n",
      "\n",
      "Pragmas",
      "[",
      "edit",
      "]",
      "\n",
      "A pragma is a ",
      "compiler directive",
      " that conveys information to the compiler to allow specific manipulating of compiled output.",
      "[28]",
      "  Certain pragmas are built into the language,",
      "[29]",
      " while others are implementation-specific.\n",
      "Examples of common usage of compiler pragmas would be to disable certain features, such as run-time type checking or array subscript boundary checking, or to instruct the compiler to insert object code instead of a function call (as C/C++ does with ",
      "inline functions",
      ").\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      "APSE",
      " \u2013 a specification for a programming environment to support software development in Ada",
      "\n",
      "Ravenscar profile",
      " \u2013 a subset of the Ada tasking features designed for safety-critical hard real-time computing",
      "\n",
      "SPARK (programming language)",
      " \u2013 a programming language consisting of a highly restricted subset of Ada, annotated with meta information describing desired component behavior and individual runtime requirements",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "\"Technical Corrigendum for Ada 2012 published by ISO\"",
      ". Ada Resource Association. 2016-01-29",
      ". Retrieved ",
      "2016-02-23",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Consolidated Ada 2012 Language Reference Manual\"",
      ". Ada Conformity Assessment Authority. Archived from ",
      "the original",
      " on 2016-03-03",
      ". Retrieved ",
      "2016-02-23",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Technical Corrigendum 1 for Ada 2012\"",
      ". Ada Conformity Assessment Authority. Archived from ",
      "the original",
      " on 2016-03-02",
      ". Retrieved ",
      "2016-02-23",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"PTC ObjectAda\"",
      ". PTC.com",
      ". Retrieved ",
      "2014-01-27",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"AdaMagic with C Intermediate certificate\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Chapel spec (Acknowledgements)\"",
      " ",
      "(PDF)",
      ". Cray Inc. 2015-10-01",
      ". Retrieved ",
      "2016-01-14",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ganssle, Jack (2013-05-29). ",
      "\"Ada Resource Association \u2013 News and resource for the Ada programming language\"",
      ". Adaic.org",
      ". Retrieved ",
      "2013-06-14",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"ISO/IEC 8652:2012 ",
      "Information technology \u2013 Programming languages \u2013 Ada",
      "\"",
      ". International Organization for Standardization",
      ". Retrieved ",
      "2012-12-23",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Ada Programming Language\"",
      ". ",
      "University of Mich",
      ". Archived from ",
      "the original",
      " on 2016-05-22",
      ". Retrieved ",
      "27 May",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Fuegi, J; Francis, J (2003). \"Lovelace & Babbage and the creation of the 1843 'notes",
      "'",
      "\". ",
      "IEEE Annals of the History of Computing",
      ". ",
      "25",
      " (4): 16\u201326. ",
      "doi",
      ":",
      "10.1109/MAHC.2003.1253887",
      ". ",
      "S2CID",
      "\u00a0",
      "40077111",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Taft, S. Tucker; Olsen, Florence (1999-06-30). ",
      "\"Ada helps churn out less-buggy code\"",
      ". Government Computer News. pp.\u00a02\u20133",
      ". Retrieved ",
      "2010-09-14",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Feldman, Michael. ",
      "\"Who's using Ada?\"",
      ". SIGAda Education Working Group.",
      "\n",
      "\n",
      "^",
      " ",
      "\"John Goodenough | SEI Staff Profile\"",
      ". Sei.cmu.edu",
      ". Retrieved ",
      "2014-01-27",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "C.A.R., Hoare",
      " (1981). ",
      "\"The Emperor's Old Clothes\"",
      " ",
      "(PDF)",
      ". ",
      "Communications of the ACM",
      ". ",
      "Association for Computing Machinery",
      ". ",
      "24",
      " (2): 75\u201383. ",
      "doi",
      ":",
      "10.1145/358549.358561",
      ". ",
      "S2CID",
      "\u00a0",
      "97895",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Watt, D.A.; Wichmann, B.A.; Findlay, W. (1987). ",
      "Ada: Language and Methodology",
      ". Prentice-Hall.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Sward, Ricky E. (November 2010). \"The rise, fall and persistence of Ada\". ",
      "SIGAda '10: Proceedings of the ACM SIGAda annual international conference on SIGAda",
      ". pp.\u00a071\u201374. ",
      "doi",
      ":",
      "10.1145/1879063.1879081",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Rosen, J-P. (August 2009). \"The Ada Paradox(es)\". ",
      "Ada Letters",
      ". ACM SIGAda. ",
      "24",
      " (2): 28\u201335. ",
      "doi",
      ":",
      "10.1145/1620593.1620597",
      ". ",
      "S2CID",
      "\u00a0",
      "608405",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "SofTech Inc. (1983-04-11). ",
      "\"Ada Compiler Validation Summary Report: NYU Ada/ED, Version 19.7 V-001\"",
      ". Waltham, MA. Archived from ",
      "the original",
      " on 2012-03-12",
      ". Retrieved ",
      "2010-12-16",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dewar, Robert B. K.; Fisher, Gerald A. Jr.; Schonberg, Edmond; Froelich, Robert; Bryant, Stephen; Goss, Clinton F.; Burke, Michael (November 1980). \"The NYU Ada Translator and Interpreter\". ",
      "ACM SIGPLAN Notices \u2013 Proceedings of the ACM-SIGPLAN Symposium on the Ada Programming Language",
      ". ",
      "15",
      " (11): 194\u2013201. ",
      "doi",
      ":",
      "10.1145/948632.948659",
      ". ",
      "ISBN",
      "\u00a0",
      "0-89791-030-3",
      ". ",
      "S2CID",
      "\u00a0",
      "10586359",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ada Validated Compilers List\". Ada Information Clearinghouse. July 1, 1992. pp.\u00a01\u201336.",
      "\n",
      "\n",
      "^",
      " ",
      "Ada Information Clearinghouse (1983-04-11). ",
      "\"The Congressional Ada Mandate\"",
      ". Archived from ",
      "the original",
      " on 2016-03-04",
      ". Retrieved ",
      "2015-06-07",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Babiak, Nicholas J. (1989). ",
      "Ada, the New DoD Weapon System Computer Language \u2013 Panacea or Calamity",
      " ",
      "(PDF)",
      ". ",
      "Air University (United States Air Force)",
      ". pp.\u00a039\u201340.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Rehmer, Karl (2009). \"The HADS Team\".  In Stellman, Andrew; Greene, Jennifer (eds.). ",
      "Beautiful Teams: Inspiring and Cautionary Tales from Veteran Team Leaders",
      ". Sebastopol, California: O'Reilly. pp.\u00a0299\u2013312.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Wolfe, Alexander (October 2004). ",
      "\"There's Still Some Life Left in Ada\"",
      ". ",
      "ACM Queue",
      ". ",
      "2",
      " (7): 28\u201331. ",
      "doi",
      ":",
      "10.1145/1035594.1035608",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "AdaCore. ",
      "\"GNAT Pro Chosen for UK's Next Generation ATC System\"",
      ". Archived from ",
      "the original",
      " on 2010-12-24",
      ". Retrieved ",
      "2011-03-01",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "AdaCore. ",
      "\"Look Who's Using Ada\"",
      ". Archived from ",
      "the original",
      " on 2010-12-24",
      ". Retrieved ",
      "2011-03-01",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ada Syntax Card\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 6 July 2011",
      ". Retrieved ",
      "28 February",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ada 83 LRM, Sec 2.8: Pragmas\"",
      ". Archive.adaic.com",
      ". Retrieved ",
      "2014-01-27",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ada 83 LRM, Appendix/Annex B: Predefined Language Pragmas\"",
      ". Archive.adaic.com. Archived from ",
      "the original",
      " on 2012-02-06",
      ". Retrieved ",
      "2014-01-27",
      ".",
      "\n",
      "\n",
      "\n",
      "International standards",
      "[",
      "edit",
      "]",
      "\n",
      "ISO/IEC 8652",
      ": Information technology\u2014Programming languages\u2014Ada",
      "\n",
      "ISO/IEC 15291",
      ": Information technology\u2014Programming languages\u2014Ada Semantic Interface Specification (",
      "ASIS",
      ")",
      "\n",
      "ISO/IEC 18009",
      ": Information technology\u2014Programming languages\u2014Ada: Conformity assessment of a language processor (",
      "ACATS",
      ")",
      "\n",
      "IEEE Standard 1003.5b-1996",
      ", the ",
      "POSIX",
      " Ada binding",
      "\n",
      "Ada Language Mapping Specification",
      ", the ",
      "CORBA",
      " ",
      "interface description language",
      " (IDL) to Ada mapping",
      "\n",
      "Rationale",
      "[",
      "edit",
      "]",
      "\n",
      "These documents have been published in various forms, including print.\n",
      "\n",
      "Ichbiah, Jean D.",
      "; Barnes, John G. P.; Firth, Robert J.; Woodger, Mike (1986), ",
      "Rationale for the Design of the Ada Programming Language",
      ", archived from ",
      "the original",
      " on 2007-02-02",
      "\n",
      "Barnes, John G. P. (1995), ",
      "Ada 95 rationale: the language: the standard libraries",
      "\n",
      "Barnes, John (2006) [2005], ",
      "Rationale for Ada 2005",
      "\n",
      "Books",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}",
      "\n",
      "Booch, Grady",
      " (1987). ",
      "Software Engineering with Ada",
      ". California: The Benjamin/Cummings Publishing Company. ",
      "ISBN",
      "\u00a0",
      "0-8053-0604-8",
      ".",
      "\n",
      "Skansholm, Jan (1996). ",
      "Ada 95 From the Beginning",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-40376-5",
      ".",
      "\n",
      "Gilpin, Geoff. ",
      "Ada: A Guided Tour and Tutorial",
      ". Prentice hall. ",
      "ISBN",
      "\u00a0",
      "978-0-13-004045-9",
      ".",
      "\n",
      "Barnes, John",
      " (2006). ",
      "Programming in Ada 2005",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-34078-7",
      ".",
      "\n",
      "Barnes, John",
      " (1991). ",
      "Programming in Ada plus Language Reference Manual",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-56539-0",
      ".",
      "\n",
      "Barnes, John",
      " (1998). ",
      "Programming in Ada 95",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-34293-6",
      ".",
      "\n",
      "Barnes, John",
      " (1997). ",
      "High Integrity Ada: The SPARK Approach",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-17517-7",
      ".",
      "\n",
      "Barnes, John",
      " (2003). ",
      "High Integrity Software: The SPARK Approach to Safety and Security",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-321-13616-0",
      ".",
      "\n",
      "Beidler, John (1997). ",
      "Data Structures and Algorithms: An Object-Oriented Approach Using Ada 95",
      ". Springer-Verlag. ",
      "ISBN",
      "\u00a0",
      "0-387-94834-1",
      ".",
      "\n",
      "Gonzalez, Dean W.",
      " (1991). ",
      "Ada Programmer's Handbook",
      ". Benjamin-Cummings Publishing Company. ",
      "ISBN",
      "\u00a0",
      "0-8053-2529-8",
      ".",
      "\n",
      "Ben-Ari, M.",
      " (1998). ",
      "Ada for Software Engineers",
      ". John Wiley & Sons. ",
      "ISBN",
      "\u00a0",
      "0-471-97912-0",
      ".",
      "\n",
      "Cohen, Norman (1996). ",
      "Ada as a Second Language",
      ". McGraw-Hill Science/Engineering/Math. ",
      "ISBN",
      "\u00a0",
      "0-07-011607-5",
      ".",
      "\n",
      "Burns, Alan",
      "; ",
      "Wellings, Andy",
      " (2001). ",
      "Real-Time Systems and Programming Languages. Ada 95, Real-Time Java and Real-Time POSIX",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-72988-1",
      ".",
      "\n",
      "Burns, Alan",
      "; ",
      "Wellings, Andy",
      " (1995). ",
      "Concurrency in Ada",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "0-521-62911-X",
      ".",
      "\n",
      "Atkinson, Colin (1991). ",
      "Object-Oriented Reuse, Concurrency and Distribution: An Ada-Based Approach",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-56527-7",
      ".",
      "\n",
      "Booch, Grady",
      "; Bryan, Doug (1994). ",
      "Software Engineering with Ada",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-8053-0608-0",
      ".",
      "\n",
      "Jones, Do-While (1989). ",
      "Ada in Action: With Practical Programming Examples",
      ". John Wiley & Sons. ",
      "ISBN",
      "\u00a0",
      "0-471-60708-8",
      ".",
      "\n",
      "Stubbs, Daniel; Webre, Neil W. (1993). ",
      "Data Structures with Abstract Data Types and Ada",
      ". Brooks Cole. ",
      "ISBN",
      "\u00a0",
      "0-534-14448-9",
      ".",
      "\n",
      "Ledru, Pascal (December 1998). ",
      "Distributed Programming in Ada with Protected Objects",
      ". Dissertation.com. ",
      "ISBN",
      "\u00a0",
      "1-58112-034-6",
      ".",
      "\n",
      "Culwin, Fintan (1997). ",
      "Ada, a Developmental Approach",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-264680-3",
      ".",
      "\n",
      "English, John; Culwin, Fintan (January 1997). ",
      "Ada 95 the Craft of Object-Oriented Programming",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-230350-7",
      ".",
      "\n",
      "Musser, David R.; Stepanov, Alexander (24 October 1989). ",
      "The Ada Generic Library: Linear List Processing Packages",
      ". Springer-Verlag. ",
      "ISBN",
      "\u00a0",
      "0-387-97133-5",
      ".",
      "\n",
      "Feldman, Michael B. (1997). ",
      "Software Construction and Data Structures with Ada 95",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-88795-9",
      ".",
      "\n",
      "Johnston, Simon (1997). ",
      "Ada 95 for C and C++ Programmers",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-40363-3",
      ".",
      "\n",
      "Feldman, Michael B.; Koffman, Elliot B. (1992\u20131993). ",
      "Ada: Problem Solving and Program Design",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-52279-9",
      ".",
      " 795 pages.",
      "\n",
      "Feldman, Michael B.",
      "; Koffman, Elliot B. (1999). ",
      "Ada 95",
      ". Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "0-201-36123-X",
      ".",
      "\n",
      "Dale, Nell B.",
      "; Weems, Chip; McCormick, John (August 1996). ",
      "Programming and Problem Solving with Ada 95",
      ". Jones & Bartlett Publishers. ",
      "ISBN",
      "\u00a0",
      "0-7637-0293-5",
      ".",
      "\n",
      "Dale, Nell B.",
      "; McCormick, John (2007). ",
      "Ada Plus Data Structures: An Object-Oriented Approach, 2nd edition",
      ". Jones & Bartlett Publishers. ",
      "ISBN",
      "\u00a0",
      "978-0-7637-3794-8",
      ".",
      "\n",
      "Krell, Bruce C. (1992). ",
      "Developing With Ada: Life-Cycle Methods",
      ". Bantam Dell Pub Group. ",
      "ISBN",
      "\u00a0",
      "0-553-09102-6",
      ".",
      "\n",
      "Bishop, Judy (10 May 1990). ",
      "Distributed Ada: Developments and Experiences",
      ". Cambridge University Press. ",
      "ISBN",
      "\u00a0",
      "0-521-39251-9",
      ".",
      "\n",
      "Sanden, Bo (1994). ",
      "Software Systems Construction With Examples in Ada",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-030834-X",
      ".",
      "\n",
      "Hillam, Bruce (1994). ",
      "Introduction to Abstract Data Types Using Ada",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-045949-6",
      ".",
      "\n",
      "Rudd, David (1994). ",
      "Introduction to Software Design and Development With Ada",
      ". Brooks Cole. ",
      "ISBN",
      "\u00a0",
      "0-314-02829-3",
      ".",
      "\n",
      "Pyle, Ian C. (1991). ",
      "Developing Safety Systems: A Guide Using Ada",
      ". Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "0-13-204298-3",
      ".",
      "\n",
      "Baker, Louis (1989). ",
      "Artificial Intelligence With Ada",
      ". McGraw-Hill. ",
      "ISBN",
      "\u00a0",
      "0-07-003350-1",
      ".",
      "\n",
      "Burns, Alan",
      "; ",
      "Wellings, Andy",
      ". ",
      "HRT-HOOD: A Structured Design Method for Hard Real-Time Ada Systems",
      ". North-Holland. ",
      "ISBN",
      "\u00a0",
      "0-444-82164-3",
      ".",
      "\n",
      "Savitch, Walter; Peterson, Charles (1992). ",
      "Ada: An Introduction to the Art and Science of Programming",
      ". Benjamin-Cummings Publishing Company. ",
      "ISBN",
      "\u00a0",
      "0-8053-7070-6",
      ".",
      "\n",
      "Weiss, Mark Allen (1993). ",
      "Data Structures and Algorithm Analysis in Ada",
      ". Benjamin-Cummings Publishing Company. ",
      "ISBN",
      "\u00a0",
      "0-8053-9055-3",
      ".",
      "\n",
      "Ledgard, Henry (1983). ",
      "Ada: An Introduction",
      " (second ed.). Springer-Verlag. ",
      "ISBN",
      "\u00a0",
      "0-387-90814-5",
      ".",
      "\n",
      "Bj\u00f8rner, Dines; Oest, Ole N., eds. (1980). ",
      "Towards a Formal Description of Ada",
      ". London: Springer-Verlag. ",
      "ISBN",
      "\u00a0",
      "3-540-10283-3",
      ".",
      "\n",
      "\n",
      "Archives",
      "[",
      "edit",
      "]",
      "\n",
      "Ada Programming Language Materials, 1981\u20131990",
      ". ",
      "Charles Babbage Institute",
      ", University of Minnesota. Includes literature on software products designed for the Ada language; U.S. government publications, including Ada 9X project reports, technical reports, working papers, newsletters; and user group information.",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikimedia Commons has media related to ",
      "Ada (programming language)",
      ".",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikibooks has a book on the topic of: ",
      "Ada Programming",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikisource has several original texts related to:\n",
      "Ada",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Wikiversity has learning resources about ",
      "Ada",
      "\n",
      "\n",
      "Ada - C/C++ changer - MapuSoft",
      "\n",
      "DOD Ada programming language (ANSI/MIL STD 1815A-1983) specification",
      "\n",
      "JTC1/SC22/WG9 ISO home of Ada Standards",
      "\n",
      "Ada (programming language)",
      " at ",
      "Curlie",
      "\n",
      "v",
      "t",
      "e",
      "Pascal programming language",
      " family",
      "Dialects",
      "\n",
      "Pascal",
      "\n",
      "Object Pascal",
      "\n",
      "Pascal Script",
      "\n",
      "Oxygene",
      "\n",
      "Clascal",
      "\n",
      "Concurrent Pascal",
      "\n",
      "Joyce",
      "\n",
      "SuperPascal",
      "\n",
      "Compilers",
      "Current",
      "\n",
      "Delphi",
      "\n",
      "Oxygene",
      "\n",
      "PocketStudio",
      "\n",
      "VSI Pascal",
      "\n",
      "IP Pascal",
      "\n",
      "Free Pascal",
      " (",
      "Lazarus",
      ")",
      "\n",
      "PascalABC.NET",
      "\n",
      "GNU Pascal",
      "\n",
      "Turbo51",
      "\n",
      "MIDletPascal",
      "\n",
      "Pic Micro Pascal",
      "\n",
      "ACK",
      "\n",
      "Historic",
      "\n",
      "Virtual Pascal",
      "\n",
      "Apple Pascal",
      "\n",
      "Turbo Pascal",
      "\n",
      "Microsoft Pascal",
      "\n",
      "UCSD Pascal",
      "\n",
      "JRT",
      "\n",
      "Pascal/MT+",
      "\n",
      "API",
      "\n",
      "CLX",
      "\n",
      "FCL",
      "\n",
      "FireMonkey",
      "\n",
      "LCL",
      "\n",
      "Object Windows Library",
      "\n",
      "OpenWire",
      "\n",
      "RTL",
      "\n",
      "Turbo Vision",
      "\n",
      "Visual Component Library",
      "\n",
      "\n",
      "Comparison of Pascal and C",
      "\n",
      "Comparison of Pascal and Delphi",
      "\n",
      ".mw-parser-output .nobold{font-weight:normal}",
      "Related to",
      "\n",
      "ALGOL",
      " (1958)",
      "\n",
      "Modula-2",
      " (1977)",
      "\n",
      "Ada",
      " (1983)",
      "\n",
      "Oberon",
      " (1986)",
      "\n",
      "Modula-3",
      " (1988)",
      "\n",
      "Oberon-2",
      " (1991)",
      "\n",
      "Component Pascal",
      " (1991)",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Embedded systems",
      "General terms",
      "\n",
      "ASIC",
      "\n",
      "Board support package",
      "\n",
      "Bootloader",
      "\n",
      "Consumer electronics",
      "\n",
      "Cross compiler",
      "\n",
      "Embedded database",
      "\n",
      "Embedded hypervisor",
      "\n",
      "Embedded OS",
      "\n",
      "Embedded software",
      "\n",
      "FPGA",
      "\n",
      "IoT",
      "\n",
      "Memory footprint",
      "\n",
      "Microcontroller",
      "\n",
      "Single-board computer",
      "\n",
      "Raspberry Pi",
      "\n",
      "SoC",
      "\n",
      "Firmware",
      " and controls",
      "\n",
      "Closed platform",
      "\n",
      "Crippleware",
      "\n",
      "Custom firmware",
      "\n",
      "Defective by Design",
      "\n",
      "Hacking of consumer electronics",
      "\n",
      "Homebrew (video games)",
      "\n",
      "iOS jailbreaking",
      "\n",
      "PlayStation 3 Jailbreak",
      "\n",
      "Proprietary firmware",
      "\n",
      "Rooting (Android)",
      "\n",
      "Vendor lock-in",
      "\n",
      "Boot loaders",
      "\n",
      "U-Boot",
      "\n",
      "Barebox",
      "\n",
      "Software libraries",
      "\n",
      "uClibc",
      "\n",
      "dietlibc",
      "\n",
      "Embedded GLIBC",
      "\n",
      "lwIP",
      "\n",
      "musl",
      "\n",
      "Programming tools",
      "\n",
      "Almquist shell",
      "\n",
      "Bitbake",
      "\n",
      "Buildroot",
      "\n",
      "BusyBox",
      "\n",
      "OpenEmbedded",
      "\n",
      "Stand-alone shell",
      "\n",
      "Toybox",
      "\n",
      "Yocto Project",
      "\n",
      "Operating systems",
      "\n",
      "Linux on embedded systems",
      "\n",
      "Linux for mobile devices",
      "\n",
      "Light-weight Linux distribution",
      "\n",
      "Real-time operating system",
      "\n",
      "Windows IoT",
      "\n",
      "Win CE",
      "\n",
      "Programming languages",
      "\n",
      "Ada",
      "\n",
      "Assembly language",
      "\n",
      "CAPL",
      "\n",
      "Embedded C",
      "\n",
      "Embedded C++",
      "\n",
      "Embedded Java",
      "\n",
      "MISRA C",
      "\n",
      "\n",
      "Lightweight browsers",
      "\n",
      "Open-source computing hardware",
      "\n",
      "Open-source robotics",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNE",
      ": ",
      "XX531014",
      "\n",
      "GND",
      ": ",
      "4000430-2",
      "\n",
      "LCCN",
      ": ",
      "sh85000774",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Ada_(programming_language)&oldid=981757230",
      "\""
    ],
    "lastUpdated": " 4 October 2020, at 08:05"
  },
  {
    "url": "https://en.wikipedia.org/wiki/ALGOL_68",
    "title": "ALGOL 68",
    "text": [
      "Programming language",
      "\n",
      "\n",
      "\n",
      "ALGOL 68",
      "Revised Report on the Algorithmic Language \u2013 Algol 68 Edited by: A. van Wijngaarden et al, September 1973",
      "[1]",
      "Paradigms",
      "Multi-paradigm",
      ": ",
      "concurrent",
      ", ",
      "imperative",
      "Family",
      "ALGOL",
      "Designed\u00a0by",
      "A. van Wijngaarden",
      ", ",
      "B. J. Mailloux",
      ", ",
      "J. E. L. Peck",
      " and ",
      "C. H. A. Koster",
      ", et al.",
      "First\u00a0appeared",
      "Final Report: 1968",
      "; 52\u00a0years ago",
      "\u00a0(",
      "1968",
      ")",
      "r0",
      "Stable release",
      "Algol 68/RR\n   / Revised Report: 1973",
      "; 47\u00a0years ago",
      "\u00a0(",
      "1973",
      ")",
      "r1",
      "\n",
      "Typing discipline",
      "static",
      ", ",
      "strong",
      ", ",
      "safe",
      ", ",
      "structural",
      "Scope",
      "Lexical",
      "Major ",
      "implementations",
      "ALGOL 68C",
      ", Algol 68 Genie (recent), ",
      "ALGOL 68-R",
      ", ",
      "ALGOL 68RS",
      ", ",
      "ALGOL 68S",
      ", ",
      "FLACC",
      ", ",
      "\u0410\u043b\u0433\u043e\u043b 68 \u041b\u0435\u043d\u0438\u043d\u0433\u0440\u0430\u0434/Leningrad Unit",
      ", ",
      "Odra ALGOL 68",
      "Dialects",
      "ALGOL 68/FR (Final Report",
      "r0",
      ")",
      "Influenced by",
      "ALGOL 60",
      ", ",
      "ALGOL Y",
      "Influenced",
      "C",
      ",",
      "[3]",
      "[5]",
      " ",
      "C++",
      ",",
      "[6]",
      " ",
      "Bourne shell",
      ", ",
      "KornShell",
      ", ",
      "Bash",
      ", ",
      "Steelman",
      ", ",
      "Ada",
      ", ",
      "Python",
      ",",
      "[7]",
      " ",
      "Seed7",
      ", ",
      "Mary",
      ", ",
      "S3",
      "\n",
      "\n",
      "\n",
      "\n",
      "This article contains Unicode 6.0 \"",
      "Miscellaneous Technical",
      "\" characters.",
      " Without proper ",
      "rendering support",
      ", you may see ",
      "question marks, boxes, or other symbols",
      " instead of something like \"\u2081\u2080\" (",
      "Decimal Exponent Symbol U+23E8 TTF",
      ").",
      "\n",
      "\n",
      "ALGOL 68",
      " (short for ",
      "Algorithmic Language 1968",
      ") is an ",
      "imperative",
      " ",
      "programming language",
      " that was conceived as a successor to the ",
      "ALGOL 60",
      " programming language, designed with the goal of a much wider scope of application and more rigorously defined ",
      "syntax",
      " and semantics.\n",
      "The complexity of the language's definition, which runs to several hundred pages filled with non-standard terminology, made ",
      "compiler",
      " implementation difficult and it was said it had \"no implementations and no users\". This was only partially true; ALGOL 68 did find use in a number of niche markets, notably in the ",
      "United Kingdom",
      " where it was popular on ",
      "International Computers Limited",
      " (ICL) machines, and in teaching roles. Outside these circles, use was relatively limited.\n",
      "Nevertheless, the contributions of ALGOL 68 to the field of ",
      "computer science",
      " have been deep, wide-ranging and enduring, although many of these contributions were only publicly identified when they had reappeared in subsequently developed programming languages. Many languages were developed specifically as a response to the perceived complexity of the language, the most notable being ",
      "Pascal",
      ", or were reimplementations for specific roles, like ",
      "Ada",
      ".\n",
      "Many languages of the 1970s trace their design specifically to ALGOL 68, selecting some features while abandoning others that were considered too complex or out-of-scope for given roles. Among these is the language ",
      "C",
      ", which was directly influenced by ALGOL 68, especially by its ",
      "strong typing",
      " and structures. Most modern languages trace at least some of their syntax to either C or Pascal, and thus directly or indirectly to ALGOL 68.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Overview",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "\n",
      "2.1",
      " ",
      "Origins",
      "\n",
      "2.2",
      " ",
      "Definition process",
      "\n",
      "2.3",
      " ",
      "Publication",
      "\n",
      "2.4",
      " ",
      "Implementations",
      "\n",
      "\n",
      "2.4.1",
      " ",
      "ALGOL 68-R",
      "\n",
      "2.4.2",
      " ",
      "Others",
      "\n",
      "\n",
      "\n",
      "2.5",
      " ",
      "Timeline",
      "\n",
      "2.6",
      " ",
      "The Algorithmic Language ALGOL 68 Reports",
      "\n",
      "2.7",
      " ",
      "Timeline of standardization",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Notable language elements",
      "\n",
      "\n",
      "3.1",
      " ",
      "Bold symbols and reserved words",
      "\n",
      "3.2",
      " ",
      "Units: Expressions",
      "\n",
      "3.3",
      " ",
      "mode: Declarations",
      "\n",
      "3.4",
      " ",
      "Coercions: casting",
      "\n",
      "\n",
      "3.4.1",
      " ",
      "Coercion hierarchy with examples",
      "\n",
      "\n",
      "\n",
      "3.5",
      " ",
      "pr & co: Pragmats and Comments",
      "\n",
      "3.6",
      " ",
      "Expressions and compound statements",
      "\n",
      "3.7",
      " ",
      "struct, union & [:]: Structures, unions and arrays",
      "\n",
      "3.8",
      " ",
      "proc: Procedures",
      "\n",
      "3.9",
      " ",
      "op: Operators",
      "\n",
      "\n",
      "3.9.1",
      " ",
      "Array, Procedure, Dereference and coercion operations",
      "\n",
      "3.9.2",
      " ",
      "Monadic operators",
      "\n",
      "3.9.3",
      " ",
      "Dyadic operators with associated priorities",
      "\n",
      "3.9.4",
      " ",
      "Assignation and identity relations etc",
      "\n",
      "3.9.5",
      " ",
      "Special characters",
      "\n",
      "\n",
      "\n",
      "3.10",
      " ",
      "transput: Input and output",
      "\n",
      "\n",
      "3.10.1",
      " ",
      "Books, channels and files",
      "\n",
      "3.10.2",
      " ",
      "formatted transput",
      "\n",
      "\n",
      "\n",
      "3.11",
      " ",
      "par: Parallel processing",
      "\n",
      "\n",
      "\n",
      "4",
      " ",
      "Examples of use",
      "\n",
      "\n",
      "4.1",
      " ",
      "Code sample",
      "\n",
      "4.2",
      " ",
      "Operating systems written in ALGOL 68",
      "\n",
      "4.3",
      " ",
      "Applications",
      "\n",
      "4.4",
      " ",
      "Libraries and APIs",
      "\n",
      "\n",
      "\n",
      "5",
      " ",
      "Program representation",
      "\n",
      "\n",
      "5.1",
      " ",
      "Example of different program representations",
      "\n",
      "\n",
      "\n",
      "6",
      " ",
      "Some Vanitas",
      "\n",
      "7",
      " ",
      "Comparisons with other languages",
      "\n",
      "8",
      " ",
      "Revisions",
      "\n",
      "\n",
      "8.1",
      " ",
      "The language of the unrevised report",
      "\n",
      "8.2",
      " ",
      "Extension proposals from IFIP WG 2.1",
      "\n",
      "8.3",
      " ",
      "True ALGOL 68s specification and implementation timeline",
      "\n",
      "8.4",
      " ",
      "Implementation specific extensions",
      "\n",
      "\n",
      "\n",
      "9",
      " ",
      "Quotes",
      "\n",
      "10",
      " ",
      "See also",
      "\n",
      "11",
      " ",
      "References",
      "\n",
      "\n",
      "11.1",
      " ",
      "Citations",
      "\n",
      "11.2",
      " ",
      "Works cited",
      "\n",
      "\n",
      "\n",
      "12",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Overview",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68 features include expression-based syntax, user-declared types and structures/tagged-unions, a reference model of variables and reference parameters, string, array and matrix slicing, and concurrency.\n",
      "ALGOL 68 was designed by the ",
      "International Federation for Information Processing",
      " (IFIP) ",
      "IFIP Working Group 2.1",
      ". On December 20, 1968, the language was formally adopted by the group, and then approved for publication by the General Assembly of IFIP.\n",
      "ALGOL 68 was defined using a ",
      "formalism",
      ", a two-level ",
      "formal grammar",
      ", invented by ",
      "Adriaan van Wijngaarden",
      ". ",
      "Van Wijngaarden grammars",
      " use a ",
      "context-free grammar",
      " to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language ",
      "technical standards",
      " are labelled ",
      "semantics",
      ", and must be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ",
      "ad hoc",
      " code attached to the formal language parser.\n",
      "\n",
      ".mw-parser-output .quotebox{background-color:#F9F9F9;border:1px solid #aaa;box-sizing:border-box;padding:10px;font-size:88%;max-width:100%}.mw-parser-output .quotebox.floatleft{margin:0.5em 1.4em 0.8em 0}.mw-parser-output .quotebox.floatright{margin:0.5em 0 0.8em 1.4em}.mw-parser-output .quotebox.centered{margin:0.5em auto 0.8em auto}.mw-parser-output .quotebox.floatleft p,.mw-parser-output .quotebox.floatright p{font-style:inherit}.mw-parser-output .quotebox-title{background-color:#F9F9F9;text-align:center;font-size:larger;font-weight:bold}.mw-parser-output .quotebox-quote.quoted:before{font-family:\"Times New Roman\",serif;font-weight:bold;font-size:large;color:gray;content:\" \u201c \";vertical-align:-45%;line-height:0}.mw-parser-output .quotebox-quote.quoted:after{font-family:\"Times New Roman\",serif;font-weight:bold;font-size:large;color:gray;content:\" \u201d \";line-height:0}.mw-parser-output .quotebox .left-aligned{text-align:left}.mw-parser-output .quotebox .right-aligned{text-align:right}.mw-parser-output .quotebox .center-aligned{text-align:center}.mw-parser-output .quotebox cite{display:block;font-style:normal}@media screen and (max-width:360px){.mw-parser-output .quotebox{min-width:100%;margin:0 0 0.8em!important;float:none!important}}",
      "\n",
      "ALGOL 68 was the first (and possibly one of the last) major language for which a full formal definition was made before it was implemented. ",
      "\n",
      "C. H. A. Koster",
      "[8]",
      "\n",
      "\n",
      "\n",
      "The main aims and principles of design of ALGOL 68:\n",
      "\n",
      "Completeness and clarity of description",
      "[9]",
      "\n",
      "Orthogonality",
      " of design",
      "[10]",
      "\n",
      "Security",
      "[11]",
      "\n",
      "Efficiency:",
      "[12]",
      "\n",
      "Static mode checking",
      "\n",
      "Mode-independent parsing",
      "\n",
      "Independent compiling",
      "\n",
      "Loop optimizing",
      "\n",
      "Representations \u2013 in minimal & larger ",
      "character sets",
      "\n",
      "ALGOL 68 has been criticized, most prominently by some members of its design committee such as ",
      "C. A. R. Hoare",
      " and ",
      "Edsger Dijkstra",
      ", for abandoning the simplicity of ",
      "ALGOL 60",
      ", becoming a vehicle for complex or overly general ideas, and doing little to make the ",
      "compiler",
      " writer's task easier, in contrast to deliberately simple contemporaries (and competitors) such as ",
      "C",
      ", ",
      "S-algol",
      " and ",
      "Pascal",
      ".\n",
      "In 1970, ",
      "ALGOL 68-R",
      " became the first working compiler for ALGOL 68.\n",
      "In the 1973 revision, certain features \u2013 such as ",
      "proceduring",
      ", gommas",
      "[13]",
      " and ",
      "formal bounds",
      " \u2013 were omitted.",
      "[14]",
      " C.f. ",
      "The language of the unrevised report.",
      "r0",
      "\n",
      "Though European defence agencies (in Britain ",
      "Royal Signals and Radar Establishment",
      " (RSRE)) promoted the use of ALGOL 68 for its expected security advantages, the American side of the NATO alliance decided to develop a different project, the language ",
      "Ada",
      ", making its use obligatory for US defense contracts.\n",
      "ALGOL 68 also had a notable influence in the ",
      "Soviet Union",
      ", details of which can be found in ",
      "Andrey Ershov",
      "'s 2014 paper: \"ALGOL 68 and Its Impact on the USSR and Russian Programming\",",
      "[15]",
      " and \"\u0410\u043b\u0433\u043e\u043b 68 \u0438 \u0435\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0421\u0421\u0421\u0420 \u0438 \u0420\u043e\u0441\u0441\u0438\u0438\".",
      "[16]",
      "\n",
      "Steve Bourne",
      ", who was on the ALGOL 68 revision committee, took some of its ideas to his ",
      "Bourne shell",
      " (and thereby, to descendant ",
      "Unix shells",
      " such as ",
      "Bash",
      ") and to ",
      "C",
      " (and thereby to descendants such as ",
      "C++",
      ").\n",
      "The complete history of the project can be found in ",
      "C. H. Lindsey",
      "'s ",
      "A History of ALGOL 68",
      ".",
      "[17]",
      "[18]",
      "\n",
      "For a full-length treatment of the language, see \"Programming ALGOL 68 Made Easy\"",
      "[19]",
      " by Dr. Sian Mountbatten, or \"Learning ALGOL 68 Genie\"",
      "[20]",
      " by Marcel van der Veer which includes the Revised Report.\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Origins",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68, as the name implies, is a follow-on to the ",
      "ALGOL",
      " language that was first formalized in 1960. That same year the ",
      "International Federation for Information Processing",
      " (IFIP) formed and started the Working Group on ALGOL, or WG2.1. This group released an updated ALGOL 60 specification in Rome in April 1962. At a follow-up meeting in March 1964, it was agreed that the group should begin work on two follow-on standards, ",
      "ALGOL X",
      " which would be a redefinition of the language with some additions, and an ",
      "ALGOL Y",
      ", which would have the ability to modify its own programs in the style of the ",
      "LISP",
      ".",
      "[21]",
      "\n",
      "\n",
      "Definition process",
      "[",
      "edit",
      "]",
      "\n",
      "The first meeting of the ALGOL X group was held in ",
      "Princeton University",
      " in May 1965. A report of the meeting noted two broadly supported themes, the introduction of ",
      "strong typing",
      " and interest in ",
      "Euler's",
      " concepts of 'trees' or 'lists' for handling collections.",
      "[22]",
      "\n",
      "At the second meeting in October in France, three formal proposals were presented, ",
      "Niklaus Wirth",
      "'s ",
      "ALGOL W",
      " along with comments about record structures by ",
      "C.A.R. (Tony) Hoare",
      ", a similar language by Gerhard Seegm\u00fcller, and a paper by ",
      "Adriaan van Wijngaarden",
      " on \"Orthogonal design and description of a formal language\". The latter, written in almost indecipherable \"W-Grammar\", proved to be a decisive shift in the evolution of the language. The meeting closed with an agreement that van Wijngaarden would re-write the Wirth/Hoare submission using his W-Grammar.",
      "[22]",
      "\n",
      "This seemingly simple task ultimately proved more difficult than expected, and the follow-up meeting had to be delayed six months. When it met in April 1966 in ",
      "Kootwijk",
      ", van Wijngaarden's draft remained incomplete and Wirth and Hoare presented a version using more traditional descriptions. It was generally agreed that their paper was \"the right language in the wrong formalism\".",
      "[23]",
      " As these approaches were explored, it became clear there was a difference in the way parameters were described that would have real-world effects, and while Wirth and Hoare protested that further delays might become endless, the committee decided to wait for van Wijngaarden's version. Wirth then implemented their current definition as ALGOL W.",
      "[24]",
      "\n",
      "At the next meeting in ",
      "Warsaw",
      " in October 1966,",
      "[25]",
      " there was an initial report from the I/O Subcommittee who had met at the ",
      "Oak Ridge National Laboratory",
      " and the ",
      "University of Illinois",
      " but had not yet made much progress. The two proposals from the previous meeting were again explored, and this time a new debate emerged about the use of ",
      "pointers",
      "; ALGOL W used them only to refer to records, while van Wijngaarden's version could point to any object. To add confusion, ",
      "John McCarthy",
      " presented a new proposal for ",
      "operator overloading",
      " and the ability to string together and ",
      "or",
      " constructs, and ",
      "Klaus Samelson",
      " wanted to allow ",
      "anonymous functions",
      ". In the resulting confusion, there was some discussion of abandoning the entire effort.",
      "[24]",
      " The confusion continued through what was supposed to be the ALGOL Y meeting in ",
      "Zandvoort",
      " in May 1967.",
      "[22]",
      "\n",
      "\n",
      "Publication",
      "[",
      "edit",
      "]",
      "\n",
      "A draft report was finally published in February 1968. This was met by \"shock, horror and dissent\",",
      "[22]",
      " mostly due to the hundreds of pages of unreadable grammar and odd terminology. ",
      "Charles H. Lindsey",
      " attempted to figure out what \"language was hidden inside of it\",",
      "[26]",
      " a process that took six man-weeks of effort. The resulting paper, \"ALGOL 68 with fewer tears\", was widely circulated. At a wider information processing meeting in ",
      "Zurich",
      " in May 1968, attendees complained that the language was being forced upon them and that IFIP was \"the true villain of this unreasonable situation\" as the meetings were mostly closed and there was no formal feedback mechanism. Wirth and ",
      "Peter Naur",
      " formally resigned their authorship positions in WG2.1 at this point.",
      "[26]",
      "\n",
      "The next WG2.1 meeting took place in ",
      "Tirrenia",
      " in June 1968. It was supposed to discuss the release of compilers and other issues, but instead devolved into a discussion on the language itself. van Wijngaarden responded by saying (or threatening) that he would release only one more version of the report. By this point Naur, Hoare and Wirth had left the effort, and several more were threatening to do so.",
      "[27]",
      " Several more meetings followed, ",
      "North Berwick",
      " in August 1968, Munich in December which produced the release of the official Report in January 1969 but also resulted in a contentious Minority Report being written. Finally, at ",
      "Banff, Alberta",
      " in September 1969, the project was generally considered complete and the discussion was primarily on errata and a greatly expanded Introduction to the Report.",
      "[28]",
      "\n",
      "The effort took five years, burned out many of the greatest names in ",
      "computer science",
      ", and on several occasions became deadlocked over issues both in the definition and the group as a whole. Hoare released a \"Critique of ALGOL 68\" almost immediately,",
      "[29]",
      " which has been widely referenced in many works. Wirth went on to further develop the ALGOL W concept and released this as Pascal in 1970.\n",
      "\n",
      "Implementations",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68-R",
      "[",
      "edit",
      "]",
      "\n",
      "The first implementation of the standard, based on the late-1968 draft Report, was introduced by the ",
      "Royal Radar Establishment",
      " in the UK as ",
      "ALGOL 68-R",
      " in July 1970. This was, however, a subset of the full language, and ",
      "Barry Mailloux",
      ", the final editor of the Report, joked that \"It is a question of morality.  We have a Bible and you are sinning!\"",
      "[30]",
      " This version nevertheless became very popular on the ",
      "ICL",
      " machines, and became a widely-used language in military coding, especially in the UK.",
      "[31]",
      "\n",
      "Among the changes in 68-R was the requirement for all variables to be declared before their first use. This had a significant advantage that it allowed the compiler to be one-pass, as space for the variables in the ",
      "activation record",
      " was set aside before it was used. However, this change also had the side-effect of demanding the ",
      "proc",
      "s be declared twice, once as a declaration of the types, and then again as the actual body of code. Another change was to eliminate the assumed ",
      "void",
      " mode, an expression that returns no value (known as a ",
      "statement",
      " in other languages) and demanding the word ",
      "void",
      " be added where it would have been assumed. Additionally, 68-R eliminated the explicit ",
      "parallel processing",
      " commands based on ",
      "par",
      ".",
      "[30]",
      "\n",
      "\n",
      "Others",
      "[",
      "edit",
      "]",
      "\n",
      "The first full implementation of the language was introduced in 1974 by CDC Netherlands for the ",
      "Control Data",
      " mainframe series. This saw limited use, mostly teaching in Germany and the Netherlands.",
      "[31]",
      "\n",
      "A version similar to 68-R was introduced from ",
      "Carnegie Mellon University",
      " in 1976 as 68S, and was again a one-pass compiler based on various simplifications of the original and intended for use on smaller machines like the ",
      "DEC PDP-11",
      ". It too was used mostly for teaching purposes.",
      "[31]",
      "\n",
      "A version for ",
      "IBM",
      " mainframes did not become available until 1978, when one was released from ",
      "Cambridge University",
      ". This was \"nearly complete\". Lindsey released a version for small machines including the ",
      "IBM PC",
      " in 1984.",
      "[31]",
      "\n",
      "Two open source Algol 68 implementations are known:",
      "[32]",
      "\n",
      "\n",
      "a68g",
      ", ",
      "GPLv3",
      ", written by Marcel van der Veer;",
      "\n",
      "algol68toc",
      ", an ",
      "Open-source software",
      " port of ",
      "ALGOL 68RS",
      ".",
      "\n",
      "Timeline",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "Year",
      "\n",
      "Event",
      "\n",
      "Contributor\n",
      "\n",
      "\n",
      "March 1959",
      "\n",
      "ALGOL Bulletin",
      " Issue 1 (First)",
      "\n",
      "Peter Naur",
      " / ",
      "ACM",
      "\n",
      "\n",
      "\n",
      "February 1968",
      "\n",
      "Draft Report",
      "(DR)",
      " Published",
      "[33]",
      "\n",
      "IFIP",
      " ",
      "Working Group 2.1",
      "\n",
      "\n",
      "\n",
      "March 1968",
      "\n",
      "Algol 68 Final Report",
      "r0",
      " Presented at Munich Meeting",
      "\n",
      "IFIP Working Group 2.1\n",
      "\n",
      "\n",
      "June 1968",
      "\n",
      "Meeting in Tirrenia, Italy",
      "\n",
      "IFIP Working Group 2.1\n",
      "\n",
      "\n",
      "Aug 1968",
      "\n",
      "Meeting in North Berwick, Scotland",
      "\n",
      "IFIP Working Group 2.1\n",
      "\n",
      "\n",
      "December 1968",
      "\n",
      "ALGOL 68 Final Report",
      "r0",
      " Presented at Munich Meeting",
      "\n",
      "IFIP Working Group 2.1\n",
      "\n",
      "\n",
      "April 1970",
      "\n",
      "ALGOL 68-R",
      "(R)",
      " under ",
      "GEORGE 3",
      " on an ",
      "ICL",
      " ",
      "1907F",
      "\n",
      "Royal Signals and Radar Est.",
      "\n",
      "\n",
      "\n",
      "September 1973",
      "\n",
      "Algol 68 Revised Report",
      "[34]",
      "r1",
      " Published",
      "\n",
      "IFIP Working Group 2.1\n",
      "\n",
      "\n",
      "1975",
      "\n",
      "ALGOL 68C",
      "(C)",
      " \u2013 transportable compiler (zcode ",
      "VM",
      ")",
      "\n",
      "S. Bourne",
      ", ",
      "Andrew Birrell",
      ", and ",
      "Michael Guy",
      "\n",
      "\n",
      "\n",
      "June 1975",
      "\n",
      "G. E. Hedrick and Alan Robertson. The Oklahoma State ALGOL 68 Subset Compiler. 1975 International Conference on ALGOL 68.\n",
      "\n",
      "\n",
      "June 1977",
      "\n",
      "Strathclyde ALGOL 68 conference, Scotland",
      "\n",
      "ACM\n",
      "\n",
      "\n",
      "May 1978",
      "\n",
      "Proposals for ALGOL H \u2013 A Superlanguage of ALGOL 68",
      "[35]",
      "\n",
      "A. P. Black, V. J. Rayward-Smith\n",
      "\n",
      "\n",
      "1984",
      "\n",
      "Full ",
      "ALGOL 68S",
      "(S)",
      " compiler for Sun, SPARC, and PCs",
      "\n",
      "C. H. Lindsey et al, Manchester\n",
      "\n",
      "\n",
      "August 1988",
      "\n",
      "ALGOL Bulletin",
      " Issue 52 (last)",
      "\n",
      "Ed. C. H. Lindsey / ACM\n",
      "\n",
      "\n",
      "May 1997",
      "\n",
      "Algol68 S",
      "(S)",
      " published on the internet",
      "[36]",
      "\n",
      "Charles H. Lindsey",
      "\n",
      "\n",
      "\n",
      "November 2001",
      "\n",
      "Algol 68 Genie",
      "(G)",
      " published on the internet",
      "[37]",
      " (GNU GPL open source licensing)",
      "\n",
      "Marcel van der Veer\n",
      "\n",
      "\"A Shorter History of Algol 68\"",
      "\n",
      "ALGOL 68 \u2013 3rd generation ALGOL",
      "\n",
      "The Algorithmic Language ALGOL 68 Reports",
      "[",
      "edit",
      "]",
      "\n",
      "March 1968: Draft Report on the Algorithmic Language ALGOL 68",
      "[38]",
      " \u2013 Edited by: ",
      "A. van Wijngaarden",
      ", ",
      "B. J. Mailloux",
      ", ",
      "J. E. L. Peck",
      " and ",
      "C. H. A. Koster",
      ".",
      "\n",
      ".mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}",
      "\"Van Wijngaarden once characterized the four authors, somewhat tongue-in-cheek, as: Koster: ",
      "transputter",
      ", Peck: syntaxer, Mailloux: implementer, Van Wijngaarden: party ideologist.\" \u2013 Koster.",
      "\n",
      "October 1968: Penultimate Draft Report on the Algorithmic Language ALGOL 68 \u2013 Chapters 1-9",
      "[39]",
      " Chapters 10-12",
      "[40]",
      " \u2013 Edited by: A. van Wijngaarden, B.J. Mailloux, J. E. L. Peck and C. H. A. Koster.",
      "\n",
      "December 1968: Report on the Algorithmic Language ALGOL 68 \u2013 Offprint from Numerische Mathematik, 14, 79-218 (1969); Springer-Verlag.",
      "[41]",
      " \u2013 Edited by: A. van Wijngaarden, B. J. Mailloux, J. E. L. Peck and C. H. A. Koster.\n",
      "WG 2.1 members active in the original design of ALGOL 68:",
      "[18]",
      " ",
      "Friedrich L. Bauer",
      " \u2022 ",
      "Hans Bekic",
      " \u2022 ",
      "Edsger Dijkstra",
      "\u203b \u2022 ",
      "Fraser Duncan",
      "\u203b \u2022 ",
      "Jan Garwick",
      "\u203b \u2022 ",
      "Gerhard Goos",
      " \u2022 ",
      "Tony Hoare",
      "\u203b \u2022 ",
      "Peter Zilahy Ingerman",
      " \u2022 ",
      "Kees Koster",
      " \u2022 ",
      "Peter Landin",
      " \u2022 ",
      "Charles Lindsey",
      " \u2022 ",
      "Barry Mailloux",
      " \u2022 ",
      "John McCarthy",
      " \u2022 ",
      "Jack Merner",
      " \u2022 ",
      "Peter Naur",
      "\u2021 \u2022 ",
      "Manfred Paul",
      " \u2022 ",
      "John Peck",
      " \u2022 ",
      "Willem van der Poel",
      " \u2022 ",
      "Brian Randell",
      "\u203b \u2022 ",
      "Doug Ross",
      " \u2022 ",
      "Klaus Samelson",
      " \u2022 ",
      "Gerhard Seegm\u00fcller",
      "\u203b \u2022 ",
      "Michel Sintzoff",
      " \u2022 ",
      "Wlad Turski",
      "\u203b \u2022 Aad van Wijngaarden \u2022 ",
      "Niklaus Wirth",
      "\u2021 \u2022 ",
      "Mike Woodger",
      "\u203b  \u2022 ",
      "Nobuo Yoneda",
      "; Key: \u203bSignatories to the Minority Report. \u2021Resigned after [MR 93].",
      "\n",
      "September 1973: Revised Report on the Algorithmic Language Algol 68 \u2013 Springer-Verlag 1976",
      "[42]",
      " \u2013 Edited by: A. van Wijngaarden, B. J. Mailloux, ",
      "J. E. L. Peck",
      ", C.H.A. Koster, ",
      "M. Sintzoff",
      ", ",
      "C. H. Lindsey",
      ", ",
      "L. G. L. T. Meertens",
      " and ",
      "R. G. Fisker",
      ".",
      "\n",
      "Timeline of standardization",
      "[",
      "edit",
      "]",
      "\n",
      "1968: On 20 December 1968, the \"Final Report\" (MR 101) was adopted by the Working Group, then subsequently approved by the General Assembly of ",
      "UNESCO",
      "'s ",
      "IFIP",
      " for publication. Translations of the standard were made for ",
      "Russian",
      ", ",
      "German",
      ", ",
      "French",
      " and ",
      "Bulgarian",
      ", and then later ",
      "Japanese",
      " and ",
      "Chinese",
      ".",
      "[43]",
      " The standard was also made available in ",
      "Braille",
      ".\n",
      "1984: ",
      "TC97",
      " considered Algol 68 for standardisation as \"New Work Item\" TC97/N1642 ",
      "[2]",
      "[3]",
      "[",
      "permanent dead link",
      "]",
      ". West Germany, Belgium, Netherlands, USSR and Czechoslovakia willing to participate in preparing the standard but the USSR and Czechoslovakia \"were not the right kinds of member of the right ISO committees\"",
      "[4]",
      " and Algol 68's ISO standardisation stalled.",
      "[5]",
      "\n",
      "1988: Subsequently ALGOL 68 became one of the ",
      "GOST",
      " standards in Russia.\n",
      "\n",
      "GOST 27974-88 Programming language ALGOL 68 \u2013 \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0410\u041b\u0413\u041e\u041b 68",
      "[44]",
      "\n",
      "GOST 27975-88 Programming language ALGOL 68 extended \u2013 \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0410\u041b\u0413\u041e\u041b 68 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439",
      "[45]",
      "\n",
      "Notable language elements",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "\n",
      "This article contains Unicode 6.0 \"",
      "Miscellaneous Technical",
      "\" characters.",
      " Without proper ",
      "rendering support",
      ", you may see ",
      "question marks, boxes, or other symbols",
      " instead of something like \"\u2081\u2080\" (",
      "Decimal Exponent Symbol U+23E8 TTF",
      ").",
      "\n",
      "\n",
      "Bold symbols and reserved words",
      "[",
      "edit",
      "]",
      "\n",
      "The standard language contains about sixty reserved words, typically bolded in print, and some with \"brief symbol\" equivalents:\n",
      "\n",
      "mode",
      ", ",
      "op",
      ", ",
      "prio",
      ", ",
      "proc",
      ",\n",
      "flex",
      ", ",
      "heap",
      ", ",
      "loc",
      ", ",
      "long",
      ", ",
      "ref",
      ", ",
      "short",
      ",\n",
      "bits",
      ", ",
      "bool",
      ", ",
      "bytes",
      ", ",
      "char",
      ", ",
      "compl",
      ", ",
      "int",
      ", ",
      "real",
      ", ",
      "sema",
      ", ",
      "string",
      ", ",
      "void",
      ",\n",
      "channel",
      ", ",
      "file",
      ", ",
      "format",
      ", ",
      "struct",
      ", ",
      "union",
      ",\n",
      "at",
      " \"@\", ",
      "either",
      "r0",
      ", ",
      "is",
      " \":=:\", ",
      "isnt",
      "  ",
      "is not",
      "r0",
      " \":/=:\" \":\u2260:\", ",
      "of",
      " \"\u2192\"",
      "r0",
      ", ",
      "true",
      ", ",
      "false",
      ", ",
      "empty",
      ", ",
      "nil",
      " \"\u25cb\", ",
      "skip",
      " \"~\",\n",
      "co",
      " \"\u00a2\", ",
      "comment",
      " \"\u00a2\", ",
      "pr",
      ", ",
      "pragmat",
      ",\n",
      "case",
      " ~ ",
      "in",
      " ~ ",
      "ouse",
      " ~ ",
      "in",
      " ~ ",
      "out",
      " ~ ",
      "esac",
      " \"( ~ | ~ |: ~ | ~ | ~ )\",\n",
      "for",
      " ~ ",
      "from",
      " ~ ",
      "to",
      " ~ ",
      "by",
      " ~ ",
      "while",
      " ~ ",
      "do",
      " ~ ",
      "od",
      ",\n",
      "if",
      " ~ ",
      "then",
      " ~ ",
      "elif",
      " ~ ",
      "then",
      " ~ ",
      "else",
      " ~ ",
      "fi",
      " \"( ~ | ~ |: ~ | ~ | ~ )\",\n",
      "par",
      " ",
      "begin",
      " ~ ",
      "end",
      " \"( ~ )\", ",
      "go to",
      ", ",
      "goto",
      ", ",
      "exit",
      " \".\"",
      "r0",
      ".\n",
      "\n",
      "Units: Expressions",
      "[",
      "edit",
      "]",
      "\n",
      "The basic language construct is the ",
      "unit",
      ". A unit may be a ",
      "formula",
      ", an ",
      "enclosed clause",
      ", a ",
      "routine text",
      " or one of several technically needed constructs (assignation, jump, skip, nihil). The technical term ",
      "enclosed clause",
      " unifies some of the inherently bracketing constructs known as ",
      "block",
      ", ",
      "do statement",
      ", ",
      "switch statement",
      " in other contemporary languages. When keywords are used, generally the reversed character sequence of the introducing keyword is used for terminating the enclosure, e.g. ( ",
      "if",
      " ~ ",
      "then",
      " ~ ",
      "else",
      " ~ ",
      "fi",
      ", ",
      "case",
      " ~ ",
      "in",
      " ~ ",
      "out",
      " ~ ",
      "esac",
      ", ",
      "for",
      " ~ ",
      "while",
      " ~ ",
      "do",
      " ~ ",
      "od",
      " ). This ",
      "Guarded Command",
      " syntax was reused by ",
      "Stephen Bourne",
      " in the common ",
      "Unix",
      " ",
      "Bourne shell",
      ". An expression may also yield a ",
      "multiple value",
      ", which is constructed from other values by a ",
      "collateral clause",
      ". This construct just looks like the parameter pack of a procedure call.\n",
      "\n",
      "mode: Declarations",
      "[",
      "edit",
      "]",
      "\n",
      "The basic ",
      "data types",
      " (called ",
      "mode",
      "s in Algol 68 parlance) are ",
      "real",
      ", ",
      "int",
      ", ",
      "compl",
      " (",
      "complex number",
      "), ",
      "bool",
      ", ",
      "char",
      ", ",
      "bits",
      " and ",
      "bytes",
      ". For example:\n",
      "\n",
      "int",
      " n = 2;\n",
      "co",
      " n is fixed as a constant of 2. ",
      "co",
      "\n",
      "int",
      " m\u00a0:= 3;\n",
      "co",
      " m is a newly created local ",
      "variable",
      " whose value is initially set to 3. ",
      "co",
      "\n",
      "co",
      "    This is short for ref int m = loc int\u00a0:= 3; ",
      "co",
      "\n",
      "real",
      " avogadro = 6.0221415\u23e823; ",
      "co",
      " Avogadro's number ",
      "co",
      "\n",
      "long long real",
      " long long pi = 3.14159 26535 89793 23846 26433 83279 50288 41971 69399 37510;\n",
      "compl",
      " square root of minus one = 0 \u22a5 1;\n",
      "\n",
      "However, the declaration ",
      "real",
      " x;",
      " is just ",
      "syntactic sugar",
      " for ",
      "ref",
      " ",
      "real",
      " x = ",
      "loc",
      " ",
      "real",
      ";",
      ". That is, ",
      "x",
      " is really the ",
      "constant identifier",
      " for a ",
      "reference to",
      " a newly generated local ",
      "real",
      " variable.\n",
      "Furthermore, instead of defining both ",
      "float",
      " and ",
      "double",
      ", or ",
      "int",
      " and ",
      "long",
      " and ",
      "short",
      ", etc., ALGOL 68 provides ",
      "modifiers",
      ", so that the presently common ",
      "double",
      " would be written as ",
      "long",
      " ",
      "real",
      " or ",
      "long",
      " ",
      "long",
      " ",
      "real",
      " instead, for example. The ",
      "prelude constants",
      " ",
      "max real",
      " and ",
      "min long int",
      " are provided to adapt programs to different implementations.\n",
      "All variables need to be declared, the declaration does not have to appear prior to the first use.\n",
      "primitive-declarer: ",
      "int",
      ", ",
      "real",
      ", ",
      "compl",
      ", ",
      "complex",
      "G",
      ", ",
      "bool",
      ", ",
      "char",
      ", ",
      "string",
      ", ",
      "bits",
      ", ",
      "bytes",
      ", ",
      "format",
      ", ",
      "file",
      ", ",
      "pipe",
      "G",
      ", ",
      "channel",
      ", ",
      "sema",
      "\n",
      "\n",
      "bits",
      " \u2013 a \"packed vector\" of ",
      "bool",
      ".",
      "\n",
      "bytes",
      " \u2013 a \"packed vector\" of ",
      "char",
      ".",
      "\n",
      "string",
      " \u2013 a ",
      "flex",
      "ible array of ",
      "char",
      ".",
      "\n",
      "sema",
      " \u2013 a ",
      "sema",
      "phore",
      " which can be initialised with the ",
      "op",
      "erator ",
      "level",
      ".",
      "\n",
      "Complex types can be created from simpler ones using various type constructors:\n",
      "\n",
      "ref",
      " ",
      "mode",
      " \u2013 a reference to a value of type ",
      "mode",
      ", similar to ",
      "&",
      " in C/C++ and ",
      "ref",
      " in Pascal",
      "\n",
      "struct",
      " \u2013 used to build structures, like ",
      "struct",
      " in C/C++ and ",
      "record",
      " in Pascal",
      "\n",
      "union",
      " \u2013 used to build unions, like in C/C++ and Pascal",
      "\n",
      "proc",
      " \u2013 used to specify procedures, like functions in C/C++ and procedures/functions in Pascal",
      "\n",
      "For some examples, see ",
      "Comparison of ALGOL 68 and C++",
      ".\n",
      "Other declaration symbols include:  ",
      "flex",
      ", ",
      "heap",
      ", ",
      "loc",
      ", ",
      "ref",
      ", ",
      "long",
      ", ",
      "short",
      ", ",
      "event",
      "S",
      "\n",
      "\n",
      "flex",
      " \u2013 declare the array to be flexible, i.e. it can grow in length on demand.",
      "\n",
      "heap",
      " \u2013 allocate variable some free space from the global heap.",
      "\n",
      "loc",
      " \u2013 allocate variable some free space of the local stack.",
      "\n",
      "long",
      " \u2013 declare an ",
      "int",
      ", ",
      "real",
      " or ",
      "compl",
      " to be of a ",
      "long",
      "er size.",
      "\n",
      "short",
      " \u2013 declare an ",
      "int",
      ", ",
      "real",
      " or ",
      "compl",
      " to be of a ",
      "short",
      "er size.",
      "\n",
      "A name for a mode (type) can be declared using a ",
      "mode",
      " declaration,\nwhich is similar to ",
      "typedef",
      " in C/C++ and ",
      "type",
      " in Pascal:\n",
      "\n",
      " ",
      "int",
      " max=99;\n ",
      "mode",
      " newmode = [0:9][0:max]",
      "struct",
      " (\n     ",
      "long",
      " ",
      "real",
      " a, b, c, ",
      "short",
      " ",
      "int",
      " i, j, k, ",
      "ref",
      " ",
      "real",
      " r\n );\n",
      "\n",
      "This is similar to the following C code:\n",
      "\n",
      "  ",
      "const",
      " ",
      "int",
      " ",
      "max",
      "=",
      "99",
      ";",
      "\n  ",
      "typedef",
      " ",
      "struct",
      " ",
      "{",
      "\n      ",
      "double",
      " ",
      "a",
      ",",
      " ",
      "b",
      ",",
      " ",
      "c",
      ";",
      " ",
      "short",
      " ",
      "i",
      ",",
      " ",
      "j",
      ",",
      " ",
      "k",
      ";",
      " ",
      "float",
      " ",
      "*",
      "r",
      ";",
      "\n  ",
      "}",
      " ",
      "newmode",
      "[",
      "9",
      "+",
      "1",
      "][",
      "max",
      "+",
      "1",
      "];",
      "\n",
      "\n",
      "For ALGOL 68, only the ",
      "newmode",
      " mode-indication appears to the left of the equals symbol, and most notably the construction is made, and can be read, from left to right without regard to priorities. Also, the ",
      "lower bound",
      " of Algol 68 arrays is one by default, but can be any integer from -",
      "max int",
      " to ",
      "max int",
      ".\n",
      "Mode declarations allow types to be recursive: defined directly or indirectly in terms of themselves.\nThis is subject to some restrictions \u2013 for instance, these declarations are illegal:\n",
      "\n",
      " ",
      "mode",
      " A = ",
      "ref",
      " A\n ",
      "mode",
      " A = ",
      "struct",
      " (A a, B b)\n ",
      "mode",
      " A = ",
      "proc",
      " (A a) A\n",
      "\n",
      "while these are valid:\n",
      "\n",
      " ",
      "mode",
      " A = ",
      "struct",
      " (",
      "ref",
      " A a, B b)\n ",
      "mode",
      " A = ",
      "proc",
      " (",
      "ref",
      " A a) ",
      "ref",
      " A\n",
      "\n",
      "Coercions: casting",
      "[",
      "edit",
      "]",
      "\n",
      "The ",
      "coercions",
      " produce a coercee from a coercend according to three criteria: the a priori mode of the coercend before the application of any coercion, the a posteriori mode of the coercee required after those coercions, and the syntactic position or \"sort\" of the coercee. Coercions may be cascaded.\n",
      "The six possible coercions are termed \"deproceduring\", \"dereferencing\", \"uniting\", \"widening\", \"rowing\", and \"voiding\". Each coercion, except for \"uniting\", prescribes a corresponding dynamic effect on the associated values. Hence, a number of primitive actions can be programmed implicitly by coercions.\n",
      "Context strength \u2013 allowed coercions:\n",
      "\n",
      "soft \u2013 deproceduring",
      "\n",
      "weak \u2013 dereferencing or deproceduring, yielding a name",
      "\n",
      "meek \u2013 dereferencing or deproceduring",
      "\n",
      "firm \u2013 meek, followed by uniting",
      "\n",
      "strong \u2013 firm, followed by widening, rowing or voiding",
      "\n",
      "Coercion hierarchy with examples",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68 has a hierarchy of contexts which determine the kind of coercions available at a particular point in the program. These contexts are:\n",
      "\n",
      "\n",
      "\n",
      "Context",
      "\n",
      "\n",
      "Context location\n",
      "\n",
      "Coercions available\n",
      "\n",
      "Coercion examples in the context\n",
      "\n",
      "\n",
      "Soft",
      "\n",
      "\n",
      "Weak",
      "\n",
      "\n",
      "Meek",
      "\n",
      "\n",
      "Firm",
      "\n",
      "\n",
      "Strong",
      "\n",
      "\n",
      "\n",
      "Strong",
      "\n",
      "\n",
      "Right hand side of:\n",
      "Identity-declarations, as \"~\" in: ",
      "REAL x = ~",
      "\n",
      "Initialisations, as \"~\" in: ",
      "REAL x\u00a0:= ~",
      "\n",
      "Also:\n",
      "\n",
      "Actual-parameters of calls, as \"~\" in:",
      "PROC: sin(~)",
      "\n",
      "Enclosed clauses of casts, as \"~\" in: ",
      "REAL(~)",
      "\n",
      "Units of routine-texts",
      "\n",
      "Statements yielding VOID",
      "\n",
      "All parts (but one) of a balanced clause",
      "\n",
      "One side of an identity relation, as \"~\" in: ",
      " ~ IS ~",
      "\n",
      "\n",
      " deproc\u200bedur\u200bing",
      "\n",
      "\n",
      " All ",
      "soft",
      " then weak derefer\u200bencing (deref\u200berencing or deproc\u200beduring, yield\u200bing a name)",
      "\n",
      "\n",
      "All ",
      "weak",
      " then derefer\u200benc\u200bing (deref\u200berenc\u200bing or deproc\u200bedur\u200bing)",
      "\n",
      "\n",
      " All ",
      "meek",
      " then unit\u200bing ",
      "\n",
      "\n",
      " All ",
      "firm",
      " then widen\u200bing, rowing or voiding",
      "\n",
      "\n",
      "\n",
      "Widening occurs if there is no loss of precision. For example: An INT will be coerced to a REAL, and a REAL will be coerced to a LONG REAL. But not vice versa.  Examples:\n",
      "\n",
      "INT to LONG INT\nINT to REAL\nREAL to COMPL\nBITS to []BOOL\nBYTES to STRING",
      "\n",
      "A variable can also be coerced (rowed) to an array of length 1.\n",
      "For example:\n",
      "\n",
      "INT to [1]INT\nREAL to [1]REAL",
      " etc.\n",
      "\n",
      "\n",
      "Firm",
      "\n",
      "\n",
      "\n",
      "Operands of formulas as \"~\" in:",
      "OP: ~ * ~",
      "\n",
      "Parameters of transput calls",
      "\n",
      "\n",
      "Example:\n",
      "UNION(INT,REAL) var\u00a0:= 1",
      "\n",
      "\n",
      "\n",
      "\n",
      "Meek",
      "\n",
      "\n",
      "\n",
      "Trimscripts (yielding INT)",
      "\n",
      "Enquiries: e.g. as \"~\" in the following",
      "\n",
      "IF ~ THEN ... FI",
      " and \n",
      "FROM ~ BY ~ TO ~ WHILE ~ DO ... OD etc",
      "\n",
      "\n",
      "Primaries of calls (e.g. sin in sin(x))",
      "\n",
      "\n",
      "Examples:\n",
      "REF REF BOOL to BOOL\nREF REF REF INT to INT",
      "\n",
      "\n",
      "\n",
      "Weak",
      "\n",
      "\n",
      "\n",
      "Primaries of slices, as in \"~\" in: ",
      "~[1:99]",
      "\n",
      "Secondaries of selections, as \"~\" in: ",
      "value OF ~",
      "\n",
      "\n",
      "Examples:\n",
      "REF BOOL to REF BOOL\nREF REF INT to REF INT\nREF REF REF REAL to REF REAL\nREF REF REF REF STRUCT to REF STRUCT",
      "\n",
      "\n",
      "\n",
      "Soft",
      "\n",
      "\n",
      "The LHS of assignments, as \"~\" in: ",
      "~\u00a0:= ...",
      "\n",
      "\n",
      "Example:\n",
      "deproceduring of: ",
      "PROC REAL random: e.g. random",
      "\n",
      "\n",
      "For more details about Primaries, Secondaries, Tertiary & Quaternaries refer to ",
      "Operator precedence",
      ".\n",
      "\n",
      "pr & co: Pragmats and Comments",
      "[",
      "edit",
      "]",
      "\n",
      "Pragmats are ",
      "directives",
      " in the program, typically hints to the compiler; in newer languages these are called \"pragmas\" (no 't'). e.g.\n",
      "\n",
      "pragmat",
      " heap=32 ",
      "pragmat",
      "\n",
      "pr",
      " heap=32 ",
      "pr",
      "\n",
      "\n",
      "Comments can be inserted in a variety of ways:\n",
      "\n",
      "\u00a2 The original way of adding your 2 cents worth to a program \u00a2\n",
      "comment",
      " \"bold\" comment ",
      "comment",
      "\n",
      "co",
      " Style i comment ",
      "co",
      "\n# Style ii comment #\n\u00a3 This is a hash/pound comment for a UK keyboard \u00a3\n",
      "\n",
      "Normally, comments cannot be nested in ALGOL 68. This restriction can be circumvented by using different comment delimiters (e.g. use hash only for temporary code deletions).\n",
      "\n",
      "Expressions and compound statements",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68 being an ",
      "expression-oriented programming language",
      ", the value returned by an ",
      "assignment",
      " statement is a reference to the destination. Thus, the following is valid ALGOL 68 code:\n",
      "\n",
      " ",
      "real",
      " half pi, one pi; one pi\u00a0:= 2 * ( half pi\u00a0:= 2 * arc tan(1) )\n",
      "\n",
      "This notion is present in ",
      "C",
      " and ",
      "Perl",
      ", among others. Note that as in earlier languages such as ",
      "Algol 60",
      " and ",
      "FORTRAN",
      ", spaces are allowed in identifiers, so that ",
      "half pi",
      " is a ",
      "single",
      " identifier (thus avoiding the ",
      "underscores",
      " versus ",
      "camel case",
      " versus ",
      "all lower-case",
      " issues).\n",
      "As another example, to express the mathematical idea of a ",
      "sum",
      " of ",
      "f(i)",
      " from i=1 to n, the following ALGOL 68 ",
      "integer expression",
      " suffices:\n",
      "\n",
      " (",
      "int",
      " sum\u00a0:= 0; ",
      "for",
      " i ",
      "to",
      " n ",
      "do",
      " sum +:= f(i) ",
      "od",
      "; sum)\n",
      "\n",
      "Note that, being an integer expression, the former block of code can be used in ",
      "any context where an integer value can be used",
      ". A block of code returns the value of the last expression it evaluated; this idea is present in ",
      "Lisp",
      ", among other languages.\n",
      "Compound statements are all terminated by distinctive closing brackets:\n",
      "\n",
      "if",
      " choice clauses:",
      "\n",
      " ",
      "if",
      " condition ",
      "then",
      " statements [ ",
      "else",
      " statements ] ",
      "fi",
      "\n \"brief\" form:  ( condition | statements | statements )\n",
      "\n",
      " ",
      "if",
      " condition1 ",
      "then",
      " statements ",
      "elif",
      " condition2 ",
      "then",
      " statements [ ",
      "else",
      " statements ] ",
      "fi",
      "\n \"brief\" form:  ( condition1 | statements |: condition2 | statements | statements )\n",
      "\n",
      "This scheme not only avoids the ",
      "dangling else",
      " problem but also avoids having to use ",
      "begin",
      " and ",
      "end",
      " in embedded ",
      "statement",
      " sequences.\n",
      "\n",
      "case",
      " choice clauses:",
      "\n",
      " ",
      "case",
      " switch ",
      "in",
      " statements, statements,... [ ",
      "out",
      " statements ] ",
      "esac",
      "\n \"brief\" form:  ( switch | statements,statements,... | statements )\n",
      "\n",
      " ",
      "case",
      " switch1 ",
      "in",
      " statements, statements,... ",
      "ouse",
      " switch2 ",
      "in",
      " statements, statements,... [ ",
      "out",
      " statements ] ",
      "esac",
      "\n \"brief\" form of ",
      "case",
      " statement:  ( switch1 | statements,statements,... |: switch2 | statements,statements,... | statements )\n",
      "\n",
      "Choice clause example with ",
      "Brief",
      " symbols:\n",
      "\n",
      "proc",
      " days in month = (",
      "int",
      " year, month)",
      "int",
      ":\n  (month|\n    31,\n    (year\u00f7\u00d74=0 \u2227 year\u00f7\u00d7100\u22600  \u2228  year\u00f7\u00d7400=0 | 29 | 28 ),\n    31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n  );\n",
      "\n",
      "Choice clause example with ",
      "Bold",
      " symbols:\n",
      "\n",
      "proc",
      " days in month = (",
      "int",
      " year, month)",
      "int",
      ":\n  ",
      "case",
      " month ",
      "in",
      "\n    31,\n    ",
      "if",
      " year ",
      "mod",
      " 4 ",
      "eq",
      " 0 ",
      "and",
      " year ",
      "mod",
      " 100 ",
      "ne",
      " 0  ",
      "or",
      "  year ",
      "mod",
      " 400 ",
      "eq",
      " 0 ",
      "then",
      " 29 ",
      "else",
      " 28 ",
      "fi",
      ",\n    31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n  ",
      "esac",
      ";\n",
      "\n",
      "Choice clause example mixing ",
      "Bold",
      " and ",
      "Brief",
      " symbols:\n",
      "\n",
      "proc",
      " days in month = (",
      "int",
      " year, month)",
      "int",
      ":\n  ",
      "case",
      " month ",
      "in",
      "\n\u00a2Jan\u00a2 31,\n\u00a2Feb\u00a2 ( year ",
      "mod",
      " 4 = 0 ",
      "and",
      " year ",
      "mod",
      " 100 \u2260 0  ",
      "or",
      "  year ",
      "mod",
      " 400 = 0 | 29 | 28 ),\n\u00a2Mar\u00a2 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 \u00a2 to Dec. \u00a2\n  ",
      "esac",
      ";\n",
      "\n",
      "Algol68 allowed the switch to be of either type ",
      "int",
      " ",
      "or",
      " (uniquely) ",
      "union",
      ". The latter allows the enforcing ",
      "strong typing",
      " onto ",
      "union",
      " variables. c.f. ",
      "union",
      " below for example.\n",
      "\n",
      "do",
      " loop clause:",
      "\n",
      " [ ",
      "for",
      " index ] [ ",
      "from",
      " first ] [ ",
      "by",
      " increment ] [ ",
      "to",
      " last ] [ ",
      "while",
      " condition ] ",
      "do",
      " statements ",
      "od",
      "\n The minimum form of a \"loop clause\" is thus: ",
      "do",
      " statements ",
      "od",
      "\n",
      "\n",
      "This was considered ",
      "the",
      " \"universal\" loop, the full syntax is:\n",
      "\n",
      "for",
      " i ",
      "from",
      " 1 ",
      "by",
      " -22 ",
      "to",
      " -333 ",
      "while",
      " i\u00d7i\u22604444 ",
      "do",
      " ~ ",
      "od",
      "\n",
      "\n",
      "The construct have several unusual aspects:\n",
      "\n",
      "only the ",
      "do",
      " ~ ",
      "od",
      " portion was compulsory, in which case the loop will iterate indefinitely.",
      "\n",
      "thus the clause ",
      "to",
      " 100 ",
      "do",
      " ~ ",
      "od",
      ", will iterate only 100 times.",
      "\n",
      "the ",
      "while",
      " \"syntactic element\" allowed a programmer to break from a ",
      "for",
      " loop early. e.g.",
      "\n",
      "int",
      " sum sq:=0;\n",
      "for",
      " i\n",
      "while",
      "\n  print((\"So far:\",i,newline));\n  sum sq\u226070\u21912\n",
      "do",
      "\n  sum sq+:=i\u21912\n",
      "od",
      "\n",
      "\n",
      "Subsequent \"extensions\" to the standard Algol68 allowed the ",
      "to",
      " syntactic element to be replaced with ",
      "upto",
      " and ",
      "downto",
      " to achieve a small optimisation.  The same compilers also incorporated:\n",
      "\n",
      "until",
      "(C)",
      " \u2013 for late loop termination.",
      "\n",
      "foreach",
      "(S)",
      " \u2013 for working on arrays in ",
      "parallel",
      ".",
      "\n",
      "Further examples can be found in the code examples below.\n",
      "\n",
      "struct, union & [:]: Structures, unions and arrays",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68 supports ",
      "arrays",
      " with any number of dimensions, and it allows for the ",
      "slicing",
      " of whole or partial rows or columns.\n",
      "\n",
      " ",
      "mode",
      " ",
      "vector",
      " = [1:3]    ",
      "real",
      ";   ",
      "# vector ",
      "mode",
      " declaration (typedef)  #",
      "\n ",
      "mode",
      " ",
      "matrix",
      " = [1:3,1:3]",
      "real",
      ";   ",
      "# matrix ",
      "mode",
      " declaration (typedef)  #",
      "\n ",
      "vector",
      " v1  := (1,2,3);         ",
      "# array variable initially (1,2,3)   #",
      "\n []",
      "real",
      " v2   = (4,5,6);         ",
      "# constant array, type equivalent to ",
      "vector",
      ", bounds are implied  #",
      "\n ",
      "op",
      " + = (",
      "vector",
      " a,b) ",
      "vector",
      ":    ",
      "# binary ",
      "op",
      "erator definition         #",
      "\n   (",
      "vector",
      " out; ",
      "for",
      " i ",
      "from",
      " \u230aa ",
      "to",
      " \u2308a ",
      "do",
      " out[i]\u00a0:= a[i]+b[i] ",
      "od",
      "; out);\n ",
      "matrix",
      " m\u00a0:= (v1, v2, v1+v2);\n print ((m[,2:]));              ",
      "# a slice of the 2nd and 3rd columns #",
      "\n",
      "\n",
      "Matrices can be sliced either way, e.g.:\n",
      "\n",
      " ",
      "ref",
      " ",
      "vector",
      " row = m[2,];  ",
      "# define a ",
      "ref",
      " (pointer) to the 2nd row #",
      "\n ",
      "ref",
      " ",
      "vector",
      " col = m[,2];  ",
      "# define a ",
      "ref",
      " (pointer) to the 2nd column #",
      "\n",
      "\n",
      "ALGOL 68 supports multiple field structures (",
      "struct",
      ") and ",
      "united modes",
      ". Reference variables may point to any ",
      "mode",
      " including array slices and structure fields.\n",
      "For an example of all this, here is the traditional linked list declaration:\n",
      "\n",
      " ",
      "mode",
      " ",
      "node",
      " = ",
      "union",
      " (",
      "real",
      ", ",
      "int",
      ", ",
      "compl",
      ", ",
      "string",
      "),\n      ",
      "list",
      " = ",
      "struct",
      " (",
      "node",
      " val, ",
      "ref",
      " ",
      "list",
      " next);\n",
      "\n",
      "Usage example for ",
      "union",
      " ",
      "case",
      " of ",
      "node",
      ":\n",
      "\n",
      "\n",
      "\n",
      "Algol68",
      "r0",
      " as in the 1968 Final Report\n",
      " ",
      "node",
      " n\u00a0:= \"1234\";\n ",
      "real",
      " r; ",
      "int",
      " i; ",
      "compl",
      " c; ",
      "string",
      " s\n ",
      "case",
      " r,i,c,s::=n ",
      "in",
      "\n   print((\"real:\", r)),\n   print((\"int:\", i)),\n   print((\"compl:\", c)),\n   print((\"string:\", s))\n   ",
      "out",
      " print((\"?:\", n))\n ",
      "esac",
      "\n",
      "\n",
      "\n",
      "Algol68",
      "r1",
      " as in the 1973 Revised Report\n",
      " ",
      "node",
      " n\u00a0:= \"1234\";\n \u00a0\n ",
      "case",
      " n ",
      "in",
      "\n   (",
      "real",
      " r):   print((\"real:\", r)),\n   (",
      "int",
      " i):    print((\"int:\", i)),\n   (",
      "compl",
      " c):  print((\"compl:\", c)),\n   (",
      "string",
      " s): print((\"string:\", s))\n   ",
      "out",
      "         print((\"?:\", n))\n ",
      "esac",
      "\n",
      "\n",
      "\n",
      "\n",
      "proc: Procedures",
      "[",
      "edit",
      "]",
      "\n",
      "Procedure (",
      "proc",
      ") declarations require type specifications for both the parameters and the result (",
      "void",
      " if none):\n",
      "\n",
      " ",
      "proc",
      " max of real = (",
      "real",
      " a, b) ",
      "real",
      ":\n    ",
      "if",
      " a > b ",
      "then",
      " a ",
      "else",
      " b ",
      "fi",
      ";\n",
      "\n",
      "or, using the \"brief\" form of the conditional statement:\n",
      "\n",
      " ",
      "proc",
      " max of real = (",
      "real",
      " a, b) ",
      "real",
      ": (a>b | a | b);\n",
      "\n",
      "The return value of a ",
      "proc",
      " is the value of the last expression evaluated in the procedure. References to procedures (",
      "ref proc",
      ") are also permitted. ",
      "Call-by-reference",
      " parameters are provided by specifying references (such as ",
      "ref real",
      ") in the formal argument list. The following example defines a procedure that applies a function (specified as a parameter) to each element of an array:\n",
      "\n",
      " ",
      "proc",
      " apply = (",
      "ref",
      " [] ",
      "real",
      " a, ",
      "proc",
      " (",
      "real",
      ") ",
      "real",
      " f):\n \u00a0\n    ",
      "for",
      " i ",
      "from",
      " ",
      "lwb",
      " a ",
      "to",
      " ",
      "upb",
      " a ",
      "do",
      " a[i]\u00a0:= f(a[i]) ",
      "od",
      "\n",
      "\n",
      "This simplicity of code was unachievable in ALGOL 68's predecessor ",
      "ALGOL 60",
      ".\n",
      "\n",
      "op: Operators",
      "[",
      "edit",
      "]",
      "\n",
      "The programmer may define new ",
      "operators",
      " and ",
      "both",
      " those and the pre-defined ones may be ",
      "overloaded",
      " and their priorities may be changed by the coder. The following example defines operator ",
      "max",
      " with both dyadic and monadic versions (scanning across the elements of an array).\n",
      "\n",
      " ",
      "prio",
      " ",
      "max",
      " = 9;\n \u00a0\n ",
      "op",
      " ",
      "max",
      " = (",
      "int",
      " a,b) ",
      "int",
      ": ( a>b | a | b );\n ",
      "op",
      " ",
      "max",
      " = (",
      "real",
      " a,b) ",
      "real",
      ": ( a>b | a | b );\n ",
      "op",
      " ",
      "max",
      " = (",
      "compl",
      " a,b) ",
      "compl",
      ": ( ",
      "abs",
      " a > ",
      "abs",
      " b | a | b );\n \u00a0\n ",
      "op",
      " ",
      "max",
      " = ([]",
      "real",
      " a) ",
      "real",
      ":\n    (",
      "real",
      " out\u00a0:= a[",
      "lwb",
      " a];\n     ",
      "for",
      " i ",
      "from",
      " ",
      "lwb",
      " a + 1 ",
      "to",
      " ",
      "upb",
      " a ",
      "do",
      " ( a[i]>out | out:=a[i] ) ",
      "od",
      ";\n     out)\n",
      "\n",
      "Array, Procedure, Dereference and coercion operations",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "prio",
      "rity\n",
      "\n",
      "Operation ",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "\n",
      "\n",
      "+Algol68",
      "G",
      "\n",
      "\n",
      "\n",
      "Effectively\u00a012",
      "(Primary)",
      "\n",
      "dereferencing, deproceduring(~,~), subscripting[~], rowing[~,], slicing[~:~], size denotations ",
      "long",
      " & ",
      "short",
      "\n",
      "\n",
      "proceduring\n",
      "\n",
      "currying(~,,,), ",
      "diag",
      ", ",
      "trnsp",
      ", ",
      "row",
      ", ",
      "col",
      "\n",
      "\n",
      "\n",
      "Effectively\u00a011",
      "(Secondary)",
      "\n",
      "of",
      " (selection), ",
      "loc",
      " & ",
      "heap",
      " (generators)\n",
      "\n",
      "\u2192 (selection)\n",
      "\n",
      "new",
      " (generators)\n",
      "\n",
      "These are technically not operators, rather they are considered \"",
      "units associated with names",
      "\"\n",
      "\n",
      "Monadic operators",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "prio",
      "rity",
      "(Tertiary)\n",
      "\n",
      "Algol68 \"Worthy characters",
      "[6]",
      "\"",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "C,G",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "\n",
      "\n",
      "\n",
      "10",
      "\n",
      "not",
      " ~, ",
      "up",
      ", ",
      "down",
      ", ",
      "lwb",
      ", ",
      "upb",
      ",\n",
      "-, ",
      "abs",
      ", ",
      "arg",
      ", ",
      "bin",
      ", ",
      "entier",
      ", ",
      "leng",
      ", ",
      "level",
      ", ",
      "odd",
      ", ",
      "repr",
      ", ",
      "round",
      ", ",
      "shorten",
      "\n",
      "\n",
      "\n",
      "\u00ac, \u2191, \u2193, \u230a, \u2308\n",
      "\n",
      "norm",
      ", ",
      "trace",
      ", ",
      "t",
      ", ",
      "det",
      ", ",
      "inv",
      "\n",
      "\n",
      "lws",
      ", ",
      "ups",
      ", \u23a9, \u23a7, ",
      "btb",
      ", ",
      "ctb",
      "\n",
      "\n",
      "Dyadic operators with associated priorities",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "prio",
      "rity",
      "(Tertiary)\n",
      "\n",
      "Algol68 \"Worthy characters\"",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "C,G",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "\n",
      "\n",
      "\n",
      "9",
      "\n",
      "+*, ",
      "i",
      "\n",
      "+\u00d7, \u22a5",
      "\n",
      "\n",
      "!\n",
      "\n",
      "\n",
      "8",
      "\n",
      "shl",
      ", ",
      "shr",
      ", **,  ",
      "up",
      ", ",
      "down",
      ", ",
      "lwb",
      ", ",
      "upb",
      "\n",
      "\u2191, \u2193, \u230a, \u2308",
      "\n",
      "\n",
      "\u00d7\u00d7, ^, ",
      "lws",
      ", ",
      "ups",
      ", \u23a9, \u23a7\n",
      "\n",
      "\n",
      "7",
      "\n",
      "*, /,  %, ",
      "over",
      ",  %*, ",
      "mod",
      ", ",
      "elem",
      "\n",
      "\u00d7, \u00f7, \u00f7\u00d7, \u00f7*,\u00a0%\u00d7, \u25a1",
      "\n",
      "\n",
      "\u00f7:\n",
      "\n",
      "\n",
      "6",
      "\n",
      "-, +",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "5",
      "\n",
      "<, ",
      "lt",
      ", <=, ",
      "le",
      ",  >=, ",
      "ge",
      ", >, ",
      "gt",
      "\n",
      "\u2264, \u2265",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "4",
      "\n",
      "eq",
      " =, ",
      "ne",
      " ~= /=",
      "\n",
      "\u2260, \u00ac=",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "3",
      "\n",
      "&, ",
      "and",
      "\n",
      "\u2227",
      "\n",
      "\n",
      "/\\\n",
      "\n",
      "\n",
      "2",
      "\n",
      "or",
      "\n",
      "\u2228",
      "\n",
      "\n",
      "\\/\n",
      "\n",
      "\n",
      "1",
      "\n",
      "minusab",
      ", ",
      "plusab",
      ", ",
      "timesab",
      ", ",
      "divab",
      ", ",
      "overab",
      ", ",
      "modab",
      ", ",
      "plusto",
      ",\n",
      "-:=, +:=, *:=, /:=,\u00a0%:=,\u00a0%*:=, +=:\n",
      "\n",
      "\n",
      "\u00d7:=, \u00f7:=, \u00f7\u00d7:=,  \u00f7*:=,  %\u00d7:=",
      "\n",
      "\n",
      "minus",
      ", ",
      "plus",
      ", ",
      "div",
      ", ",
      "overb",
      ", ",
      "modb",
      ", \u00f7::=, ",
      "prus",
      "\n",
      "\n",
      "Note: Tertiaries include names ",
      "nil",
      " and \u25cb.\n",
      "\n",
      "Assignation and identity relations etc",
      "[",
      "edit",
      "]",
      "\n",
      "These are technically not operators, rather they are considered \"",
      "units associated with names",
      "\"\n",
      "\n",
      "\n\n",
      "\n",
      "prio",
      "rity",
      "(Quaternaries)\n",
      "\n",
      "Algol68 \"Worthy characters\"",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "&",
      "r1",
      "\n",
      "\n",
      "+Algol68",
      "C,G,R",
      "\n",
      "\n",
      "+Algol68",
      "r0",
      "\n",
      "\n",
      "\n",
      "Effectively 0",
      "\n",
      ":=, ",
      "is",
      "\u00a0:=:, ",
      "isnt",
      "\u00a0:/=:\u00a0:~=:, ",
      "at",
      "  @, \":\", \";\"",
      "\n",
      ":\u2260:\u00a0:\u00ac=:",
      "\n",
      ":=:=",
      "C",
      ", =:=",
      "R",
      "\n",
      "..=, .=, ",
      "ct",
      ",\u00a0::, ",
      "ctab",
      ",\u00a0::=, .., ",
      "is not",
      ", \"..\", \".,\"\n",
      "\n",
      "Note: Quaternaries include names ",
      "skip",
      " and ~.\n",
      "\":=:\" (alternatively \"",
      "is",
      "\") tests if two pointers are equal; \":/=:\" (alternatively \"",
      "isnt",
      "\") tests if they are unequal.\n",
      "Why\u00a0:=: and\u00a0:/=: are needed:",
      " Consider trying to compare two pointer values, such as the following variables, declared as pointers-to-integer:\n",
      "\n",
      "ref",
      " ",
      "int",
      " ip, jp ",
      "\n",
      "Now consider how to decide whether these two are pointing to the same location, or whether one of them is pointing to ",
      "nil",
      ". The following expression\n",
      "\n",
      "ip = jp ",
      "\n",
      "will dereference both pointers down to values of type ",
      "int",
      ", and compare those, since the \"=\" operator is defined for ",
      "int",
      ", but not ",
      "ref",
      " ",
      "int",
      ". It is ",
      "not legal",
      " to define \"=\" for operands of type ",
      "ref",
      " ",
      "int",
      " and ",
      "int",
      " at the same time, because then calls become ambiguous, due to the implicit coercions that can be applied: should the operands be left as ",
      "ref",
      " ",
      "int",
      " and that version of the operator called? Or should they be dereferenced further to ",
      "int",
      " and that version used instead? Therefore the following expression can never be made legal:\n",
      "\n",
      "ip = ",
      "nil",
      " ",
      "\n",
      "Hence the need for separate constructs not subject to the normal coercion rules for operands to operators. But there is a gotcha. The following expressions:\n",
      "\n",
      "ip\u00a0:=: jp ",
      "\n",
      "ip\u00a0:=: ",
      "nil",
      " ",
      "\n",
      "while legal, will probably not do what might be expected. They will always return ",
      "false",
      ", because they are comparing the ",
      "actual addresses of the variables ",
      "ip",
      " and ",
      "jp",
      ", rather than what they point to",
      ". To achieve the right effect, one would have to write\n",
      "\n",
      "ip\u00a0:=: ",
      "ref",
      " ",
      "int",
      "(jp) ",
      "\n",
      "ip\u00a0:=: ",
      "ref",
      " ",
      "int",
      "(",
      "nil",
      ") ",
      "\n",
      "Patent application:",
      " On 14 May 2003, ",
      "software patent",
      " application No. 20040230959",
      "[46]",
      " was filed for the ",
      "ISNOT",
      " operator by employees of ",
      "Microsoft",
      ".  This patent was granted on 18 November 2004.\n",
      "\n",
      "Special characters",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "IBM 2741",
      " keyboard with APL symbols",
      "\n",
      "Most of Algol's \"special\" characters (\u2282, \u2261, \u2423, \u00d7, \u00f7, \u2264, \u2265, \u2260, \u00ac, \u2283, \u2261, \u2228, \u2227, \u2192, \u2193, \u2191, \u230a, \u2308, \u23a9, \u23a7, \u22a5, \u23e8, \u00a2, \u25cb and \u25a1) can be found on the ",
      "IBM 2741",
      " keyboard with the ",
      "APL",
      " \"golf-ball\" print head inserted; these became available in the mid-1960s while ALGOL 68 was being drafted. These characters are also part of the ",
      "Unicode",
      " standard and most of them are available in several popular ",
      "fonts",
      ".\n",
      "\n",
      "transput: Input and output",
      "[",
      "edit",
      "]",
      "\n",
      "Transput",
      " is the term used to refer to ALGOL 68's input and output facilities. It includes pre-defined procedures for unformatted, formatted and binary transput. Files and other transput devices are handled in a consistent and machine-independent manner. The following example prints out some unformatted output to the ",
      "standard output",
      " device:\n",
      "\n",
      "  print ((newpage, \"Title\", newline, \"Value of i is \",\n    i, \"and x[i] is \", x[i], newline))\n",
      "\n",
      "Note the predefined procedures ",
      "newpage",
      " and ",
      "newline",
      " passed as arguments.\n",
      "\n",
      "Books, channels and files",
      "[",
      "edit",
      "]",
      "\n",
      "The ",
      "transput",
      " is considered to be of ",
      "books",
      ", ",
      "channels",
      " and ",
      "files",
      ":\n",
      "\n",
      "Books",
      " are made up of pages, lines and characters, and may be backed up by files.\n",
      "A specific book can be located by name with a call to ",
      "match",
      ".",
      "\n",
      "channel",
      "s correspond to physical devices.  e.g. card punches and printers.\n",
      "Three standard channels are distinguished: ",
      "stand in",
      " channel, ",
      "stand out",
      " channel, ",
      "stand back",
      " channel.",
      "\n",
      "A ",
      "file",
      " is a means of communicating between a program and a book that has been opened via some channel.\n",
      "The ",
      "mood",
      " of a file may be read, write, char, bin, and opened.",
      "\n",
      "transput procedures include: ",
      "establish, create, open, associate, lock, close, scratch",
      ".",
      "\n",
      "position enquires: ",
      "char number, line number, page number",
      ".",
      "\n",
      "layout routines include:\n",
      "space",
      ", ",
      "backspace",
      ", ",
      "newline",
      ", ",
      "newpage",
      ".",
      "\n",
      "get good line, get good page, get good book",
      ", and ",
      "proc",
      " set=(",
      "ref",
      " ",
      "file",
      " f, ",
      "int",
      " page,line,char)",
      "void",
      ":",
      "\n",
      "A file has ",
      "event routines",
      ". e.g. ",
      "on logical file end, on physical file end, on page end, on line end, on format end, on value error, on char error",
      ".",
      "\n",
      "formatted transput",
      "[",
      "edit",
      "]",
      "\n",
      "\"Formatted transput\" in ALGOL 68's transput has its own syntax and patterns (functions), with ",
      "format",
      "s embedded between two $ characters.",
      "[47]",
      "\n",
      "Examples:\n",
      "\n",
      " printf (($2l\"The sum is:\"x, g(0)$, m + n)); \u00a2 prints the same as: \u00a2\n print ((new line, new line, \"The sum is:\", space, whole (m + n, 0))\n",
      "\n",
      "par: Parallel processing",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68",
      " supports programming of parallel processing. Using the keyword ",
      "par",
      ", a ",
      "collateral clause",
      " is converted to a ",
      "parallel clause",
      ", where the synchronisation of actions is controlled using ",
      "semaphores",
      ". In A68G the parallel actions are mapped to threads when available on the hosting ",
      "operating system",
      ". In A68S a different paradigm of parallel processing was implemented (see below).\n",
      "\n",
      "int",
      " initial foot width = 5;\n",
      "mode",
      " ",
      "foot",
      " = ",
      "struct",
      "(\n   ",
      "string",
      " name,\n   ",
      "sema",
      " width,\n   ",
      "bits",
      " toe \u00a2 packed vector of BOOL \u00a2\n);\n\u00a0\n",
      "foot",
      " left foot:= ",
      "foot",
      "(\"Left\", ",
      "level",
      " initial foot width, 2r11111),\n     right foot:= ",
      "foot",
      "(\"Right\", ",
      "level",
      " initial foot width, 2r11111);\n\u00a0\n\u00a2 10 round clip in a 1968 ",
      "Colt Python .357 Magnum",
      " \u00a2\n",
      "sema",
      " rounds = ",
      "level",
      " 10;\n\u00a0\n\u00a2 the Magnum needs more barrels to take full advantage of parallelism \u00a2\n",
      "sema",
      " acquire target = ",
      "level",
      " 1;\n\u00a0\n",
      "prio",
      " \u2227:= = 1;\n",
      "op",
      " \u2227:= = (",
      "ref",
      " ",
      "bits",
      " lhs, ",
      "bits",
      " rhs)",
      "ref",
      " ",
      "bits",
      ": lhs\u00a0:= lhs \u2227 rhs;\n\u00a0\n",
      "proc",
      " shoot = (",
      "ref",
      " ",
      "foot",
      " foot)",
      "void",
      ": (\n  \u2193acquire target;\n  \u2193rounds;\n  print(\"BANG! \");\n  \u2193width \u2192 foot;\n  toe \u2192 foot \u2227:= \u00ac(",
      "bin",
      " 1 ",
      "shl",
      " ",
      "level",
      " width \u2192 foot);\n  printf(($g\": Ouch!! \u2013 \"5(g)l$, name \u2192 foot, []",
      "bool",
      "(toe \u2192 foot)[bits width \u2013 initial foot width + 1:]));\n  \u2191acquire target\n);\n\u00a0\n\u00a2 do shooting in parallel to cater for someone hoping to stand on just one foot \u00a2\n",
      "par",
      " (\n  ",
      "for",
      " toe ",
      "to",
      " initial foot width ",
      "do",
      "\n    shoot (left foot)\n  ",
      "od",
      ", \u00a2 <= a comma is required \u00a2\n  ",
      "for",
      " toe ",
      "to",
      " initial foot width ",
      "do",
      "\n    shoot(right foot)\n  ",
      "od",
      "\n)\n",
      "\n",
      "Examples of use",
      "[",
      "edit",
      "]",
      "\n",
      "Code sample",
      "[",
      "edit",
      "]",
      "\n",
      "This sample program implements the ",
      "Sieve of Eratosthenes",
      " to find all the ",
      "prime numbers",
      " that are less than 100. ",
      "nil",
      " is the ALGOL 68 analogue of the ",
      "null pointer",
      " in other languages. The notation ",
      "x",
      " ",
      "of",
      " ",
      "y",
      " accesses a member ",
      "x",
      " of a ",
      "struct",
      " ",
      "y",
      ".\n",
      "\n",
      "begin",
      " # Algol-68 prime number sieve, functional style #\n \u00a0\n  ",
      "proc",
      " error = (",
      "string",
      " s) ",
      "void",
      ":\n     (print(( newline, \" error: \", s, newline)); ",
      "goto",
      " stop);\n  ",
      "proc",
      " one to = (",
      "int",
      " n) ",
      "list",
      ":\n     (",
      "proc",
      " f = (",
      "int",
      " m,n) ",
      "list",
      ": (m>n | ",
      "nil",
      " | cons(m, f(m+1,n))); f(1,n));\n \u00a0\n  ",
      "mode",
      " ",
      "list",
      " = ",
      "ref",
      " ",
      "node",
      ";\n  ",
      "mode",
      " ",
      "node",
      " = ",
      "struct",
      " (",
      "int",
      " h, ",
      "list",
      " t);\n  ",
      "proc",
      " cons = (",
      "int",
      " n, ",
      "list",
      " l) ",
      "list",
      ": ",
      "heap",
      " ",
      "node",
      "\u00a0:= (n,l);\n  ",
      "proc",
      " hd   = (",
      "list",
      " l) ",
      "int",
      ": ( l ",
      "is",
      " ",
      "nil",
      " | error(\"hd ",
      "nil",
      "\"); ",
      "skip",
      " | h ",
      "of",
      " l );\n  ",
      "proc",
      " tl   = (",
      "list",
      " l) ",
      "list",
      ": ( l ",
      "is",
      " ",
      "nil",
      " | error(\"tl ",
      "nil",
      "\"); ",
      "skip",
      " | t ",
      "of",
      " l );\n  ",
      "proc",
      " show = (",
      "list",
      " l) ",
      "void",
      ": ( l ",
      "isnt",
      " ",
      "nil",
      " | ",
      "print",
      "((\" \",whole(hd(l),0))); show(tl(l)));\n \u00a0\n  ",
      "proc",
      " filter = (",
      "proc",
      " (",
      "int",
      ") ",
      "bool",
      " p, ",
      "list",
      " l) ",
      "list",
      ":\n     ",
      "if",
      " l ",
      "is",
      " ",
      "nil",
      " ",
      "then",
      " ",
      "nil",
      "\n     ",
      "elif",
      " p(hd(l)) ",
      "then",
      " cons(hd(l), filter(p,tl(l)))\n     ",
      "else",
      " filter(p, tl(l))\n     ",
      "fi",
      ";\n \u00a0\n  ",
      "proc",
      " sieve = (",
      "list",
      " l) ",
      "list",
      ":\n     ",
      "if",
      " l ",
      "is",
      " ",
      "nil",
      " ",
      "then",
      " ",
      "nil",
      "\n     ",
      "else",
      "\n        ",
      "proc",
      " not multiple = (",
      "int",
      " n) ",
      "bool",
      ": n ",
      "mod",
      " hd(l) \u2260 0;\n        cons(hd(l), sieve( filter( not multiple, tl(l) )))\n     ",
      "fi",
      ";\n \u00a0\n  ",
      "proc",
      " primes = (",
      "int",
      " n) ",
      "list",
      ": sieve( tl( one to(n) ));\n \u00a0\n  show( primes(100) )\n",
      "end",
      "\n",
      "\n",
      "Operating systems written in ALGOL 68",
      "[",
      "edit",
      "]",
      "\n",
      "Cambridge CAP computer",
      " \u2013 All procedures constituting the operating system were written in ",
      "ALGOL 68C",
      ", although a number of other closely associated protected procedures  \u2013 such as a paginator \u2013 are written in ",
      "BCPL",
      ".",
      "[48]",
      "\n",
      "Eldon 3",
      " \u2013 Developed at ",
      "Leeds University",
      " for the ",
      "ICL 1900",
      " was written in ",
      "ALGOL 68-R",
      ".",
      "[49]",
      "\n",
      "Flex machine",
      " \u2013 The hardware was custom and microprogrammable, with an operating system, (modular) compiler, editor, garbage collector and filing system all written in ",
      "ALGOL 68RS",
      ". The command shell Curt",
      "[50]",
      " was designed to access typed data similar to Algol-68 modes.",
      "\n",
      "VME",
      " \u2013 ",
      "S3",
      " was the implementation language of the ",
      "operating system",
      " VME. S3 was based on ALGOL 68 but with data types and operators aligned to those offered by the ",
      "ICL 2900 Series",
      ".",
      "\n",
      "Note: The Soviet Era computers ",
      "\u042d\u043b\u044c\u0431\u0440\u0443\u0441-1 (Elbrus-1)",
      " and \u042d\u043b\u044c\u0431\u0440\u0443\u0441-2 were created using high-level language \u042d\u043b\u044c-76 (AL-76), rather than the traditional assembly. \u042d\u043b\u044c-76 resembles Algol-68, The main difference is the dynamic binding types in \u042d\u043b\u044c-76 supported at the hardware level. \u042d\u043b\u044c-76 is used for application, job control, system programming.",
      "[51]",
      "\n",
      "\n",
      "Applications",
      "[",
      "edit",
      "]",
      "\n",
      "Both ",
      "ALGOL 68C",
      " and ",
      "ALGOL 68-R",
      " are written in ALGOL 68, effectively making ALGOL 68 an application of itself. Other applications include:\n",
      "\n",
      "ELLA",
      " \u2013 a hardware description language and support toolset. Developed by the ",
      "Royal Signals and Radar Establishment",
      " during the 1980s and 1990s.",
      "\n",
      "RAF Strike Command",
      " System \u2013 \"... 400K of error-free ",
      "ALGOL 68-RT",
      " code was produced with three man-years of work. ...\"",
      "[52]",
      "\n",
      "Libraries and APIs",
      "[",
      "edit",
      "]",
      "\n",
      "NAG Numerical Libraries",
      " \u2013 a ",
      "software library",
      " of ",
      "numerical analysis",
      " routines. Supplied in ALGOL 68 during the 1980s.",
      "\n",
      "TORRIX \u2013 a programming system for operations on vectors and matrices over arbitrary fields and of variable size by S. G. van der Meulen and M. Veldhorst.",
      "[53]",
      "\n",
      "Program representation",
      "[",
      "edit",
      "]",
      "\n",
      "A feature of ALGOL 68, inherited from the ",
      "ALGOL",
      " tradition, is its different representations. There is a ",
      "representation language",
      " used to describe algorithms in printed work, a ",
      "strict language",
      " (rigorously defined in the Report) and an official ",
      "reference language",
      " intended to be used in actual compiler input. In the examples you will observe ",
      "bold",
      " typeface words, this is the ",
      "strict",
      " language. ALGOL 68's reserved words are effectively in a different ",
      "namespace",
      " from identifiers, and spaces are allowed in identifiers, so this next fragment is legal:\n",
      "\n",
      " ",
      "int",
      " a real int = 3\u00a0;\n",
      "\n",
      "The programmer who actually writes code does not always have an option of ",
      "bold",
      " typeface or ",
      "underlining",
      " in the code as this may depend on hardware and cultural issues. Different methods to denote these identifiers have been devised. This is called a ",
      "stropping",
      " regime",
      ". For example all or some of the following may be available ",
      "programming representations",
      ":\n",
      "\n",
      " ",
      "int",
      " a real int = 3; # the ",
      "strict",
      " language #\n'INT'A REAL INT = 3; # QUOTE stropping style #\n.INT A REAL INT = 3; # POINT stropping style #\n INT a real int = 3; # UPPER stropping style #\n int a_real_int = 3; # RES stropping style, there are 61 accepted reserved words #\n",
      "\n",
      "All implementations must recognize at least POINT, UPPER and RES inside PRAGMAT sections. Of these, POINT and UPPER stropping are quite common, while RES stropping is a contradiction to the specification (as there are no reserved words). QUOTE (single apostrophe quoting) was the original recommendation, while matched apostrophe quoting, common in ALGOL 60, is not used much in ALGOL 68.",
      "[54]",
      "\n",
      "The following characters were recommended for portability, and termed \"worthy characters\" in the ",
      "Report on the Standard Hardware Representation of Algol 68",
      ":\n",
      "\n",
      "^",
      " Worthy Characters: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \"#$%'()*+,-./:;<=>@[ ]_|",
      "\n",
      "This reflected a problem in the 1960s where some hardware didn't support lower-case, nor some other non-",
      "ASCII",
      " characters, indeed in the 1973 report it was written: \"Four worthy characters \u2014 \"|\", \"_\", \"[\", and \"]\" \u2014 are often coded differently, even at installations which nominally use the same character set.\"\n",
      "\n",
      "Base characters: \"Worthy characters\" are a subset of \"base characters\".",
      "\n",
      "Example of different program representations",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "Representation\n",
      "\n",
      "Code\n",
      "\n",
      "\n",
      "Algol68 \"strict\"",
      " as typically published\n",
      "\n",
      "\u00a2 underline or\n   bold typeface \u00a2\n ",
      "mode",
      " ",
      "xint",
      " = ",
      "int",
      ";\n ",
      "xint",
      " sum sq:=0;\n ",
      "for",
      " i ",
      "while",
      "\n   sum sq\u226070\u00d770\n ",
      "do",
      "\n   sum sq+:=i\u21912\n ",
      "od",
      "\n",
      "\n",
      "\n",
      "Quote stropping",
      "(like ",
      "wikitext",
      ")\n",
      "\n",
      "'pr' quote 'pr'\n'mode' 'xint' = 'int';\n'xint' sum sq:=0;\n'for' i 'while'\n  sum sq\u226070\u00d770\n'do'\n  sum sq+:=i\u21912\n'od'\n",
      "\n",
      "\n",
      "\n",
      "For a ",
      "7-bit",
      " character code compiler\n",
      "\n",
      ".PR UPPER .PR\nMODE XINT = INT;\nXINT sum sq:=0;\nFOR i WHILE\n  sum sq/=70*70\nDO\n  sum sq+:=i**2\nOD\n",
      "\n",
      "\n",
      "\n",
      "For a ",
      "6-bit",
      " character code compiler\n",
      "\n",
      ".PR POINT .PR\n.MODE .XINT = .INT;\n.XINT SUM SQ:=0;\n.FOR I .WHILE\n  SUM SQ .NE 70*70\n.DO\n  SUM SQ .PLUSAB I .UP 2\n.OD\n",
      "\n",
      "\n",
      "\n",
      "Algol68 using ",
      "res",
      " stropping",
      "(reserved word)\n",
      "\n",
      ".PR RES .PR\nmode .xint = int;\n.xint sum sq:=0;\nfor i while\n  sum sq\u226070\u00d770\ndo\n  sum sq+:=i\u21912\nod\n",
      "\n",
      "\n",
      "ALGOL 68 allows for every natural language to define its own set of keywords Algol-68. As a result, programmers are able to write programs using keywords from their native language. Below is an example of a simple procedure that calculates \"the day following\", the code is in two languages: English and German.",
      "[",
      "citation needed",
      "]",
      "\n",
      "\n",
      " # Next day date - English variant #\n ",
      "mode",
      " ",
      "date",
      " = ",
      "struct",
      "(",
      "int",
      " day, ",
      "string",
      " month, ",
      "int",
      " year);\n ",
      "proc",
      " the day following = (",
      "date",
      " x) ",
      "date",
      ":\n      ",
      "if",
      " day ",
      "of",
      "  x < length of month (month ",
      "of",
      " x, year ",
      "of",
      " x)\n      ",
      "then",
      " (day ",
      "of",
      " x + 1, month ",
      "of",
      " x, year ",
      "of",
      " x)\n      ",
      "elif",
      " month ",
      "of",
      " x = \"December\"\n      ",
      "then",
      " (1, \"January\", year ",
      "of",
      " x + 1)\n      ",
      "else",
      " (1, successor of month (month ",
      "of",
      " x), year ",
      "of",
      " x)\n      ",
      "fi",
      ";\n",
      "\n",
      " # Nachfolgetag - Deutsche Variante #\n ",
      "menge",
      " ",
      "datum",
      " = ",
      "tupel",
      "(",
      "ganz",
      " tag, ",
      "wort",
      " monat, ",
      "ganz",
      " jahr);\n ",
      "funktion",
      " naechster tag nach = (",
      "datum",
      " x) ",
      "datum",
      ":\n          ",
      "wenn",
      " tag ",
      "von",
      " x < monatslaenge(monat ",
      "von",
      " x, jahr ",
      "von",
      " x)\n          ",
      "dann",
      " (tag ",
      "von",
      " x + 1, monat ",
      "von",
      " x, jahr ",
      "von",
      " x)\n          ",
      "wennaber",
      " monat ",
      "von",
      " x = \"Dezember\"\n          ",
      "dann",
      " (1, \"Januar\", jahr ",
      "von",
      " x + 1)\n          ",
      "ansonsten",
      " (1, nachfolgemonat(monat ",
      "von",
      " x), jahr ",
      "von",
      " x)\n          ",
      "endewenn",
      ";\n",
      "\n",
      "Russian/Soviet example:",
      "\nIn English Algol68's case statement reads ",
      "case",
      " ~ ",
      "in",
      " ~ ",
      "out",
      " ~ ",
      "esac",
      ", in ",
      "Cyrillic",
      " this reads ",
      "\u0432\u044b\u0431",
      " ~ ",
      "\u0432",
      " ~ ",
      "\u043b\u0438\u0431\u043e",
      " ~ ",
      "\u0431\u044b\u0432",
      ".\n",
      "\n",
      "Some Vanitas",
      "[",
      "edit",
      "]",
      "\n",
      "For its technical intricacies, ALGOL 68 needs a cornucopia of methods to deny the existence of something:\n",
      "\n",
      "skip",
      ", \"~\" or \"?\"",
      "C",
      " \u2013 an undefined value always syntactically valid,\n",
      "empty",
      " \u2013 the only value admissible to ",
      "void",
      ", needed for selecting ",
      "void",
      " in a ",
      "union",
      ",\n",
      "void",
      " \u2013 syntactically like a ",
      "mode",
      ", but not one,\n",
      "nil",
      " or \"\u25cb\" \u2013 a name not denoting anything, of an unspecified reference mode,\n() or specifically [1:0]",
      "int",
      " \u2013 a ",
      "vacuum",
      " is an empty array (here specifically of ",
      "mode",
      " []",
      "int",
      ").\n",
      "undefined",
      " \u2013 a standards reports procedure raising an exception in the runtime system.\n\u2135 \u2013 Used in the standards report to inhibit ",
      "introspection",
      " of certain types. e.g. ",
      "sema",
      "\n",
      "\n",
      "c.f. below for other examples of \u2135.\n",
      "The term ",
      "nil",
      " ",
      "is",
      " ",
      "var",
      " always evaluates to ",
      "true",
      " for any variable (but see above for correct use of ",
      "is",
      "\u00a0:/=:), whereas it is not known to which value a comparison ",
      "x",
      " < ",
      "skip",
      " evaluates for any integer ",
      "x",
      ".\n",
      "ALGOL 68 leaves intentionally undefined what happens in case of integer overflow, the integer bit representation, and the degree of numerical accuracy for floating point. In contrast, the language ",
      "Java",
      " has been criticized for over-specifying the latter.\n",
      "Both official reports included some advanced features that were not part of the standard language.  These were indicated with an \u2135 and considered effectively private.  Examples include \"\u226e\" and \"\u226f\" for templates, the  ",
      "outtype",
      "/",
      "intype",
      " for crude ",
      "duck typing",
      ", and the ",
      "straightout",
      " and ",
      "straightin",
      " operators for \"straightening\" nested arrays and structures.\n",
      "Extract from the 1973 report:\n",
      "\n",
      "\u00a710.3.2.2. Transput modes\na) ",
      "mode",
      " \u2135 ",
      "simplout",
      " = ",
      "union",
      " (\u226e\u2112\u2002",
      "int",
      "\u226f, \u226e\u2112\u2002",
      "real",
      "\u226f, \u226e\u2112\u2002",
      "compl",
      "\u226f, ",
      "bool",
      ", \u226e\u2112\u2002bits\u226f,\n           ",
      "char",
      ", [ ] ",
      "char",
      ");\nb) ",
      "mode",
      " \u2135 ",
      "outtype",
      " = \u00a2 an actual \u2013 declarer specifying a mode united\n   from a sufficient set of modes none of which is 'void' or contains 'flexible',\n   'reference\u2002to', 'procedure' or 'union of' \u00a2;\nc) ",
      "mode",
      " \u2135 ",
      "simplin",
      " = ",
      "union",
      " (\u226e",
      "ref",
      " \u2112\u2002",
      "int",
      "\u226f, \u226e",
      "ref",
      " \u2112\u2002",
      "real",
      "\u226f, \u226e",
      "ref",
      " \u2112 ",
      "compl",
      "\u226f, ",
      "ref",
      " ",
      "bool",
      ",\n           \u226e",
      "ref",
      " \u2112\u2002",
      "bits",
      "\u226f, ",
      "ref",
      " ",
      "char",
      ", ",
      "ref",
      " [ ] ",
      "char",
      ", ",
      "ref",
      " ",
      "string",
      ");\nd) ",
      "mode",
      " \u2135 ",
      "intype",
      " = \u00a2 ... \u00a2;\n\u00a0\n\u00a710.3.2.3. Straightening\na) ",
      "op",
      " \u2135 ",
      "straightout",
      " = (",
      "outtype",
      " x) [ ] ",
      "simplout",
      ":\u2002\u00a2 the result of \"straightening\" 'x' \u00a2;\nb) ",
      "op",
      " \u2135 ",
      "straightin",
      " = (",
      "intype",
      " x) [ ] ",
      "simplin",
      ":\u2002\u00a2 the result of straightening 'x' \u00a2;\n",
      "\n",
      "Comparisons with other languages",
      "[",
      "edit",
      "]",
      "\n",
      "1973 \u2013 ",
      "Comparative Notes on Algol 68 and PL/I",
      " \u2013 S. H. Valentine \u2013 February 1973",
      "\n",
      "1973 \u2013 B. R. Alexander and G. E. Hedrick. A Comparison of PL/1 and ALGOL 68. International Symposium on Computers and Chinese Input/Output Systems. pp.\u00a0359\u2013368.",
      "\n",
      "1976 \u2013 Evaluation of ALGOL 68, ",
      "JOVIAL",
      " J3B, ",
      "Pascal",
      ", ",
      "Simula",
      " 67, and ",
      "TACPOL",
      " Versus TINMAN \u2013 Requirements for a Common High Order Programming Language.",
      "\n",
      "1976 \u2013 ",
      "A Language Comparison",
      "[",
      "permanent dead link",
      "]",
      " \u2013  A Comparison of the Properties of the Programming Languages ALGOL 68, ",
      "CAMAC-IML",
      ", ",
      "Coral 66",
      ", ",
      "PAS 1",
      ", ",
      "PEARL",
      ", ",
      "PL/1",
      ", ",
      "PROCOL",
      ", ",
      "RTL/2",
      " in Relation to ",
      "Real Time Programming",
      " \u2013 R. Roessler; K. Schenk \u2013 October 1976 ",
      "[7]",
      "\n",
      "1976 \u2013 Evaluation of ALGOL 68, Jovial J3B, PASCAL, SIMULA 67, and TACPOL Versus [Steelman language requirements|TINMAN] Requirements for a Common High Order Programming Language. October 1976 ",
      "[8]",
      "\n",
      "1977 \u2013 ",
      "Report to the High Order-Language Working Group (HOLWG)",
      " \u2013 Executive Summary \u2013 Language Evaluation Coordinating Committee \u2013 Evaluation of ",
      "PL/I",
      ", ",
      "Pascal",
      ", ALGOL 68, ",
      "HAL/S",
      ", ",
      "PEARL",
      ", ",
      "SPL/I",
      ", ",
      "PDL/2",
      ", ",
      "LTR",
      ", ",
      "CS-4",
      ", ",
      "LIS",
      ", ",
      "Euclid",
      ", ",
      "ECL",
      ", ",
      "Moral",
      ", ",
      "RTL/2",
      ", ",
      "Fortran",
      ", ",
      "COBOL",
      ", ",
      "ALGOL 60",
      ", ",
      "TACPOL",
      ", ",
      "CMS-2",
      ", ",
      "Simula",
      " 67, JOVIAL J3B, JOVIAL J73 & ",
      "Coral 66",
      ".",
      "\n",
      "1977 \u2013 ",
      "A comparison of PASCAL and ALGOL 68",
      "[55]",
      " \u2013 ",
      "Andrew S. Tanenbaum",
      " \u2013 June 1977.",
      "\n",
      "1980 \u2013 ",
      "A Critical Comparison of Several Programming Language Implementations",
      " \u2013 Algol 60, FORTRAN, Pascal and Algol 68.",
      "\n",
      "1993 \u2013 ",
      "Five Little Languages and How They Grew",
      " \u2013 ",
      "BLISS",
      ", ",
      "Pascal",
      ", Algol 68, ",
      "BCPL",
      " & ",
      "C",
      " \u2013 ",
      "Dennis M. Ritchie",
      " \u2013 April 1993.",
      "\n",
      "1999 \u2013 ",
      "On Orthogonality",
      ": Algol68, Pascal and C",
      "\n",
      "2000 \u2013 ",
      "A Comparison of Arrays",
      "  in ALGOL 68 and ",
      "BLISS",
      " \u2013 ",
      "University of Virginia",
      " \u2013 Michael Walker \u2013 Spring 2000",
      "\n",
      "2009 \u2013 ",
      "On Go \u2013 oh, go on",
      " \u2013 How well will Google's ",
      "Go",
      " stand up against Brand X programming language? \u2013 David Given \u2013 November 2009",
      "\n",
      "2010 \u2013 ",
      "Algol and Pascal",
      " from \"Concepts in Programming Languages \u2013 Block-structured procedural languages\" \u2013 by Marcelo Fiore",
      "\n",
      "Comparison of ALGOL 68 and C++",
      "\n",
      "Revisions",
      "[",
      "edit",
      "]",
      "\n",
      "Except where noted (with a ",
      "superscript",
      "), the language described above is that of the \"Revised Report",
      "(r1)",
      "\".\n",
      "\n",
      "The language of the unrevised report",
      "[",
      "edit",
      "]",
      "\n",
      "The original language (As per the \"Final Report\"",
      "r0",
      ") differs in syntax of the ",
      "mode cast",
      ", and it had the feature of ",
      "proceduring",
      ", i.e. coercing the value of a term into a procedure which evaluates the term. Proceduring would be intended to make evaluations ",
      "lazy",
      ". The most useful application could have been the short-circuited evaluation of boolean operators. In:\n",
      "\n",
      "op",
      " ",
      "andf",
      " = (",
      "bool",
      " a,",
      "proc",
      " ",
      "bool",
      " b)",
      "bool",
      ":(a | b | ",
      "false",
      ");\n",
      "op",
      " ",
      "orf",
      " = (",
      "bool",
      " a,",
      "proc",
      " ",
      "bool",
      " b)",
      "bool",
      ":(a | ",
      "true",
      " | b);\n",
      "\n",
      "b",
      " is only evaluated if ",
      "a",
      " is true.\n",
      "As defined in ALGOL 68, it did not work as expected, for example in the code:\n",
      "\n",
      "if",
      " ",
      "false",
      " ",
      "andf",
      " ",
      "co",
      " proc bool: ",
      "co",
      " ( print (\"Should not be executed\"); ",
      "true",
      ")\n",
      "then",
      " ...\n",
      "\n",
      "against the programmers na\u00efve expectations the print ",
      "would",
      " be executed as it is only the ",
      "value",
      " of the elaborated enclosed-clause after ",
      "andf",
      " that was procedured. Textual insertion of the commented-out ",
      "proc",
      " ",
      "bool",
      ": makes it work.\n",
      "Some implementations emulate the expected behaviour for this special case by extension of the language.\n",
      "Before revision, the programmer could decide to have the arguments of a procedure evaluated serially instead of collaterally by using semicolons instead of commas (",
      "gomma",
      "s).\n",
      "For example in:\n",
      "\n",
      "proc",
      " test = (",
      "real",
      " a; ",
      "real",
      " b)\u00a0:...\n...\ntest (x ",
      "plus",
      " 1, x);\n",
      "\n",
      "The first argument to test is guaranteed to be evaluated before the second, but in the usual:\n",
      "\n",
      "proc",
      " test = (",
      "real",
      " a, b)\u00a0:...\n...\ntest (x ",
      "plus",
      " 1, x);\n",
      "\n",
      "then the compiler could evaluate the arguments in whatever order it felt like.\n",
      "\n",
      "Extension proposals from IFIP WG 2.1",
      "[",
      "edit",
      "]",
      "\n",
      "After the revision of the report, some extensions to the language have been proposed to widen the applicability:\n",
      "\n",
      "partial parametrisation",
      " (aka ",
      "Currying",
      "): creation of functions (with fewer parameters) by specification of some, but not all parameters for a call, e.g. a function logarithm of two parameters, base and argument, could be specialised to natural, binary or decadic log,",
      "\n",
      "module extension",
      ": for support of external linkage,  two mechanisms were proposed, bottom-up ",
      "definition modules",
      ", a more powerful version of the facilities from ",
      "ALGOL 68-R",
      " and top-down ",
      "holes",
      ", similar to the ",
      "ENVIRON",
      " and ",
      "USING",
      " clauses from ",
      "ALGOL 68C",
      "[56]",
      "\n",
      "mode parameters",
      ": for implementation of limited parametrical polymorphism (most operations on data structures like lists, trees or other data containers can be specified without touching the pay load).",
      "\n",
      "So far, only partial parametrisation has been implemented, in Algol 68 Genie.\n",
      "\n",
      "True ALGOL 68s specification and implementation timeline",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "Name",
      "\n",
      "Year",
      "\n",
      "Purpose",
      "\n",
      "State",
      "\n",
      "Description",
      "\n",
      "Target CPU",
      "\n",
      "Licensing",
      "\n",
      "Implementation language\n",
      "\n",
      "\n",
      "Generalized ALGOL",
      "\n",
      "1962",
      "\n",
      "Scientific",
      "\n",
      "NL",
      "\n",
      "ALGOL for generalised grammars",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL Y",
      "Y",
      "\n",
      "1966",
      "\n",
      "Draft proposal",
      "\n",
      "Intl",
      "\n",
      "First version of Algol 68",
      "\n",
      "Specification",
      "\n",
      "ACM",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68",
      "DR",
      "\n",
      "1968",
      "\n",
      "Draft proposal",
      "\n",
      "Intl",
      "\n",
      "IFIP WG 2.1 Draft Report",
      "\n",
      "Specification \u2013 March",
      "\n",
      "ACM",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68",
      "r0",
      "\n",
      "1968",
      "\n",
      "Standard",
      "\n",
      "Intl",
      "\n",
      "IFIP WG 2.1 Final Report",
      "\n",
      "Specification \u2013 August",
      "\n",
      "ACM",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68-R",
      "R",
      "\n",
      "1970",
      "\n",
      "Military",
      "\n",
      "UK",
      "\n",
      "\n",
      "ICL 1900",
      "\n",
      "\n",
      "ALGOL 60\n",
      "\n",
      "\n",
      "EPOS ALGOL",
      "E",
      "\n",
      "1971",
      "\n",
      "Scientific",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68RS",
      "RS",
      "\n",
      "1972",
      "\n",
      "Military",
      "\n",
      "UK",
      "\n",
      "Portable compiler system",
      "\n",
      "ICL 2900/Series 39, Multics, VMS & ",
      "C generator (1993)",
      "\n",
      "Crown Copyright",
      "\n",
      "ALGOL 68RS\n",
      "\n",
      "\n",
      "Algol 68 with areas",
      "\n",
      "1972",
      "\n",
      "Experimental & other",
      "\n",
      "UK",
      "\n",
      "Addition of areas to Algol 68",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Mini ALGOL 68",
      "\n",
      "1973",
      "\n",
      "Research",
      "\n",
      "NL",
      "\n",
      "\"An interpreter for simple Algol 68 Programs\"",
      "\n",
      "Portable interpreter",
      "\n",
      "Mathematisch Centrum",
      "\n",
      "ALGOL 60",
      "\n",
      "\n",
      "\n",
      "OREGANO",
      "\n",
      "1973",
      "\n",
      "Research",
      "\n",
      "US",
      "\n",
      "\"The importance of implementation models.\"",
      "\n",
      "\n",
      "UCLA",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68C",
      "C",
      "\n",
      "1975",
      "\n",
      "Scientific",
      "\n",
      "UK",
      "\n",
      "Cambridge Algol 68",
      "\n",
      "ICL",
      ", IBM 360, PDP 10 & Unix, ",
      "Telefunken",
      ", Tesla & ",
      "Z80",
      "(1980)",
      "[57]",
      "\n",
      "Cambridge",
      "\n",
      "ALGOL 68C\n",
      "\n",
      "\n",
      "ALGOL 68 Revised Report",
      "r1",
      "\n",
      "1975",
      "\n",
      "Standard",
      "\n",
      "Intl",
      "\n",
      "IFIP WG 2.1 Revised Report",
      "\n",
      "Specification",
      "\n",
      "ACM",
      "\n",
      "\n",
      "\n",
      "\n",
      "Algol H",
      "H",
      "\n",
      "1975",
      "\n",
      "Experimental & other",
      "\n",
      "UK",
      "\n",
      "Proposed extensions to the mode system of Algol 68",
      "\n",
      "Specification",
      "\n",
      "\n",
      "ALGOL W",
      "\n",
      "\n",
      "\n",
      "Odra",
      " Algol 68",
      "\n",
      "1976",
      "\n",
      "practical uses",
      "\n",
      "USSR/Poland",
      "\n",
      "\n",
      "Odra 1204/IL",
      "\n",
      "Soviet",
      "\n",
      "ALGOL 60",
      "\n",
      "\n",
      "\n",
      "Oklahoma ALGOL 68",
      "\n",
      "1976",
      "\n",
      "programming instruction",
      "\n",
      "USA",
      "\n",
      "Oklahoma State University",
      " implementation",
      "[58]",
      "\n",
      "IBM 1130",
      " and ",
      "System/370",
      "/158",
      "\n",
      "Unknown",
      "\n",
      "ANSI ",
      "Fortran 66",
      ".\n",
      "\n",
      "\n",
      "Berlin ALGOL 68",
      "\n",
      "1977",
      "\n",
      "Research",
      "\n",
      "DE",
      "\n",
      "\"The Berlin ALGOL 68 implementation\"",
      " &",
      "[59]",
      "\n",
      "An Abstract ALGOL 68 Machine \u2013 machine independent Compiler",
      "\n",
      "Technical University of Berlin",
      "\n",
      "CDL 2",
      "\n",
      "\n",
      "\n",
      "FLACC",
      "F",
      "\n",
      "1977",
      "\n",
      "Multi-purpose",
      "\n",
      "CA",
      "\n",
      "Revised Report complete implementation with debug features",
      "\n",
      "System/370",
      "\n",
      "lease, Chion Corporation",
      "\n",
      "Assembler\n",
      "\n",
      "\n",
      "ALGOL 68-RT",
      "RT",
      "\n",
      "1979",
      "\n",
      "Scientific",
      "\n",
      "UK",
      "\n",
      "Parallel ALGOL 68-R",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "RS Algol",
      "rs",
      "\n",
      "1979",
      "\n",
      "Scientific",
      "\n",
      "UK",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68+",
      "\n",
      "1980",
      "\n",
      "Scientific",
      "\n",
      "NL",
      "\n",
      "Proposed superlanguage of ALGOL 68",
      "[60]",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "M-220",
      " ALGOL 68",
      "\n",
      "\n",
      "\n",
      "USSR",
      "\n",
      "\n",
      "M-220",
      "\n",
      "Soviet",
      "\n",
      "EPSILON",
      "\n",
      "\n",
      "\n",
      "Leningrad ALGOL 68",
      "L",
      "\n",
      "1980",
      "\n",
      "Telecommunications",
      "\n",
      "USSR",
      "\n",
      "Full language + modules",
      "\n",
      "IBM, DEC, CAMCOH, PS 1001 & PC",
      "\n",
      "Soviet",
      "\n",
      "\n",
      "\n",
      "\n",
      "Interactive ALGOL 68",
      "I",
      "\n",
      "1983",
      "\n",
      "\n",
      "UK",
      "\n",
      "Incremental compilation",
      "\n",
      "PC",
      "\n",
      "Noncommercial ",
      "shareware",
      " |",
      "\n",
      "\n",
      "\n",
      "\n",
      "ALGOL 68S",
      "S",
      "\n",
      "1985",
      "\n",
      "Scientific",
      "\n",
      "Intl",
      "\n",
      "Sun version of ALGOL 68",
      "\n",
      "Sun-3",
      ", Sun ",
      "SPARC",
      " (under ",
      "SunOS",
      " 4.1 & ",
      "Solaris",
      " 2), ",
      "Atari",
      " ST (under ",
      "GEMDOS",
      "), ",
      "Acorn Archimedes",
      " (under ",
      "RISC OS",
      "), ",
      "VAX-11",
      " under ",
      "Ultrix-32",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Algol68toC",
      "[61]",
      " (ctrans)",
      "\n",
      "1985",
      "\n",
      "Electronics",
      "\n",
      "UK",
      "\n",
      "ctrans from ",
      "ELLA",
      " ",
      "ALGOL 68RS",
      "\n",
      "Portable C\u00a0generator\u00a0",
      "\n",
      "Open-source software",
      " 1995",
      "\n",
      "ALGOL 68RS\n",
      "\n",
      "\n",
      "MK2 ",
      "Interactive ALGOL 68",
      "\n",
      "1992",
      "\n",
      "\n",
      "UK",
      "\n",
      "Incremental compilation",
      "\n",
      "PC",
      "\n",
      "Noncommercial shareware",
      "[62]",
      "\n",
      "\n",
      "\n",
      "\n",
      "Algol 68 Genie",
      "G",
      "\n",
      "2001",
      "\n",
      "Full language",
      "\n",
      "NL",
      "\n",
      "Includes standard collateral clause",
      "\n",
      "Portable interpreter",
      "\n",
      "GPL",
      "\n",
      "C",
      "\n",
      "\n",
      "\n",
      "Algol 68 Genie version 2.0.0",
      "\n",
      "2010",
      "\n",
      "Full language",
      "\n",
      "NL",
      "\n",
      "\n",
      "Portable interpreter; optional compilation of selected units",
      "\n",
      "GPL",
      "\n",
      "C",
      "\n",
      "\n",
      "The ",
      "S3 language",
      " that was used to write the ",
      "ICL VME",
      " operating system and much other system software on the ",
      "ICL 2900 Series",
      " was a direct derivative of Algol 68. However, it omitted many of the more complex features, and replaced the basic modes with a set of data types that mapped directly to the 2900 Series hardware architecture.\n",
      "\n",
      "Implementation specific extensions",
      "[",
      "edit",
      "]",
      "\n",
      "ALGOL 68R",
      "(R)",
      " from ",
      "RRE",
      " was the first ALGOL 68 subset implementation, running on the ",
      "ICL 1900",
      ". Based on the original language, the main subset restrictions were ",
      "definition before use",
      " and no parallel processing. This compiler was popular in ",
      "UK",
      " universities in the 1970s, where many ",
      "computer science",
      " students learnt ALGOL 68 as their first programming language; the compiler was renowned for good error messages.\n",
      "ALGOL 68RS",
      "(RS)",
      " from ",
      "RSRE",
      " was a portable compiler system written in ALGOL 68RS (bootstrapped from ALGOL 68R), and implemented on a variety of systems including the ",
      "ICL 2900",
      "/",
      "Series 39",
      ", ",
      "Multics",
      " and ",
      "DEC VAX/VMS",
      ". The language was based on the Revised Report, but with similar subset restrictions to ALGOL 68R. This compiler survives in the form of an Algol68-to-C compiler.\n",
      "In ALGOL 68S",
      "(S)",
      " from ",
      "Carnegie Mellon University",
      " the power of parallel processing was improved by adding an orthogonal extension, ",
      "eventing",
      ". Any variable declaration containing keyword ",
      "event",
      " made assignments to this variable eligible for parallel evaluation, i.e. the right hand side was made into a procedure which was moved to one of the processors of the ",
      "C.mmp",
      " multiprocessor system. Accesses to such variables were delayed after termination of the assignment.\n",
      "Cambridge",
      " ",
      "ALGOL 68C",
      "(C)",
      " was a portable compiler that implemented a subset of ALGOL 68, restricting operator definitions and omitting garbage collection, flexible rows and formatted transput.\n",
      "Algol 68 Genie",
      "(G)",
      " by M. van der Veer is an ALGOL 68 implementation for today's computers and operating systems.\n",
      "\"Despite good intentions, a programmer may violate portability by inadvertently employing a local extension.  To guard against this, each implementation should provide a PORTCHECK pragmat option.  While this option is in force, the compiler prints a message for each construct that it recognizes as violating some portability constraint.\"",
      "[63]",
      "\n",
      "\n",
      "Quotes",
      "[",
      "edit",
      "]",
      "\n",
      "... The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of. The central notion I captured from Algol was a type structure based on atomic types (including structures), composed into arrays, pointers (references), and functions (procedures). Algol 68's concept of unions and casts also had an influence that appeared later.",
      " ",
      "Dennis Ritchie",
      " Apr 1993.",
      "[2]",
      "\n",
      "... C does not descend from Algol 68 is true, yet there was influence, much of it so subtle that it is hard to recover even when I think hard. In particular, the union type (a late addition to C) does owe to A68, not in any details, but in the idea of having such a type at all. More deeply, the type structure in general and even, in some strange way, the declaration syntax (the type-constructor part) was inspired by A68. And yes, of course, \"long\".",
      " ",
      "Dennis Ritchie",
      ", 18 June 1988",
      "[4]",
      "\n",
      "\"Congratulations, your Master has done it\" \u2013 ",
      "Niklaus Wirth",
      "[64]",
      "\n",
      "The more I see of it, the more unhappy I become",
      " \u2013 E. W. Dijkstra, 1968",
      "[65]",
      "\n",
      "[...] it was said that A68's popularity was inversely proportional to [...] the distance from Amsterdam",
      " \u2013 ",
      "Guido van Rossum",
      "[66]",
      "\n",
      "[...] The best we could do was to send with it a minority report, stating our considered view that, \"... as a tool for the reliable creation of sophisticated programs, the language was a failure.\" [...] ",
      " \u2013 ",
      "C. A. R. Hoare",
      " in his Oct 1980 ",
      "Turing Award Lecture",
      "[67]",
      "\n",
      "Their actual minority report quote from 1970: ",
      "\"[...] More than ever it will be required from an adequate programming tool that it assists, by structure, the programmer in the most difficult aspects of his job, viz. in the reliable creation of sophisticated programs. In this respect we fail to see how the language proposed here ",
      "[Algol68]",
      " is a significant step forward: on the contrary, we feel that its implicit view of the programmer's task is very much the same as, say, ten years ago. This forces upon us the conclusion that, regarded as a programming tool, the language must be regarded as obsolete. [...]\"",
      " Signed by: ",
      "Dijkstra",
      ", ",
      "Duncan",
      ", ",
      "Hoare",
      ", ",
      "Randell",
      ", ",
      "Seegmueller",
      ", ",
      "Turski",
      ", ",
      "Woodger",
      ". With ",
      "Jan V. Garwick",
      "[68]",
      " on 23 December 1968.",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n \n",
      "\n",
      "\n",
      "ALGOL 60",
      "\n",
      "ALGOL Y",
      "\n",
      "ALGOL N",
      "\n",
      "ALGOL 68C",
      "\n",
      " \n",
      "\n",
      "\n",
      "\n",
      "C (programming language)",
      "\n",
      "C++",
      "\n",
      "Bourne shell",
      "\n",
      "Bash",
      "\n",
      " \n",
      "\n",
      "\n",
      "\n",
      "Steelman language requirements",
      "\n",
      "Ada (programming language)",
      "\n",
      "Python (programming language)",
      "\n",
      " \n",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "Citations",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "van Wijngaarden, Adriaan",
      "; ",
      "Mailloux, Barry James",
      "; ",
      "Peck, John Edward Lancelot",
      "; ",
      "Koster, Cornelis Hermanus Antonius",
      "; ",
      "Sintzoff, Michel",
      "; ",
      "Lindsey, Charles Hodgson",
      "; ",
      "Meertens, Lambert Guillaume Louis Th\u00e9odore",
      "; Fisker, Richard G., eds. (1976). ",
      "Revised Report on the Algorithmic Language ALGOL 68",
      " ",
      "(PDF)",
      ". ",
      "Springer-Verlag",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-387-07592-1",
      ". ",
      "OCLC",
      "\u00a0",
      "1991170",
      ". ",
      "Archived",
      " ",
      "(PDF)",
      " from the original on 2019-04-19",
      ". Retrieved ",
      "2019-05-11",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Dennis Ritchie",
      " (April 1993). ",
      "\"The Development of the C Language\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 2005-11-06",
      ". Retrieved ",
      "2007-04-26",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Influence on C: types, structures, arrays, pointers and procedures \u2013 Dennis Ritchie",
      "[2]",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Dennis Ritchie",
      " (June 1988). ",
      "\"C and Algol 68\"",
      ". Retrieved ",
      "2006-09-15",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Influence on C: union, structure, syntax and long precision \u2013 Dennis Ritchie",
      "[4]",
      "\n",
      "\n",
      "^",
      " ",
      "\"A History of C++: 1979\u22121991\"",
      " ",
      "(PDF)",
      ". March 1993. Page 12, 2nd paragraph: Algol68 [gave] operator overloading(\u00a73.3.3), references (\u00a73.3.4), and the ability to declare variables anywhere in a block (\u00a73.3.1)",
      ". Retrieved ",
      "2008-05-06",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Interview with Guido van Rossum\"",
      ". July 1998. Archived from ",
      "the original",
      " on 2007-05-01",
      ". Retrieved ",
      "2007-04-29",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"A Shorter History of ALGOL 68\"",
      ". Archived from ",
      "the original",
      " on 2006-08-10",
      ". Retrieved ",
      "2006-09-15",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Completeness and clarity of description",
      " ",
      "Archived",
      " 2013-03-17 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Orthogonal design",
      " ",
      "Archived",
      " 2013-03-17 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Security",
      " ",
      "Archived",
      " 2013-03-17 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Efficiency",
      " ",
      "Archived",
      " 2013-03-17 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "https://groups.google.com/group/comp.lang.misc/msg/03af5063e1662d4d",
      "\n",
      "\n",
      "^",
      " ",
      "Revised Report on the Algorithmic Language Algol 68",
      " ",
      "Archived",
      " 2013-03-17 at the ",
      "Wayback Machine",
      ". jmvdveer.home.xs4all.nl (1968-12-20). Retrieved on 2013-07-21.",
      "\n",
      "\n",
      "^",
      " ",
      "Terekhov, Andrey (2014). \"ALGOL 68 and Its Impact on the USSR and Russian Programming\". ",
      "2014 Third International Conference on Computer Technology in Russia and in the Former Soviet Union",
      ". pp.\u00a097\u2013106. ",
      "doi",
      ":",
      "10.1109/SoRuCom.2014.29",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-4799-1799-0",
      ". ",
      "S2CID",
      "\u00a0",
      "16097093",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "http://toc.proceedings.com/25445webtoc.pdf",
      " \"\u0410\u043b\u0433\u043e\u043b 68 \u0438 \u0435\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0421\u0421\u0421\u0420 \u0438 \u0420\u043e\u0441\u0441\u0438\u0438\" \u2013 pages: 336 & 342",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey 1996",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\n",
      "Lindsey, Charles H.",
      " (1996).  Bergin, T. J.; Gibson, R. G. (eds.). ",
      "A History of ALGOL 68",
      ". ",
      "ACM SIGPLAN Notices",
      ". ",
      "History of Programming Languages-II",
      ". ",
      "28",
      ". also in ACM SIGPLAN Notices 28(3), March 1993 (includes a comprehensive bibliography of the meetings and discussions before, during and after development of ALGOL 68). ",
      "ACM Press",
      ". pp.\u00a097\u2013132. ",
      "doi",
      ":",
      "10.1145/155360.155365",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-201-89502-5",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Programming Algol 68 Made Easy",
      "\n",
      "\n",
      "^",
      " ",
      "Learning ALGOL 68 Genie",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey 1993",
      ", p.\u00a07.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Lindsey 1993",
      ", p.\u00a09.",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey 1993",
      ", p.\u00a024.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Lindsey 1993",
      ", p.\u00a010.",
      "\n",
      "\n",
      "^",
      " ",
      "http://archive.computerhistory.org/resources/text/algol/algol_bulletin/",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Lindsey 1993",
      ", p.\u00a012.",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey 1993",
      ", p.\u00a013.",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey 1993",
      ", p.\u00a015.",
      "\n",
      "\n",
      "^",
      " ",
      "Hoare, C. a. R. (November 1968). ",
      "\"Critique of ALGOL 68\"",
      ". ",
      "ALGOL Bulletin",
      ". ",
      "29",
      ": 27\u201329.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Peck, J. E. L., ed. (1970), ",
      "Proceedings of the IFIP working conference on ALGOL 68 Implementation",
      ", Munich: North-Holland, ",
      "ISBN",
      "\u00a0",
      "0-7204-2045-8",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Koster, C. H. A. ",
      "\"A Shorter History of Algol 68\"",
      ". Archived from ",
      "the original",
      " on 2007-12-17.",
      "\n",
      "\n",
      "^",
      " ",
      "van der Veer, Marcel. ",
      "\"Open source Algol 68 implementations\"",
      ". ",
      "algol68.sourceforge.net",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Draft Report",
      "(DR)",
      " Published",
      "\n",
      "\n",
      "^",
      " ",
      "Algol 68 Revised Report",
      "\n",
      "\n",
      "^",
      " ",
      "Proposals for ALGOL H \u2013 A Superlanguage of ALGOL 68",
      "\n",
      "\n",
      "^",
      " ",
      "Algol68 S",
      "(S)",
      " published on the internet",
      "\n",
      "\n",
      "^",
      " ",
      "Algol 68 Genie",
      "(G)",
      "\n",
      "\n",
      "^",
      " ",
      "\"Draft Report on the Algorithmic Language ALGOL 68\"",
      ". March 1968. ",
      "Archived",
      " from the original on 2007-09-30",
      ". Retrieved ",
      "2007-06-22",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Penultimate Draft Report on the Algorithmic Language ALGOL 68 \u2013 Chapters 1-9\"",
      " ",
      "(PDF)",
      ". October 1968",
      ". Retrieved ",
      "2007-06-22",
      ".",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "\n",
      "^",
      " ",
      "\"Penultimate Draft Report on the Algorithmic Language ALGOL 68 \u2013 Chapters 10-12\"",
      " ",
      "(PDF)",
      ". October 1968",
      ". Retrieved ",
      "2007-06-22",
      ".",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "\n",
      "^",
      " ",
      "\"Report on the Algorithmic Language ALGOL 68\"",
      " ",
      "(PDF)",
      ". December 1968",
      ". Retrieved ",
      "2007-12-30",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Revised Report on the Algorithmic Language Algol 68\"",
      ". September 1973. ",
      "Archived",
      " from the original on 2007-09-27",
      ". Retrieved ",
      "2007-04-30",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lu Hu-quan (1971). ",
      "\"The Translation of Algol 68 into Chinese\"",
      " ",
      "(PDF)",
      ". ",
      "Institute of Mathematics, Academia Sinica",
      " \u2013 Peking, China",
      ". Retrieved ",
      "2012-08-17",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"GOST 27974-88 Programming language ALGOL 68 \u2013 \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0410\u041b\u0413\u041e\u041b 68\"",
      " ",
      "(PDF)",
      " (in Russian). ",
      "GOST",
      ". 1988. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 2008-11-15",
      ". Retrieved ",
      "2008-11-15",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"GOST 27975-88 Programming language ALGOL 68 extended \u2013 \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0410\u041b\u0413\u041e\u041b 68 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439\"",
      " ",
      "(PDF)",
      " (in Russian). ",
      "GOST",
      ". 1988. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 2011-04-29",
      ". Retrieved ",
      "2008-11-15",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"IS NOT OPERATOR\" \u2013 ",
      "US application 20,040,230,959",
      "\u00a0",
      "\n",
      "\n",
      "^",
      " ",
      "Format syntax in ALGOL 68G",
      " ",
      "Archived",
      " 2008-01-09 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Needham, R. M.; Wilkes, M. V. (January 1979). ",
      "\"The Cambridge CAP Computer and its Operating System\"",
      " ",
      "(PDF)",
      ". ",
      "Microsoft Research",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "David Holdsworth (Winter 2009\u20132010). ",
      "\"KDF9 Time Sharing: Eldon 2 is not EGDON!\"",
      ". ",
      "Computer Resurrection \u2013 Number 49",
      ". ",
      "Computer Conservation Society",
      ". Retrieved ",
      "2010-10-03",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "http://www.vitanuova.com/dist/doc/rsre-3522-curt.pdf",
      "\n",
      "\n",
      "^",
      " ",
      "\u042d\u043b\u044c\u0431\u0440\u0443\u0441 \u0411\u0430\u0431\u0430\u044f\u043d\u0430 \u0438 Pentium \u041f\u0435\u043d\u0442\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e",
      ". Ixbt.com. Retrieved on 2013-07-21.",
      "\n",
      "\n",
      "^",
      " ",
      "Oliver, J. R.; Newton, R. S. (1979). ",
      "\"Practical experience with ALGOL 68-RT\"",
      " ",
      "(PDF)",
      ". ",
      "The Computer Journal",
      ". ",
      "22",
      " (2): 114\u2013118. ",
      "doi",
      ":",
      "10.1093/comjnl/22.2.114",
      ". Retrieved ",
      "2011-04-09",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Applications, libraries, and test suites \u2014 Software Preservation Group",
      ". Softwarepreservation.org. Retrieved on 2013-07-21.",
      "\n",
      "\n",
      "^",
      " ",
      "Revised Report, page 123, footnote",
      "\n",
      "\n",
      "^",
      " ",
      "http://dare.ubvu.vu.nl/bitstream/1871/2609/1/11054.pdf",
      "\n",
      "\n",
      "^",
      " ",
      "Lindsey, C. H.; Boom, H. J. (December 1978). ",
      "\"A Modules and Separate Compilation facility for ALGOL 68\"",
      ". ",
      "ALGOL Bulletin",
      " (43): 19\u201353. ",
      "doi",
      ":",
      "10.1145/1061719.1061724",
      " (inactive 2020-08-31)",
      ". Retrieved ",
      "2020-01-29",
      ".",
      "CS1 maint: DOI inactive as of August 2020 (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "\"Archived copy\"",
      " ",
      "(PDF)",
      ". Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on 2010-04-15",
      ". Retrieved ",
      "2010-03-20",
      ".",
      "CS1 maint: archived copy as title (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "http://htportal.acm.org/ft_gateway.cfm?id=803425&type=pdf",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "\n",
      "^",
      " ",
      "An abstract ALGOL 68 machine and its application in a machine independent compiler \u2013 Springer",
      ". Springerlink.com. Retrieved on 2013-07-21.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Archived copy\"",
      ". Archived from ",
      "the original",
      " on 2011-03-10",
      ". Retrieved ",
      "2010-03-20",
      ".",
      "CS1 maint: archived copy as title (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "Open source Algol 68 implementations \u2013 Browse Files at",
      ". Sourceforge.net. Retrieved on 2013-07-21.",
      "\n",
      "\n",
      "^",
      " ",
      "[1]",
      " ",
      "Archived",
      " 2006-08-29 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "http://www.fh-jena.de/~kleine/history/languages/Algol68-RR-HardwareRepresentation.pdf",
      "\n",
      "\n",
      "^",
      " ",
      "C. H. A. Koster (1993). \"The Making of Algol 68\". ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.76.2072",
      ".",
      " ",
      "Cite journal requires ",
      "|journal=",
      " (",
      "help",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "E. W. Dijkstra. ",
      "\"To the EDITOR ALGOL 68 Mathematische Centrum\"",
      ". ",
      "Archived",
      " from the original on 2007-04-21",
      ". Retrieved ",
      "2007-04-28",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Guido van Rossum",
      " (June 2005). ",
      "\"Python-Dev Wishlist: dowhile\"",
      ". Retrieved ",
      "2007-04-28",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hoare, C. A. R. (February 1981) [based on his 1980 ",
      "Turing Award Lecture",
      "]. ",
      "\"The emperor's old clothes\"",
      ". ",
      "Communications of the ACM",
      ". ",
      "24",
      " (2): 75\u201383. ",
      "doi",
      ":",
      "10.1145/358549.358561",
      ". ",
      "S2CID",
      "\u00a0",
      "97895",
      ". Archived from ",
      "the original",
      " on 2013-05-08.",
      " ",
      "Alt URL",
      "\n",
      "\n",
      "^",
      " ",
      "\"ALGOL Bulletin (referred to in AB30.1.1.1)\"",
      ". March 1970. ",
      "Archived",
      " from the original on 2007-09-30",
      ". Retrieved ",
      "2007-03-01",
      ".",
      "\n",
      "\n",
      "\n",
      "Works cited",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}",
      "\n",
      "Brailsford, D. F. and Walker, A. N., ",
      "Introductory ALGOL 68 Programming",
      ", Ellis Horwood/Wiley, 1979",
      "\n",
      "Lindsey, C. H. and van der Meulen, S. G., ",
      "Informal Introduction to ALGOL 68",
      ", North-Holland, 1971",
      "\n",
      "Lindsey, C. H. (1993-03-02). \"A History of ALGOL 68\". ",
      "ACM SIGPLAN Notices",
      ". ",
      "28",
      " (3): 97\u2013132. ",
      "doi",
      ":",
      "10.1145/155360.155365",
      ".",
      "CS1 maint: ref=harv (",
      "link",
      ")",
      "\n",
      "McGettrick, A. D., ",
      "ALGOL 68, A First and Second Course",
      ", Cambridge Univ. Press, 1978",
      "\n",
      "Peck, J. E. L., ",
      "An ALGOL 68 Companion",
      ", Univ. of British Columbia, October 1971",
      "\n",
      "Tanenbaum, A. S., ",
      "A Tutorial on ALGOL 68",
      ", Computing Surveys ",
      "8",
      ", 155-190, June 1976 and ",
      "9",
      ", 255-256, September 1977, ",
      "[9]",
      "[",
      "permanent dead link",
      "]",
      "\n",
      "Woodward, P. M. and Bond, S. G., ",
      "ALGOL 68-R Users",
      "sic",
      " Guide",
      ", London, Her Majesty's Stationery Office, 1972",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Revised Report on the Algorithmic Language ALGOL 68",
      " The official reference for users and implementors of the language (large pdf file, scanned from Algol Bulletin)",
      "\n",
      "Revised Report on the Algorithmic Language ALGOL 68",
      " Hyperlinked HTML version of the Revised Report",
      "\n",
      "A Tutorial on Algol 68",
      ", by ",
      "Andrew S. Tanenbaum",
      ", in ",
      "Computing Surveys",
      ", Vol. 8, No. 2, June 1976, with ",
      "Corrigenda",
      " (Vol. 9, No. 3, September 1977)",
      "\n",
      "Algol 68 Genie \u2013 a GNU GPL Algol 68 compiler-interpreter",
      "\n",
      "Open source Algol 68 implementations, on SourceForge",
      "\n",
      "Algol68 Standard Hardware representation (.pdf)",
      "\n",
      "\u0418\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0430 \u0441 \u0410\u043b\u0433\u043e\u043b 68",
      "\n",
      "Algol 68 \u2013 25 Years in the USSR",
      "\n",
      "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0442\u043e\u0440\u0430 \u0441 \u0410\u043b\u0433\u043e\u043b 68",
      "\n",
      "C history with Algol68 heritage",
      "\n",
      "McJones, Paul, ",
      "\"Algol 68 implementations and dialects\"",
      ", ",
      "Software Preservation Group",
      ", ",
      "Computer History Museum",
      ", 2011-07-05",
      "\n",
      "Web enabled ALGOL 68 compiler for small experiments",
      "\n",
      "v",
      "t",
      "e",
      "ALGOL",
      " programming",
      "Implementations",
      "Technical",
      "standards",
      "\n",
      "ALGOL 58",
      "\n",
      "ALGOL 60",
      "\n",
      "ALGOL 68",
      "\n",
      "Dialects",
      "\n",
      "ABC ALGOL",
      "\n",
      "ALCOR",
      "\n",
      "ALGO",
      "\n",
      "ALGOL 68C",
      "\n",
      "ALGOL 68-R",
      "\n",
      "ALGOL 68RS",
      "\n",
      "ALGOL 68S",
      "\n",
      "ALGOL N",
      "\n",
      "ALGOL W",
      "\n",
      "ALGOL X",
      "\n",
      "Atlas Autocode",
      " (",
      "Edinburgh IMP",
      ")",
      "\n",
      "Burroughs ALGOL",
      "\n",
      "Coral 66",
      "\n",
      "Dartmouth ALGOL 30",
      "\n",
      "DASK",
      " ALGOL",
      "\n",
      "DG/L",
      "\n",
      "Elliott ALGOL",
      "\n",
      "Executive Systems Problem Oriented Language",
      " (ESPOL)",
      "\n",
      "FLACC",
      "\n",
      "IMP",
      "\n",
      "JOVIAL",
      "\n",
      "Kidsgrove",
      " Algol",
      "\n",
      "Mary",
      "\n",
      "NELIAC",
      "\n",
      "S-algol",
      ", ",
      "PS-algol",
      ", ",
      "Napier88",
      "\n",
      "Simula",
      "\n",
      "Small Machine ALGOL Like Language (",
      "SMALL",
      ")",
      "\n",
      "SMIL",
      " ALGOL",
      "\n",
      "Formalisms",
      "\n",
      "Jensen's Device",
      "\n",
      "Van Wijngaarden grammar",
      "\n",
      "Community",
      "Organizations",
      "Professional",
      "associations",
      "\n",
      "ALCOR",
      " Group",
      "\n",
      "Association for Computing Machinery",
      " (ACM)",
      "\n",
      "International Federation for Information Processing",
      " (IFIP) ",
      "IFIP Working Group 2.1",
      "\n",
      "Society of Applied Mathematics and Mechanics",
      " (GAMM)",
      "\n",
      "Business",
      "\n",
      "Burroughs Corporation",
      "\n",
      "Elliott Brothers",
      "\n",
      "Regnecentralen",
      "\n",
      "Education",
      "\n",
      "Case Institute of Technology",
      "\n",
      "University of Edinburgh",
      "\n",
      "University of St Andrews",
      "\n",
      "Manchester University",
      "\n",
      "Massachusetts Institute of Technology",
      " (MIT)",
      "\n",
      "Government",
      "\n",
      "Royal Radar Establishment",
      " (RRE)",
      "\n",
      "People",
      "ALGOL 58",
      "\n",
      "John Backus",
      "\n",
      "Friedrich L. Bauer",
      "\n",
      "Hermann Bottenbruch",
      "\n",
      "Charles Katz",
      "\n",
      "Alan Perlis",
      "\n",
      "Heinz Rutishauser",
      "\n",
      "Klaus Samelson",
      "\n",
      "Joseph Henry Wegstein",
      "\n",
      "ALGOL 60",
      "\n",
      "Backus+",
      "\n",
      "Roland Carl Backhouse",
      "\n",
      "Bauer+",
      "\n",
      "Richard Bird",
      "\n",
      "Stephen R. Bourne",
      "\n",
      "Robert Dewar",
      "\n",
      "Edsger W. Dijkstra",
      "\n",
      "Andrey Ershov",
      "\n",
      "Robert W. Floyd",
      "\n",
      "Jeremy Gibbons",
      "\n",
      "Julien Green",
      "\n",
      "David Gries",
      "\n",
      "Eric Hehner",
      "\n",
      "Tony Hoare",
      "\n",
      "Katz+",
      "\n",
      "Peter Landin",
      "\n",
      "Tom Maibaum",
      "\n",
      "Conor McBride",
      "\n",
      "John McCarthy",
      "\n",
      "Carroll Morgan",
      "\n",
      "Peter Naur",
      "\n",
      "Maurice Nivat",
      "\n",
      "John E. L. Peck",
      "\n",
      "Perlis+",
      "\n",
      "Brian Randell",
      "\n",
      "Rutishauser",
      "\n",
      "Samelson+",
      "\n",
      "Jacob T. Schwartz",
      "\n",
      "Micha Sharir",
      "\n",
      "David Turner",
      "\n",
      "Bernard Vauquois",
      "\n",
      "Eiiti Wada",
      "\n",
      "Wegstein+",
      "\n",
      "Adriaan van Wijngaarden",
      "\n",
      "Mike Woodger",
      "\n",
      "+ = full name and link in prior ALGOL version above",
      "\n",
      "ALGOL 68",
      "\n",
      "Bauer+",
      "\n",
      "Susan G. Bond",
      "\n",
      "Bourne+",
      "\n",
      "Dijkstra+",
      "\n",
      "Gerhard Goos",
      "\n",
      "Michael Guy",
      "\n",
      "Hoare+",
      "\n",
      "Cornelis H. A. Koster",
      "\n",
      "Peter Landin",
      "\n",
      "Charles H. Lindsey",
      "\n",
      "Barry J. Mailloux",
      "\n",
      "McCarthy+",
      "\n",
      "Lambert Meertens",
      "\n",
      "Naur+",
      "\n",
      "Peck+",
      "\n",
      "Willem van der Poel",
      "\n",
      "Randell+",
      "\n",
      "Douglas T. Ross",
      "\n",
      "Samelson+",
      "\n",
      "Michel Sintzoff",
      "\n",
      "van Wijngaarden+",
      "\n",
      "Niklaus Wirth",
      "\n",
      "Woodger+",
      "\n",
      "Philip Woodward",
      "\n",
      "Nobuo Yoneda",
      "\n",
      "+ = full name and link in prior ALGOL version above",
      "\n",
      "\n",
      "Hal Abelson",
      "\n",
      "Tony Brooker",
      "\n",
      "J\u00f8rn Jensen",
      "\n",
      "Ron Morrison",
      "\n",
      "John C. Reynolds",
      "Other",
      "\n",
      "ALGOL Bulletin",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "GND",
      ": ",
      "4141871-2",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=ALGOL_68&oldid=980204178",
      "\""
    ],
    "lastUpdated": " 25 September 2020, at 05:36"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Dylan_(programming_language)",
    "title": "Dylan (programming language)",
    "text": [
      "This article ",
      "needs additional citations for ",
      "verification",
      ".",
      " Please help ",
      "improve this article",
      " by ",
      "adding citations to reliable sources",
      ". Unsourced material may be challenged and removed.",
      "Find sources:",
      "\u00a0",
      "\"Dylan\"\u00a0programming language",
      "\u00a0\u2013\u00a0",
      "news",
      "\u00a0",
      "\u00b7",
      " ",
      "newspapers",
      "\u00a0",
      "\u00b7",
      " ",
      "books",
      "\u00a0",
      "\u00b7",
      " ",
      "scholar",
      "\u00a0",
      "\u00b7",
      " ",
      "JSTOR",
      "  ",
      "(",
      "June 2013",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "Dylan",
      "Paradigm",
      "multi-paradigm",
      ": ",
      "functional",
      ", ",
      "object-oriented",
      "Developer",
      "Open Source Community",
      " ",
      "Apple Computer",
      ", ",
      "Harlequin",
      ", ",
      "Carnegie Mellon University",
      "First\u00a0appeared",
      "1992",
      "; 28\u00a0years ago",
      "\u00a0(",
      "1992",
      ")",
      "Stable release",
      "2019.1\n   / March\u00a031, 2019",
      "; 18\u00a0months ago",
      "\u00a0(",
      "2019-03-31",
      ")",
      "\n",
      "Typing discipline",
      "Strong, dynamic",
      "Platform",
      "IA-32",
      ", ",
      "x86-64",
      "OS",
      "Cross-platform",
      "Filename extensions",
      "dylan",
      "Website",
      "opendylan",
      ".org",
      "Major ",
      "implementations",
      "Open Dylan",
      ", Gwydion Dylan",
      "Dialects",
      "infix-dylan (AKA Dylan), prefix-dylan (AKA Lisp)",
      "Influenced by",
      "CLOS",
      ", ",
      "ALGOL",
      ", ",
      "Scheme",
      ", ",
      "EuLisp",
      "Influenced",
      "Lasso",
      ", ",
      "Python",
      ", ",
      "Ruby",
      ",\n",
      "Julia",
      "[1]",
      "\n",
      "Dylan",
      " is a multi-paradigm ",
      "programming language",
      " that includes support for ",
      "functional",
      " and ",
      "object-oriented programming",
      " (OOP), and is ",
      "dynamic",
      " and ",
      "reflective",
      " while providing a programming model designed to support generating efficient machine code, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by ",
      "Apple Computer",
      ".\n",
      "A concise and thorough overview of the language may be found in the Dylan Reference Manual.",
      "[2]",
      "\n",
      "Dylan derives from ",
      "Scheme",
      " and ",
      "Common Lisp",
      " and adds an integrated object system derived from the ",
      "Common Lisp Object System",
      " (CLOS). In Dylan, all values (including numbers, characters, functions, and ",
      "classes",
      ") are ",
      "first-class objects",
      ". Dylan supports ",
      "multiple inheritance",
      ", ",
      "polymorphism",
      ", ",
      "multiple dispatch",
      ", ",
      "keyword arguments",
      ", object introspection, ",
      "pattern",
      "-based ",
      "syntax extension macros",
      ", and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).\n",
      "Dylan's main design goal is to be a dynamic language well-suited for developing ",
      "commercial software",
      ". Dylan attempts to address potential performance issues by introducing \"natural\" limits to the full flexibility of ",
      "Lisp",
      " systems, allowing the ",
      "compiler",
      " to clearly understand compilable units, such as ",
      "libraries",
      ".\n",
      "Dylan derives much of its semantics from Scheme and other Lisps; some Dylan implementations were initially built within extant Lisp systems. However, Dylan has an ",
      "ALGOL",
      "-like syntax instead of a Lisp-like prefix syntax.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "History",
      "\n",
      "2",
      " ",
      "Syntax",
      "\n",
      "\n",
      "2.1",
      " ",
      "Lexical syntax",
      "\n",
      "2.2",
      " ",
      "Example code",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Modules vs. namespace",
      "\n",
      "4",
      " ",
      "Classes",
      "\n",
      "5",
      " ",
      "Methods and generic functions",
      "\n",
      "6",
      " ",
      "Extensibility",
      "\n",
      "7",
      " ",
      "Apple Dylan",
      "\n",
      "8",
      " ",
      "References",
      "\n",
      "9",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Further information: ",
      "History of the Dylan programming language",
      "\n",
      "Dylan was created in the early 1990s by a group led by ",
      "Apple Computer",
      ". At one time in its development, it was intended for use with the ",
      "Apple Newton",
      " computer, but the Dylan implementation did not reach sufficient maturity in time, and Newton instead used a mix of C and the ",
      "NewtonScript",
      " developed by Walter Smith. Apple ended their Dylan development effort in 1995, though they made a \"technology release\" version available (Apple Dylan TR1) that included an advanced ",
      "integrated development environment",
      " (IDE).\n",
      "Two other groups contributed to the design of the language and developed implementations: ",
      "Harlequin",
      " released a commercial IDE for ",
      "Microsoft Windows",
      " and ",
      "Carnegie Mellon University",
      " released an ",
      "open source",
      " compiler for ",
      "Unix",
      " systems called Gwydion Dylan. Both of these implementations are now open source. The Harlequin implementation is now named Open Dylan and is maintained by a group of volunteers, the Dylan Hackers.\n",
      "The Dylan language was code-named Ralph. James Joaquin chose the name Dylan for \"DYnamic LANguage.\"\n",
      "\n",
      "Syntax",
      "[",
      "edit",
      "]",
      "\n",
      "Many of Dylan's syntax features come from its Lisp heritage. Originally, Dylan used a Lisp-like prefix syntax, which was based on ",
      "s-expressions",
      ". By the time the language design was completed, the syntax was changed to an ALGOL-like syntax, with the expectation that it would be more familiar to a wider audience of programmers. The syntax was designed by Michael Kahl. It is described in great detail in the Dylan Reference Manual.",
      "[2]",
      "\n",
      "\n",
      "Lexical syntax",
      "[",
      "edit",
      "]",
      "\n",
      "Dylan is not ",
      "case sensitive",
      ". Dylan's ",
      "lexical syntax",
      " allows the use of a naming convention where ",
      "hyphen-minus",
      " signs are used to connect the parts of multiple-word identifiers (sometimes called \"",
      "lisp-case",
      "\" or \"",
      "kebab case",
      "\"). This convention is common in Lisp languages but cannot be used in programming languages that treat any hyphen-minus that is not part of a numeric ",
      "literal",
      " as a single ",
      "lexical token",
      ", even when not surrounded by ",
      "whitespace characters",
      ".\n",
      "Besides ",
      "alphanumeric",
      " characters and hyphen-minus signs, Dylan allows certain non-alphanumerical characters as part of identifiers. Identifiers may not consist of these non-alphanumeric characters or of numeric characters alone.",
      "[2]",
      " If there is any ambiguity, whitespace is used.\n",
      "\n",
      "Example code",
      "[",
      "edit",
      "]",
      "\n",
      "A simple class with several slots:\n",
      "\n",
      "define",
      " ",
      "class",
      " ",
      "<point>",
      " ",
      "(",
      "<object>",
      ")",
      "\n  ",
      "slot",
      " ",
      "point-x",
      " ",
      "::",
      " ",
      "<integer>",
      ",",
      "\n    ",
      "required-init-keyword:",
      " ",
      "x:",
      ";",
      "\n  ",
      "slot",
      " ",
      "point-y",
      " ",
      "::",
      " ",
      "<integer>",
      ",",
      "\n    ",
      "required-init-keyword:",
      " ",
      "y:",
      ";",
      "\n",
      "end",
      " ",
      "class",
      " ",
      "<point>",
      ";",
      "\n",
      "\n",
      "By convention, classes are named with less-than and greater-than signs used as ",
      "angle brackets",
      ", e.g. the class named ",
      "<point>",
      " in the code example.\n",
      "In ",
      "end class <point>",
      " both ",
      "class",
      " and ",
      "<point>",
      " are optional.  This is true for all ",
      "end",
      " clauses.  For example, you may write ",
      "end if",
      " or just ",
      "end",
      " to terminate an ",
      "if",
      " statement.\n",
      "The same class, rewritten in the most minimal way possible:\n",
      "\n",
      "define",
      " ",
      "class",
      " ",
      "<point>",
      " ",
      "(",
      "<object>",
      ")",
      "\n  ",
      "slot",
      " ",
      "point-x",
      ";",
      "\n  ",
      "slot",
      " ",
      "point-y",
      ";",
      "\n",
      "end",
      ";",
      "\n",
      "\n",
      "The slots are now both typed as ",
      "<object>",
      ". The slots must be initialized manually.\n",
      "By convention, constant names begin with \"$\":\n",
      "\n",
      "define",
      " ",
      "constant",
      " ",
      "$pi",
      " ",
      "::",
      " ",
      "<double-float>",
      " ",
      "=",
      " ",
      "3.1415927",
      "d0",
      ";",
      "\n",
      "\n",
      "A factorial function:\n",
      "\n",
      "define",
      " ",
      "function",
      " ",
      "factorial",
      " ",
      "(",
      "n",
      " ",
      "::",
      " ",
      "<integer>",
      ")",
      " ",
      "=>",
      " ",
      "(",
      "n!",
      " ",
      "::",
      " ",
      "<integer>",
      ")",
      "\n  ",
      "case",
      "\n    ",
      "n",
      " ",
      "<",
      " ",
      "0",
      "     ",
      "=>",
      " ",
      "error",
      "(",
      "\"Can't take factorial of negative integer: %d",
      "\\n",
      "\"",
      ",",
      " ",
      "n",
      ");",
      "\n    ",
      "n",
      " ",
      "=",
      " ",
      "0",
      "     ",
      "=>",
      " ",
      "1",
      ";",
      "\n    ",
      "otherwise",
      " ",
      "=>",
      " ",
      "n",
      " ",
      "*",
      " ",
      "factorial",
      "(",
      "n",
      " ",
      "-",
      " ",
      "1",
      ");",
      "\n  ",
      "end",
      "\n",
      "end",
      ";",
      "\n",
      "\n",
      "Here, ",
      "n!",
      " and ",
      "<integer>",
      " are just normal identifiers.\n",
      "There is no explicit ",
      "return statement",
      ".  The result of a method or function is the last expression evaluated.  It is a common style to leave off the semicolon after an expression in return position.\n",
      "\n",
      "Modules vs. namespace",
      "[",
      "edit",
      "]",
      "\n",
      "In many object-oriented languages, classes are the main means of encapsulation and modularity; each class defines a namespace and controls which definitions are externally visible. Further, classes in many languages define an indivisible unit that must be used as a whole. For example, using a ",
      "String",
      " concatenation function requires importing and compiling against all of ",
      "String",
      ".\n",
      "Some languages, including Dylan, also include a separate, explicit namespace or module system that performs encapsulation in a more general way.\n",
      "In Dylan, the concepts of compile-unit and import-unit are separated, and classes have nothing specifically to do with either. A ",
      "library",
      " defines items that should be compiled and handled together, while a ",
      "module",
      " defines a namespace. Classes can be placed together in modules, or cut across them, as the programmer wishes. Often the complete definition for a class does not exist in a single module, but is spread across several that are optionally collected together. Different programs can have different definitions of the same class, including only what they need.\n",
      "For example, consider an add-on library for ",
      "regex",
      " support on ",
      "String",
      ". In some languages, for the functionality to be included in strings, the functionality must be added to the ",
      "String",
      " namespace. As soon as this occurs, the ",
      "String",
      " class becomes larger, and functions that don't need to use regex still must \"pay\" for it in increased library size. For this reason, these sorts of add-ons are typically placed in their own namespaces and objects. The downside to this approach is that the new functions are no longer a ",
      "part of",
      " ",
      "String",
      "; instead, it is isolated in its own set of functions that must be called separately. Instead of ",
      "myString.parseWith(myPattern)",
      ", which would be the natural organization from an OO viewpoint,  something like ",
      "myPattern.parseString(myString)",
      " is used, which effectively reverses the ordering.\n",
      "Under Dylan, many interfaces can be defined for the same code, for instance the String concatenation method could be placed in both the String interface, and the \"concat\" interface which collects together all of the different concatenation functions from various classes. This is more commonly used in math libraries, where functions tend to be applicable to widely differing object types.\n",
      "A more practical use of the interface construct is to build public and private versions of a module, something that other languages include as a ",
      "bolt on",
      " feature that invariably causes problems and adds syntax. Under Dylan, every function call can be simply places in the \"Private\" or \"Development\" interface, and collect up publicly accessible functions in ",
      "Public",
      ". Under ",
      "Java",
      " or ",
      "C++",
      " the visibility of an object is defined in the code, meaning that to support a similar change, a programmer would be forced to rewrite the definitions fully, and could not have two versions at the same time.\n",
      "\n",
      "Classes",
      "[",
      "edit",
      "]",
      "\n",
      "Classes in Dylan describe ",
      "slots",
      " (data members, fields, ivars, etc.) of objects in a fashion similar to most OO languages. All access to slots are via methods, as in ",
      "Smalltalk",
      ". Default getter and setter methods are automatically generated based on the slot names.  In contrast with most other OO languages, other methods applicable to the class are often defined outside of the class, and thus class definitions in Dylan typically include the definition of the storage only. For instance:\n",
      "\n",
      "define",
      " ",
      "class",
      " ",
      "<window>",
      " ",
      "(",
      "<view>",
      ")",
      "\n  ",
      "slot",
      " ",
      "title",
      " ",
      "::",
      " ",
      "<string>",
      " ",
      "=",
      " ",
      "\"untitled\"",
      ",",
      " ",
      "init-keyword:",
      " ",
      "title:",
      ";",
      "\n  ",
      "slot",
      " ",
      "position",
      " ",
      "::",
      " ",
      "<point>",
      ",",
      " ",
      "required-init-keyword:",
      " ",
      "position:",
      ";",
      "\n",
      "end",
      " ",
      "class",
      ";",
      "\n",
      "\n",
      "In this example, the class \"",
      "<window>",
      "\" is defined. The <class name> syntax is convention only, to make the class names stand out\u2014the angle brackets are merely part of the class name. In contrast, in some languages the convention is to capitalize the first letter of the class name or to prefix the name with a ",
      "C",
      " or ",
      "T",
      " (for example). ",
      "<window>",
      " inherits from a single class, ",
      "<view>",
      ", and contains two slots, ",
      "title",
      " holding a string for the window title, and ",
      "position",
      " holding an X-Y point for a corner of the window. In this example, the title has been given a default value, while the position has not. The optional ",
      "init-keyword",
      " syntax allows the programmer to specify the initial value of the slot when instantiating an object of the class.\n",
      "In languages such as C++ or Java, the class would also define its interface. In this case the definition above has no explicit instructions, so in both languages access to the slots and methods is considered ",
      "protected",
      ", meaning they can be used only by subclasses. To allow unrelated code to use the window instances, they must be declared ",
      "public",
      ".\n",
      "In Dylan, these sorts of visibility rules are not considered part of the code, but of the module/interface system. This adds considerable flexibility. For instance, one interface used during early development could declare everything public, whereas one used in testing and deployment could limit this. With C++ or Java these changes would require changes to the source code, so people won't do it, whereas in Dylan this is a fully unrelated concept.\n",
      "Although this example does not use it, Dylan also supports ",
      "multiple inheritance",
      ".\n",
      "\n",
      "Methods and generic functions",
      "[",
      "edit",
      "]",
      "\n",
      "In Dylan, methods are not intrinsically associated with any specific class; methods can be thought of as existing outside of classes. Like CLOS, Dylan is based on ",
      "multiple dispatch",
      " (multimethods), where the specific method to be called is chosen based on the types of all its arguments. The method need not be known at compile time, the understanding being that the required function may be available, or not, based on a user's preferences.\n",
      "Under Java the same methods would be isolated in a specific class. To use that functionality the programmer is forced to ",
      "import",
      " that class and refer to it explicitly to call the method. If that class is unavailable, or unknown at compile time, the application simply won't compile.\n",
      "In Dylan, code is isolated from storage in ",
      "functions",
      ". Many classes have methods that call their own functions, thereby looking and feeling like most other OO languages. However code may also be located in ",
      "generic functions",
      ", meaning they are not attached to a specific class, and can be called natively by anyone. Linking a specific generic function to a method in a class is accomplished thusly:\n",
      "\n",
      "define",
      " ",
      "method",
      " ",
      "turn-blue",
      " ",
      "(",
      "w",
      " ",
      "::",
      " ",
      "<window>",
      ")",
      "\n  ",
      "w",
      ".",
      "color",
      " ",
      ":=",
      " ",
      "$blue",
      ";",
      "\n",
      "end",
      " ",
      "method",
      ";",
      "\n",
      "\n",
      "This definition is similar to those in other languages, and would likely be encapsulated within the ",
      "<window>",
      " class. Note the\u00a0:= setter call, which is ",
      "syntactic sugar",
      " for ",
      "color-setter($blue, w)",
      ".\n",
      "The utility of generic methods comes into its own when you consider more \"generic\" examples. For instance, one common function in most languages is the ",
      "to-string",
      ", which returns some ",
      "human-readable",
      " form for the object. For instance, a window might return its title and its position in parens, while a string would return itself. In Dylan these methods could all be collected into a single module called \"",
      "to-string",
      "\", thereby removing this code from the definition of the class itself. If a specific object did not support a ",
      "to-string",
      ", it could be easily added in the ",
      "to-string",
      " module.\n",
      "\n",
      "Extensibility",
      "[",
      "edit",
      "]",
      "\n",
      "This whole concept might strike some readers as very odd. The code to handle ",
      "to-string",
      " for a window isn't defined in ",
      "<window>",
      "? This might not make any sense until you consider how Dylan handles the call of the ",
      "to-string",
      ". In most languages",
      "[",
      "which?",
      "]",
      " when the program is compiled the ",
      "to-string",
      " for ",
      "<window>",
      " is looked up and replaced with a pointer (more or less) to the method. In Dylan this occurs when the program is first run; the ",
      "runtime",
      " builds a table of method-name/parameters details and looks up methods dynamically via this table. That means that a function for a specific method can be located anywhere, not just in the compile-time unit. In the end the programmer is given considerable flexibility in terms of where to place their code, collecting it along class lines where appropriate, and functional lines where it's not.\n",
      "The implication here is that a programmer can add functionality to existing classes by defining functions in a separate file. For instance, you might wish to add spell checking to all ",
      "<string>",
      "s, which in most languages would require access to the source code of the string class\u2014and such basic classes are rarely given out in source form. In Dylan (and other \"extensible languages\") the spell checking method could be added in the ",
      "spell-check",
      " module, defining all of the classes on which it can be applied via the ",
      "define method",
      " construct. In this case the actual functionality might be defined in a single generic function, which takes a string and returns the errors. When the ",
      "spell-check",
      " module is compiled into your program, all strings (and other objects) will get the added functionality.\n",
      "\n",
      "Apple Dylan",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Apple Dylan",
      "\n",
      "Apple Dylan is the implementation of Dylan produced by ",
      "Apple Computer",
      ". It was originally developed for the ",
      "Apple Newton",
      " product.\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Stokel-Walker, Chris. ",
      "\"Julia: The Goldilocks language\"",
      ". ",
      "Increment",
      ". Stripe",
      ". Retrieved ",
      "23 August",
      " 2020",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Andrew Shalit; David Moon; Orca Starbuck (11 September 1996). ",
      "The Dylan Reference Manual",
      ". Apple Press. ",
      "Addison-Wesley",
      ". ",
      "ISBN",
      "\u00a0",
      "9780201442113",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      ", Open Dylan \u2013 hosts open source, optimizing Dylan compiler targeting Unix/Linux, macOS, Microsoft Windows",
      "\n",
      "Overview of the language",
      "\n",
      "An Introduction to Dylan",
      "\n",
      "Apple Dylan TR1",
      "\n",
      "The Marlais Dylan Interpreter",
      " \u2013 An implementation of a subset of Dylan, suitable for bootstrapping a compiler",
      "\n",
      "Dylan",
      " at ",
      "Curlie",
      "\n",
      "v",
      "t",
      "e",
      "Lisp programming language",
      "Features",
      "\n",
      "Automatic storage management",
      "\n",
      "Conditionals",
      "\n",
      "Dynamic typing",
      "\n",
      "Higher-order functions",
      "\n",
      "Linked lists",
      "\n",
      "M-expressions",
      " (deprecated)",
      "\n",
      "Read\u2013eval\u2013print loop",
      "\n",
      "Recursion",
      "\n",
      "S-expressions",
      "\n",
      "Self-hosting",
      " ",
      "compiler",
      "\n",
      "Tree data structures",
      "\n",
      "Object",
      " systems",
      "\n",
      "Common Lisp Object System",
      " (CLOS)",
      "\n",
      "CommonLoops",
      "\n",
      "Flavors",
      "\n",
      "Implementations",
      "Technical",
      "standard(s)",
      "exists",
      "Common",
      "Lisp",
      "\n",
      "Allegro Common Lisp",
      "\n",
      "Armed Bear Common Lisp",
      " (ABCL)",
      "\n",
      "CLISP",
      "\n",
      "Clozure CL",
      "\n",
      "CMU Common Lisp",
      " (CMUCL)",
      "\n",
      "Corman Common Lisp",
      "\n",
      "Embeddable Common Lisp",
      " (ECL)",
      "\n",
      "GNU Common Lisp",
      " (GCL)",
      "\n",
      "LispWorks",
      "\n",
      "Macintosh Common Lisp",
      "\n",
      "Mocl",
      "\n",
      "Movitz",
      "\n",
      "Poplog",
      "\n",
      "Steel Bank Common Lisp",
      " (SBCL)",
      "\n",
      "Symbolics Common Lisp",
      "\n",
      "Scheme",
      "\n",
      "History",
      "\n",
      "Bigloo",
      "\n",
      "Chez Scheme",
      "\n",
      "Chicken",
      "\n",
      "Gambit",
      "\n",
      "Game Oriented Assembly Lisp",
      " (GOAL)",
      "\n",
      "Ikarus",
      "\n",
      "JScheme",
      "\n",
      "Kawa",
      "\n",
      "Larceny",
      "\n",
      "MIT/GNU Scheme",
      "\n",
      "MultiLisp",
      "\n",
      "Pocket Scheme",
      "\n",
      "Racket",
      "\n",
      "RScheme",
      "\n",
      "Scheme 48",
      "\n",
      "SCM",
      "\n",
      "SIOD",
      "\n",
      "T",
      "\n",
      "TinyScheme",
      "\n",
      "ISLISP",
      "\n",
      "OpenLisp",
      "\n",
      "Nonstandard",
      "Logo",
      "\n",
      "MSWLogo",
      "\n",
      "NetLogo",
      "\n",
      "StarLogo",
      "\n",
      "UCBLogo",
      "\n",
      "\n",
      "Arc",
      "\n",
      "AutoLISP",
      "\n",
      "BBN LISP",
      "\n",
      "Clojure",
      "\n",
      "Dylan",
      " (",
      "Apple",
      ", ",
      "history",
      ")",
      "\n",
      "Emacs Lisp",
      "\n",
      "EuLisp",
      "\n",
      "Franz Lisp",
      ", ",
      "PC-LISP",
      "\n",
      "Hy",
      "\n",
      "Interlisp",
      "\n",
      "Knowledge Engineering Environment",
      "\n",
      "*Lisp",
      "\n",
      "LeLisp",
      "\n",
      "LFE",
      "\n",
      "Lisp Machine Lisp",
      "\n",
      "Maclisp",
      "\n",
      "MDL",
      "\n",
      "MLisp",
      "\n",
      "newLISP",
      "\n",
      "NIL",
      "\n",
      "PC-LISP",
      "\n",
      "Picolisp",
      "\n",
      "Portable Standard Lisp",
      "\n",
      "RPL",
      "\n",
      "S-1 Lisp",
      "\n",
      "SKILL",
      "\n",
      "Spice Lisp",
      "\n",
      "Zetalisp",
      "Operating system",
      "\n",
      "Common Lisp Interface Manager",
      ", ",
      "McCLIM",
      "\n",
      "Genera",
      "\n",
      "Scsh",
      "\n",
      "Hardware",
      "\n",
      "Lisp machines",
      "\n",
      "TI Explorer",
      "\n",
      "Space-cadet keyboard",
      "\n",
      "Community of practice",
      "Technical standards",
      "\n",
      "Scheme Requests for Implementation",
      "\n",
      "Common Lisp HyperSpec",
      "\n",
      "X3J13",
      "\n",
      "Education",
      "Books",
      "\n",
      "Common Lisp the Language",
      "\n",
      "How to Design Programs",
      " (HTDP)",
      "\n",
      "On Lisp",
      "\n",
      "Practical Common Lisp",
      "\n",
      "Structure and Interpretation of Computer Programs",
      " (SICP)",
      "\n",
      "Curriculum",
      "\n",
      "ProgramByDesign",
      "\n",
      "Organizations",
      "Business",
      "\n",
      "Apple Computer",
      "\n",
      "Bolt, Beranek and Newman",
      "\n",
      "Harlequin",
      "\n",
      "Lucid Inc.",
      "\n",
      "Symbolics",
      "\n",
      "Xanalys",
      "\n",
      "Education",
      "\n",
      "Massachusetts Institute of Technology",
      " (MIT)",
      "\n",
      "MIT Computer Science and Artificial Intelligence Laboratory",
      " (CSAIL)",
      "\n",
      "Stanford Artificial Intelligence Laboratory",
      "\n",
      "University of California, Berkeley",
      "\n",
      "People",
      "\n",
      "Edmund Berkeley",
      "\n",
      "Daniel G. Bobrow",
      "\n",
      "William Clinger",
      "\n",
      "R. Kent Dybvig",
      "\n",
      "Matthias Felleisen",
      "\n",
      "Robert Bruce Findler",
      "\n",
      "Matthew Flatt",
      "\n",
      "Phyllis Fox",
      "\n",
      "Paul Graham",
      "\n",
      "Richard Greenblatt",
      "\n",
      "Timothy P. Hart",
      "\n",
      "Louis Hodes",
      "\n",
      "Mike Levin",
      "\n",
      "David Luckham",
      "\n",
      "John McCarthy",
      "\n",
      "Robert Tappan Morris",
      "\n",
      "Joel Moses",
      "\n",
      "David Park",
      "\n",
      "Steve Russell",
      "\n",
      "Richard Stallman",
      "\n",
      "Common Lisp",
      "\n",
      "Scott Fahlman",
      "\n",
      "Richard P. Gabriel",
      "\n",
      "Philip Greenspun",
      " (",
      "10th rule",
      ")",
      "\n",
      "David A. Moon",
      "\n",
      "Kent Pitman",
      "\n",
      "Guy L. Steele Jr.",
      "\n",
      "Daniel Weinreb",
      "\n",
      "Scheme",
      "\n",
      "Shriram Krishnamurthi",
      "\n",
      "Guy L. Steele Jr.",
      "\n",
      "Gerald Jay Sussman",
      "\n",
      "Julie Sussman",
      "\n",
      "Logo",
      "\n",
      "Hal Abelson",
      "\n",
      "Denison Bollay",
      "\n",
      "Wally Feurzeig",
      "\n",
      "Brian Harvey",
      "\n",
      "Seymour Papert",
      "\n",
      "Mitchel Resnick",
      "\n",
      "Cynthia Solomon",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "List",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Dylan_(programming_language)&oldid=980282605",
      "\""
    ],
    "lastUpdated": " 25 September 2020, at 16:40"
  },
  {
    "url": "https://en.wikipedia.org/wiki/C_(programming_language)",
    "title": "C (programming language)",
    "text": [
      "\"C Programming Language\" redirects here. For the book, see ",
      "The C Programming Language",
      ".",
      "\n",
      "\n",
      "\n",
      "general-purpose programming language",
      "\n",
      "C",
      "The C Programming Language",
      "[1]",
      " (often referred to as ",
      "K&R",
      "), the seminal book on C",
      "Paradigm",
      "Imperative",
      " (",
      "procedural",
      "), ",
      "structured",
      "Designed\u00a0by",
      "Dennis Ritchie",
      "Developer",
      "Dennis Ritchie",
      " & ",
      "Bell Labs",
      " (creators); ANSI X3J11 (",
      "ANSI C",
      "); ",
      "ISO/IEC JTC1/SC22/WG14",
      " (ISO C)",
      "First\u00a0appeared",
      "1972",
      "; 48\u00a0years ago",
      "\u00a0(",
      "1972",
      ")",
      "[2]",
      "Stable release",
      "C18",
      "\n   / June\u00a02018",
      "; 2\u00a0years ago",
      "\u00a0(",
      "2018-06",
      ")",
      "\n",
      "Typing discipline",
      "Static",
      ", ",
      "weak",
      ", ",
      "manifest",
      ", ",
      "nominal",
      "OS",
      "Cross-platform",
      "Filename extensions",
      ".c, .h",
      "Major ",
      "implementations",
      "K&R C",
      ", ",
      "GCC",
      ", ",
      "Clang",
      ", ",
      "Intel C",
      ",",
      " ",
      "C++Builder",
      ", ",
      "Microsoft Visual C++",
      ", ",
      "Watcom C",
      "Dialects",
      "Cyclone",
      ", ",
      "Unified Parallel C",
      ", ",
      "Split-C",
      ", ",
      "Cilk",
      ", ",
      "C*",
      "Influenced by",
      "B",
      " (",
      "BCPL",
      ", ",
      "CPL",
      "), ",
      "ALGOL 68",
      ",",
      "[3]",
      " ",
      "Assembly",
      ", ",
      "PL/I",
      ", ",
      "FORTRAN",
      "Influenced",
      "Numerous",
      ": ",
      "AMPL",
      ", ",
      "AWK",
      ", ",
      "csh",
      ", ",
      "C++",
      ", ",
      "C--",
      ", ",
      "C#",
      ", ",
      "Objective-C",
      ", ",
      "D",
      ", ",
      "Go",
      ", ",
      "Java",
      ", ",
      "JavaScript",
      ", ",
      "Julia",
      ", ",
      "Limbo",
      ", ",
      "LPC",
      ", ",
      "Perl",
      ", ",
      "PHP",
      ", ",
      "Pike",
      ", ",
      "Processing",
      ", ",
      "Python",
      ", ",
      "Rust",
      ", ",
      "Seed7",
      ", ",
      "Vala",
      ", ",
      "Verilog",
      " (HDL),",
      "[4]",
      " ",
      "Nim",
      ", ",
      "Zig",
      "\n",
      " ",
      "C Programming",
      " at Wikibooks",
      "\n",
      "\n",
      "C",
      " (",
      "/",
      "s",
      "i\u02d0",
      "/",
      ", as in the ",
      "letter ",
      "c",
      ") is a ",
      "general-purpose",
      ", ",
      "procedural",
      " computer ",
      "programming language",
      " supporting ",
      "structured programming",
      ", ",
      "lexical variable scope",
      ", and ",
      "recursion",
      ", with a ",
      "static type system",
      ". By design, C provides constructs that map efficiently to typical ",
      "machine instructions",
      ". It has found lasting use in applications previously coded in ",
      "assembly language",
      ". Such applications include ",
      "operating systems",
      " and various ",
      "application software",
      " for computer architectures that range from ",
      "supercomputers",
      " to ",
      "PLCs",
      " and ",
      "embedded systems",
      ".\n",
      "A successor to the programming language ",
      "B",
      ", C was originally developed at ",
      "Bell Labs",
      " by ",
      "Dennis Ritchie",
      " between 1972 and 1973 to construct utilities running on ",
      "Unix",
      ". It was applied to re-implementing the kernel of the Unix operating system.",
      "[5]",
      " During the 1980s, C gradually gained popularity. It has become one of the ",
      "most widely used programming languages",
      ",",
      "[6]",
      "[7]",
      " with C ",
      "compilers",
      " from various vendors available for the majority of existing ",
      "computer architectures",
      " and operating systems. C has been standardized by the ",
      "ANSI",
      " since 1989 (",
      "ANSI C",
      ") and by the ",
      "International Organization for Standardization",
      " (ISO). As of September\u00a02020",
      "[update]",
      ", C is the most popular programming language.",
      "[8]",
      "\n",
      "C is an ",
      "imperative",
      " ",
      "procedural",
      " language. It was designed to be ",
      "compiled",
      " to provide ",
      "low-level",
      " access to ",
      "memory",
      " and language constructs that map efficiently to ",
      "machine instructions",
      ", all with minimal ",
      "runtime support",
      ". Despite its low-level capabilities, the language was designed to encourage ",
      "cross-platform",
      " programming. A ",
      "standards",
      "-compliant C program written with ",
      "portability",
      " in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Overview",
      "\n",
      "\n",
      "1.1",
      " ",
      "Relations to other languages",
      "\n",
      "\n",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "\n",
      "2.1",
      " ",
      "Early developments",
      "\n",
      "2.2",
      " ",
      "K&R C",
      "\n",
      "2.3",
      " ",
      "ANSI C and ISO C",
      "\n",
      "2.4",
      " ",
      "C99",
      "\n",
      "2.5",
      " ",
      "C11",
      "\n",
      "2.6",
      " ",
      "C18",
      "\n",
      "2.7",
      " ",
      "C2x",
      "\n",
      "2.8",
      " ",
      "Embedded C",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Syntax",
      "\n",
      "\n",
      "3.1",
      " ",
      "Character set",
      "\n",
      "3.2",
      " ",
      "Reserved words",
      "\n",
      "3.3",
      " ",
      "Operators",
      "\n",
      "\n",
      "\n",
      "4",
      " ",
      "\"Hello, world\" example",
      "\n",
      "5",
      " ",
      "Data types",
      "\n",
      "\n",
      "5.1",
      " ",
      "Pointers",
      "\n",
      "5.2",
      " ",
      "Arrays",
      "\n",
      "5.3",
      " ",
      "Array\u2013pointer interchangeability",
      "\n",
      "\n",
      "\n",
      "6",
      " ",
      "Memory management",
      "\n",
      "7",
      " ",
      "Libraries",
      "\n",
      "\n",
      "7.1",
      " ",
      "File handling and streams",
      "\n",
      "\n",
      "\n",
      "8",
      " ",
      "Language tools",
      "\n",
      "9",
      " ",
      "Uses",
      "\n",
      "10",
      " ",
      "Related languages",
      "\n",
      "11",
      " ",
      "See also",
      "\n",
      "12",
      " ",
      "Notes",
      "\n",
      "13",
      " ",
      "References",
      "\n",
      "14",
      " ",
      "Sources",
      "\n",
      "15",
      " ",
      "Further reading",
      "\n",
      "16",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Overview",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Dennis Ritchie",
      " (right), the inventor of the C programming language, with ",
      "Ken Thompson",
      "\n",
      "Like most procedural languages in the ",
      "ALGOL",
      " tradition, C has facilities for ",
      "structured programming",
      " and allows ",
      "lexical variable scope",
      " and recursion. Its static ",
      "type system",
      " prevents unintended operations. In C, all ",
      "executable code",
      " is contained within ",
      "subroutines",
      " (also called \"functions\", though not strictly in the sense of ",
      "functional programming",
      "). ",
      "Function parameters",
      " are always passed by value. Pass-by-reference is simulated in C by explicitly passing ",
      "pointer",
      " values. C program source text is ",
      "free-format",
      ", using the ",
      "semicolon",
      " as a ",
      "statement",
      " terminator and ",
      "curly braces",
      " for grouping ",
      "blocks of statements",
      ".\n",
      "The C language also exhibits the following characteristics:\n",
      "\n",
      "The language has a small, fixed number of keywords, including a full set of ",
      "control flow",
      " primitives: ",
      "if/else",
      ", ",
      "for",
      ", ",
      "do/while",
      ", ",
      "while",
      ", and ",
      "switch",
      ". User-defined names are not distinguished from keywords by any kind of ",
      "sigil",
      ".",
      "\n",
      "It has a large number of arithmetic, bitwise, and logic operators: ",
      "+",
      ", ",
      "+=",
      ", ",
      "++",
      ", ",
      "&",
      ", ",
      "||",
      ", etc.",
      "\n",
      "More than one ",
      "assignment",
      " may be performed in a single statement.",
      "\n",
      "Functions:\n",
      "Function return values can be ignored, when not needed.",
      "\n",
      "Function and data pointers permit ",
      "ad hoc",
      " ",
      "run-time polymorphism",
      ".",
      "\n",
      "Functions may not be defined within the lexical scope of other functions.",
      "\n",
      "Data typing is ",
      "static",
      ", but ",
      "weakly enforced",
      "; all data has a type, but ",
      "implicit conversions",
      " are possible.",
      "\n",
      "Declaration",
      " ",
      "syntax",
      " mimics usage context. C has no \"define\" keyword; instead, a statement beginning with the name of a type is taken as a declaration. There is no \"function\" keyword; instead, a function is indicated by the presence of a parenthesized argument list.",
      "\n",
      "User-defined (",
      "typedef",
      ") and compound types are possible.\n",
      "Heterogeneous aggregate data types (",
      "struct",
      ") allow related data elements to be accessed and assigned as a unit.",
      "\n",
      "Union",
      " is a structure with overlapping members; only the last member stored is valid.",
      "\n",
      "Array",
      " indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class objects: they cannot be assigned or compared using single built-in operators. There is no \"array\" keyword in use or definition; instead, square brackets indicate arrays syntactically, for example ",
      "month[11]",
      ".",
      "\n",
      "Enumerated types",
      " are possible with the ",
      "enum",
      " keyword. They are freely interconvertible with integers.",
      "\n",
      "Strings",
      " are not a distinct data type, but are conventionally ",
      "implemented",
      " as ",
      "null-terminated",
      " character arrays.",
      "\n",
      "Low-level access to ",
      "computer memory",
      " is possible by converting machine addresses to typed ",
      "pointers",
      ".",
      "\n",
      "Procedures",
      " (subroutines not returning values) are a special case of function, with an untyped return type ",
      "void",
      ".",
      "\n",
      "A ",
      "preprocessor",
      " performs ",
      "macro",
      " definition, ",
      "source code",
      " file inclusion, and ",
      "conditional compilation",
      ".",
      "\n",
      "There is a basic form of ",
      "modularity",
      ": files can be compiled separately and ",
      "linked",
      " together, with control over which functions and data objects are visible to other files via ",
      "static",
      " and ",
      "extern",
      " attributes.",
      "\n",
      "Complex functionality such as ",
      "I/O",
      ", ",
      "string",
      " manipulation, and mathematical functions are consistently delegated to ",
      "library routines",
      ".",
      "\n",
      "While C does not include certain features found in other languages (such as ",
      "object orientation",
      " and ",
      "garbage collection",
      "), these can be implemented or emulated, often through the use of external libraries (e.g., the ",
      "GLib Object System",
      " or the ",
      "Boehm garbage collector",
      ").\n",
      "\n",
      "Relations to other languages",
      "[",
      "edit",
      "]",
      "\n",
      "Many later languages have borrowed directly or indirectly from C, including ",
      "C++",
      ", ",
      "C#",
      ", Unix's ",
      "C shell",
      ", ",
      "D",
      ", ",
      "Go",
      ", ",
      "Java",
      ", ",
      "JavaScript",
      " (including ",
      "transpilers",
      "), ",
      "Julia",
      ", ",
      "Limbo",
      ", ",
      "LPC",
      ", ",
      "Objective-C",
      ", ",
      "Perl",
      ", ",
      "PHP",
      ", ",
      "Python",
      ", ",
      "Rust",
      ", ",
      "Swift",
      ", ",
      "Verilog",
      " and ",
      "SystemVerilog",
      " (hardware description languages).",
      "[4]",
      "  These languages have drawn many of their ",
      "control structures",
      " and other basic features from C. Most of them (Python being a dramatic exception) also express highly similar ",
      "syntax",
      " to C, and they tend to combine the recognizable expression and statement ",
      "syntax of C",
      " with underlying type systems, data models, and semantics that can be radically different.\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Early developments",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "Timeline of language development\n",
      "\n",
      "\n",
      "Year\n",
      "\n",
      "C Standard",
      "[9]",
      "\n",
      "\n",
      "\n",
      "1972\n",
      "\n",
      "Birth\n",
      "\n",
      "\n",
      "1978\n",
      "\n",
      "K&R C\n",
      "\n",
      "\n",
      "1989/1990\n",
      "\n",
      "ANSI C and ISO C\n",
      "\n",
      "\n",
      "1999\n",
      "\n",
      "C99\n",
      "\n",
      "\n",
      "2011\n",
      "\n",
      "C11\n",
      "\n",
      "\n",
      "2017/2018\n",
      "\n",
      "C18\n",
      "\n",
      "The origin of C is closely tied to the development of the ",
      "Unix",
      " operating system, originally implemented in ",
      "assembly language",
      " on a ",
      "PDP-7",
      " by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues.  Eventually, they decided to port the operating system to a ",
      "PDP-11",
      ". The original PDP-11 version of Unix was also developed in assembly language.",
      "[5]",
      "\n",
      "Thompson desired a programming language to make utilities for the new platform. At first, he tried to make a ",
      "Fortran",
      " compiler, but soon gave up the idea. Instead, he created a cut-down version of the recently developed ",
      "BCPL",
      " ",
      "systems programming language",
      ". The official description of BCPL was not available at the time,",
      "[10]",
      " and Thompson modified the syntax to be less wordy, producing the similar but somewhat simpler ",
      "B",
      ".",
      "[5]",
      " However, few utilities were ultimately written in B because it was too slow, and B could not take advantage of PDP-11 features such as ",
      "byte",
      " addressability.\n",
      "In 1972, Ritchie started to improve B, which resulted in creating a new language C.",
      "[11]",
      " The C compiler and some utilities made with it were included in ",
      "Version 2 Unix",
      ".",
      "[12]",
      "\n",
      "At ",
      "Version 4 Unix",
      ", released in November 1973, the ",
      "Unix",
      " ",
      "kernel",
      " was extensively re-implemented in C.",
      "[5]",
      " By this time, the C language had acquired some powerful features such as ",
      "struct",
      " types.\n",
      "Preprocessor",
      " was introduced around 1973 at the urging of ",
      "Alan Snyder",
      " and also in recognition of the usefulness of the file-inclusion mechanisms available in BCPL and PL/I. Its original version provided only included files and simple string replacements: ",
      "#include",
      " and ",
      "#define",
      " of parameterless macros. Soon after that, it was extended, mostly by ",
      "Mike Lesk",
      " and then by John Reiser, to incorporate macros with arguments and conditional compilation.",
      "[13]",
      "\n",
      "Unix was one of the first operating system kernels implemented in a language other than ",
      "assembly",
      ". Earlier instances include the ",
      "Multics",
      " system (which was written in ",
      "PL/I",
      ") and ",
      "Master Control Program",
      " (MCP) for the ",
      "Burroughs B5000",
      " (which was written in ",
      "ALGOL",
      ") in 1961. In around  1977, Ritchie and ",
      "Stephen C. Johnson",
      " made further changes to the language to facilitate portability of the Unix operating system.  Johnson's ",
      "Portable C Compiler",
      " served as the basis for several implementations of C on new platforms.",
      "[11]",
      "\n",
      "\n",
      "K&R C",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "The cover of the book ",
      "The C Programming Language",
      ", first edition, by ",
      "Brian Kernighan",
      " and ",
      "Dennis Ritchie",
      "\n",
      "In 1978, ",
      "Brian Kernighan",
      " and ",
      "Dennis Ritchie",
      " published the first edition of ",
      "The C Programming Language",
      ".",
      "[1]",
      " This book, known to C programmers as ",
      "K&R",
      ", served for many years as an informal ",
      "specification",
      " of the language. The version of C that it describes is commonly referred to as \"",
      "K&R C",
      "\". The second edition of the book",
      "[14]",
      " covers the later ",
      "ANSI C",
      " standard, described below.\n",
      "K&R",
      " introduced several language features:\n",
      "\n",
      "Standard I/O library",
      "\n",
      "long int",
      " data type",
      "\n",
      "unsigned int",
      " data type",
      "\n",
      "Compound assignment operators of the form ",
      "=",
      "op",
      " (such as ",
      "=-",
      ") were changed to the form ",
      "op",
      "=",
      " (that is, ",
      "-=",
      ") to remove the semantic ambiguity created by constructs such as ",
      "i=-10",
      ", which had been interpreted as ",
      "i\u00a0=-\u00a010",
      " (decrement ",
      "i",
      " by 10) instead of the possibly intended ",
      "i\u00a0=\u00a0-10",
      " (let ",
      "i",
      " be -10).",
      "\n",
      "Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the \"",
      "lowest common denominator",
      "\" to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well.\n",
      "In early versions of C, only functions that return types other than ",
      "int",
      " must be declared if used before the function definition; functions used without prior declaration were presumed to return type ",
      "int",
      ".\n",
      "For example:\n",
      "\n",
      "long",
      " ",
      "some_function",
      "();",
      "\n",
      "/* int */",
      " ",
      "other_function",
      "();",
      "\n\n",
      "/* int */",
      " ",
      "calling_function",
      "()",
      "\n",
      "{",
      "\n    ",
      "long",
      " ",
      "test1",
      ";",
      "\n    ",
      "register",
      " ",
      "/* int */",
      " ",
      "test2",
      ";",
      "\n\n    ",
      "test1",
      " ",
      "=",
      " ",
      "some_function",
      "();",
      "\n    ",
      "if",
      " ",
      "(",
      "test1",
      " ",
      ">",
      " ",
      "0",
      ")",
      "\n          ",
      "test2",
      " ",
      "=",
      " ",
      "0",
      ";",
      "\n    ",
      "else",
      "\n          ",
      "test2",
      " ",
      "=",
      " ",
      "other_function",
      "();",
      "\n    ",
      "return",
      " ",
      "test2",
      ";",
      "\n",
      "}",
      "\n",
      "\n",
      "The ",
      "int",
      " type specifiers which are commented out could be omitted in K&R C, but are required in later standards.\n",
      "Since K&R function declarations did not include any information about function arguments, function parameter ",
      "type checks",
      " were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if multiple calls to an external function used different numbers or types of arguments.  Separate tools such as Unix's ",
      "lint",
      " utility were developed that (among other things) could check for consistency of function use across multiple source files.\n",
      "In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular ",
      "PCC",
      "[15]",
      ") and some other vendors. These included:\n",
      "\n",
      "void",
      " functions (i.e., functions with no return value)",
      "\n",
      "functions returning ",
      "struct",
      " or ",
      "union",
      " types (rather than pointers)",
      "\n",
      "assignment",
      " for ",
      "struct",
      " data types",
      "\n",
      "enumerated types",
      "\n",
      "The large number of extensions and lack of agreement on a ",
      "standard library",
      ", together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization.\n",
      "\n",
      "ANSI C and ISO C",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "ANSI C",
      "\n",
      "During the late 1970s and 1980s, versions of C were implemented for a wide variety of ",
      "mainframe computers",
      ", ",
      "minicomputers",
      ", and ",
      "microcomputers",
      ", including the ",
      "IBM PC",
      ", as its popularity began to increase significantly.\n",
      "In 1983, the ",
      "American National Standards Institute",
      " (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the ",
      "IEEE",
      " ",
      "working group",
      " 1003 to become the basis for the 1988 ",
      "POSIX",
      " standard. In 1989, the C standard was ratified as ANSI X3.159-1989 \"Programming Language C\".  This version of the language is often referred to as ",
      "ANSI C",
      ", Standard C, or sometimes C89.\n",
      "In 1990, the ANSI C standard (with formatting changes) was adopted by the ",
      "International Organization for Standardization",
      " (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language.\n",
      "ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ",
      "ISO/IEC JTC1/SC22",
      "/WG14.  National adoption of an update to the international standard typically occurs within a year of ISO publication.\n",
      "One of the aims of the C standardization process was to produce a ",
      "superset",
      " of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as ",
      "function prototypes",
      " (borrowed from C++), ",
      "void",
      " pointers, support for international ",
      "character sets",
      " and ",
      "locales",
      ", and preprocessor enhancements. Although the ",
      "syntax",
      " for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code.\n",
      "C89 is supported by current C compilers, and most modern C code is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any ",
      "platform",
      " with a conforming C implementation, within its resource limits.  Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as ",
      "GUI",
      " libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte ",
      "endianness",
      ".\n",
      "In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the ",
      "__STDC__",
      " macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C.\n",
      "After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.",
      "[16]",
      "\n",
      "\n",
      "C99",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C99",
      "\n",
      "The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as \"",
      "C99",
      "\". It has since been amended three times by Technical Corrigenda.",
      "[17]",
      "\n",
      "C99 introduced several new features, including ",
      "inline functions",
      ", several new ",
      "data types",
      " (including ",
      "long long int",
      " and a ",
      "complex",
      " type to represent ",
      "complex numbers",
      "), ",
      "variable-length arrays",
      " and ",
      "flexible array members",
      ", improved support for ",
      "IEEE 754",
      " floating point, support for ",
      "variadic macros",
      " (macros of variable ",
      "arity",
      "), and support for one-line comments beginning with ",
      "//",
      ", as in ",
      "BCPL",
      " or C++. Many of these had already been implemented as extensions in several C compilers.\n",
      "C99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has ",
      "int",
      " implicitly assumed. A standard macro ",
      "__STDC_VERSION__",
      " is defined with value ",
      "199901L",
      " to indicate that C99 support is available. ",
      "GCC",
      ", ",
      "Solaris Studio",
      ", and other C compilers now support many or all of the new features of C99. The C compiler in ",
      "Microsoft Visual C++",
      ", however, implements the C89 standard and those parts of C99 that are required for compatibility with ",
      "C++11",
      ".",
      "[18]",
      "\n",
      "In addition, support for ",
      "Unicode",
      " identifiers (variable / function names) in the form of escaped characters (e.g. ",
      "\\U0001f431",
      ") is now required. Support for raw Unicode names like ",
      "\ud83d\udc31",
      " is optional.\n",
      "\n",
      "C11",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C11 (C standard revision)",
      "\n",
      "In 2007, work began on another revision of the C standard, informally called \"C1X\" until its official publication on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations.\n",
      "The C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions.  It also makes some portions of the existing C99 library optional, and improves compatibility with C++. The standard macro ",
      "__STDC_VERSION__",
      " is defined as ",
      "201112L",
      " to indicate that C11 support is available.\n",
      "\n",
      "C18",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C18 (C standard revision)",
      "\n",
      "Published in June 2018, C18 is the current standard for the C programming language. It introduces no new language features, only technical corrections, and clarifications to defects in C11. The standard macro ",
      "__STDC_VERSION__",
      " is defined as ",
      "201710L",
      ".\n",
      "\n",
      "C2x",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C2x",
      "\n",
      "C2x is an informal name for the next (after C18) major C language standard revision. It is not expected to be voted on until 2021.\n",
      "\n",
      "Embedded C",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Embedded C",
      "\n",
      "Historically, embedded C programming requires nonstandard extensions to the C language in order to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations.\n",
      "In 2008, the C Standards Committee published a ",
      "technical report",
      " extending the C language",
      "[19]",
      " to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as ",
      "fixed-point arithmetic",
      ", named address spaces, and basic I/O hardware addressing.\n",
      "\n",
      "Syntax",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C syntax",
      "\n",
      "C has a ",
      "formal grammar",
      " specified by the C standard.",
      "[20]",
      " Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters ",
      "/*",
      " and ",
      "*/",
      ", or (since C99)  following ",
      "//",
      " until the end of the line. Comments delimited by ",
      "/*",
      " and ",
      "*/",
      " do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside ",
      "string",
      " or character literals.",
      "[21]",
      "\n",
      "C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and ",
      "statements",
      ". Declarations either define new types using keywords such as ",
      "struct",
      ", ",
      "union",
      ", and ",
      "enum",
      ", or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as ",
      "char",
      " and ",
      "int",
      " specify built-in types. Sections of code are enclosed in braces (",
      "{",
      " and ",
      "}",
      ", sometimes called \"curly brackets\") to limit the scope of declarations and to act as a single statement for control structures.\n",
      "As an imperative language, C uses ",
      "statements",
      " to specify actions. The most common statement is an ",
      "expression statement",
      ", consisting of an expression to be evaluated, followed by a semicolon; as a ",
      "side effect",
      " of the evaluation, functions may be ",
      "called",
      " and variables may be ",
      "assigned",
      " new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. ",
      "Structured programming",
      " is supported by ",
      "if",
      "(-",
      "else",
      ") conditional execution and by ",
      "do",
      "-",
      "while",
      ", ",
      "while",
      ", and ",
      "for",
      " iterative execution (looping). The ",
      "for",
      " statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. ",
      "break",
      " and ",
      "continue",
      " can be used to leave the innermost enclosing loop statement or skip to its reinitialization. There is also a non-structured ",
      "goto",
      " statement which branches directly to the designated ",
      "label",
      " within the function. ",
      "switch",
      " selects a ",
      "case",
      " to be executed based on the value of an integer expression.\n",
      "Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next \"",
      "sequence point",
      "\"; sequence points include the end of each expression statement, and the entry to and return from each function call.  Sequence points also occur during evaluation of expressions containing certain operators (",
      "&&",
      ", ",
      "||",
      ", ",
      "?:",
      " and the ",
      "comma operator",
      "). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages.\n",
      "Kernighan and Ritchie say in the Introduction of ",
      "The C Programming Language",
      ": \"C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better.\"",
      "[22]",
      " The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software.\n",
      "\n",
      "Character set",
      "[",
      "edit",
      "]",
      "\n",
      "The basic C source character set includes the following characters:\n",
      "\n",
      "Lowercase and uppercase letters of ISO Basic Latin Alphabet: ",
      "a",
      "\u2013",
      "z",
      " ",
      "A",
      "\u2013",
      "Z",
      "\n",
      "Decimal digits: ",
      "0",
      "\u2013",
      "9",
      "\n",
      "Graphic characters: ",
      "! \" #\u00a0% & ' ( ) * + , - . /\u00a0:\u00a0; < = >\u00a0? [ \\ ] ^ _ { | } ~",
      "\n",
      "Whitespace characters",
      ": ",
      "space",
      ", ",
      "horizontal tab",
      ", ",
      "vertical tab",
      ", ",
      "form feed",
      ", ",
      "newline",
      "\n",
      "Newline indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as one.\n",
      "Additional multi-byte encoded characters may be used in string literals, but they are not entirely ",
      "portable",
      ".  The latest C standard (",
      "C11",
      ") allows multi-national ",
      "Unicode",
      " characters to be embedded portably within C source text by using ",
      "\\uXXXX",
      " or ",
      "\\UXXXXXXXX",
      " encoding (where the ",
      "X",
      " denotes a hexadecimal character), although this feature is not yet widely implemented.\n",
      "The basic C execution character set contains the same characters, along with representations for ",
      "alert",
      ", ",
      "backspace",
      ", and ",
      "carriage return",
      ". ",
      "Run-time",
      " support for extended character sets has increased with each revision of the C standard.\n",
      "\n",
      "Reserved words",
      "[",
      "edit",
      "]",
      "\n",
      "C89 has 32 reserved words, also known as keywords, which are the words that cannot be used for any purposes other than those for which they are predefined:\n",
      "\n",
      "\n",
      "auto",
      "\n",
      "break",
      "\n",
      "case",
      "\n",
      "char",
      "\n",
      "const",
      "\n",
      "continue",
      "\n",
      "default",
      "\n",
      "do",
      "\n",
      "double",
      "\n",
      "else",
      "\n",
      "enum",
      "\n",
      "extern",
      "\n",
      "float",
      "\n",
      "for",
      "\n",
      "goto",
      "\n",
      "if",
      "\n",
      "int",
      "\n",
      "long",
      "\n",
      "register",
      "\n",
      "return",
      "\n",
      "short",
      "\n",
      "signed",
      "\n",
      "sizeof",
      "\n",
      "static",
      "\n",
      "struct",
      "\n",
      "switch",
      "\n",
      "typedef",
      "\n",
      "union",
      "\n",
      "unsigned",
      "\n",
      "void",
      "\n",
      "volatile",
      "\n",
      "while",
      "\n",
      "\n",
      "C99 reserved five more words:\n",
      "\n",
      "\n",
      "_Bool",
      "\n",
      "_Complex",
      "\n",
      "_Imaginary",
      "\n",
      "inline",
      "\n",
      "restrict",
      "\n",
      "\n",
      "C11 reserved seven more words:",
      "[23]",
      "\n",
      "\n",
      "\n",
      "_Alignas",
      "\n",
      "_Alignof",
      "\n",
      "_Atomic",
      "\n",
      "_Generic",
      "\n",
      "_Noreturn",
      "\n",
      "_Static_assert",
      "\n",
      "_Thread_local",
      "\n",
      "\n",
      "Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations.  Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language.  Some standard headers do define more convenient synonyms for underscored identifiers. The language previously included a reserved word called ",
      "entry",
      ", but this was seldom implemented, and has now been removed as a reserved word.",
      "[24]",
      "\n",
      "\n",
      "Operators",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Operators in C and C++",
      "\n",
      "C supports a rich set of ",
      "operators",
      ", which are symbols used within an ",
      "expression",
      " to specify the manipulations to be performed while evaluating that expression. C has operators for:\n",
      "\n",
      "arithmetic",
      ": ",
      "+",
      ", ",
      "-",
      ", ",
      "*",
      ", ",
      "/",
      ", ",
      "%",
      "\n",
      "assignment",
      ": ",
      "=",
      "\n",
      "augmented assignment",
      ": ",
      "+=",
      ", ",
      "-=",
      ", ",
      "*=",
      ", ",
      "/=",
      ", ",
      "%=",
      ", ",
      "&=",
      ", ",
      "|=",
      ", ",
      "^=",
      ", ",
      "<<=",
      ", ",
      ">>=",
      "\n",
      "bitwise logic",
      ": ",
      "~",
      ", ",
      "&",
      ", ",
      "|",
      ", ",
      "^",
      "\n",
      "bitwise shifts",
      ": ",
      "<<",
      ", ",
      ">>",
      "\n",
      "boolean logic",
      ": ",
      "!",
      ", ",
      "&&",
      ", ",
      "||",
      "\n",
      "conditional evaluation",
      ": ",
      "?\u00a0:",
      "\n",
      "equality testing: ",
      "==",
      ", ",
      "!=",
      "\n",
      "calling functions",
      ": ",
      "( )",
      "\n",
      "increment and decrement",
      ": ",
      "++",
      ", ",
      "--",
      "\n",
      "member selection",
      ": ",
      ".",
      ", ",
      "->",
      "\n",
      "object size: ",
      "sizeof",
      "\n",
      "order relations",
      ": ",
      "<",
      ", ",
      "<=",
      ", ",
      ">",
      ", ",
      ">=",
      "\n",
      "reference and dereference",
      ": ",
      "&",
      ", ",
      "*",
      ", ",
      "[ ]",
      "\n",
      "sequencing: ",
      ",",
      "\n",
      "subexpression grouping",
      ": ",
      "( )",
      "\n",
      "type conversion",
      ": ",
      "(",
      "typename",
      ")",
      "\n",
      "C uses the operator ",
      "=",
      " (used in mathematics to express equality) to indicate assignment, following the precedent of ",
      "Fortran",
      " and ",
      "PL/I",
      ", but unlike ",
      "ALGOL",
      " and its derivatives. C uses the operator ",
      "==",
      " to test for equality.  The similarity between these two operators (assignment and equality) may result in the accidental use of one in place of the other, and in many cases, the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression  ",
      "if (a == b + 1)",
      " might mistakenly be written as ",
      "if (a = b + 1)",
      ", which will be evaluated as true if ",
      "a",
      " is not zero after the assignment.",
      "[25]",
      "\n",
      "The C ",
      "operator precedence",
      " is not always intuitive.  For example, the operator ",
      "==",
      " binds more tightly than (is executed prior to) the operators ",
      "&",
      " (bitwise AND) and ",
      "|",
      " (bitwise OR) in expressions such as ",
      "x & 1 == 0",
      ", which must be written as ",
      "(x & 1) == 0",
      " if that is the coder's intent.",
      "[26]",
      "\n",
      "\n",
      "\"Hello, world\" example",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "\"Hello, World!\" program by ",
      "Brian Kernighan",
      " (1978)",
      "\n",
      "See also: ",
      "Hello, world",
      "\n",
      "The \"",
      "hello, world",
      "\" example, which appeared in the first edition of ",
      "K&R",
      ", has become the model for an introductory program in most programming textbooks. The program prints \"hello, world\" to the ",
      "standard output",
      ", which is usually a terminal or screen display.\n",
      "The original version was:",
      "[27]",
      "\n",
      "\n",
      "main",
      "()",
      "\n",
      "{",
      "\n    ",
      "printf",
      "(",
      "\"hello, world",
      "\\n",
      "\"",
      ");",
      "\n",
      "}",
      "\n",
      "\n",
      "A standard-conforming \"hello, world\" program is:",
      "[a]",
      "\n",
      "\n",
      "# include <stdio.h>",
      "\n\n",
      "int",
      " ",
      "main",
      "(",
      "void",
      ")",
      "\n",
      "{",
      "\n    ",
      "printf",
      "(",
      "\"hello, world",
      "\\n",
      "\"",
      ");",
      "\n",
      "}",
      "\n",
      "\n",
      "The first line of the program contains a ",
      "preprocessing directive",
      ", indicated by ",
      "#include",
      ".  This causes the compiler to replace that line with the entire text of the ",
      "stdio.h",
      " standard header, which contains declarations for standard input and output functions such as ",
      "printf",
      " and ",
      "scanf",
      ". The angle brackets surrounding ",
      "stdio.h",
      " indicate that ",
      "stdio.h",
      " is located using a search strategy that prefers headers provided with the compiler to other headers having the same name, as opposed to double quotes which typically include local or project-specific header files.\n",
      "The next line indicates that a function named ",
      "main",
      " is being defined. The ",
      "main",
      " function serves a special purpose in C programs; the run-time environment calls the ",
      "main",
      " function to begin program execution. The type specifier ",
      "int",
      " indicates that the value that is returned to the invoker (in this case the run-time environment) as a result of evaluating the ",
      "main",
      " function, is an integer. The keyword ",
      "void",
      " as a parameter list indicates that this function takes no arguments.",
      "[b]",
      "\n",
      "The opening curly brace indicates the beginning of the definition of the ",
      "main",
      " function.\n",
      "The next line ",
      "calls",
      " (diverts execution to) a function named ",
      "printf",
      ", which in this case is supplied from a system ",
      "library",
      ".  In this call, the ",
      "printf",
      " function is ",
      "passed",
      " (provided with) a single argument, the address of the first character in the ",
      "string literal",
      " ",
      "\"hello, world\\n\"",
      ". The string literal is an unnamed ",
      "array",
      " with elements of type ",
      "char",
      ", set up automatically by the compiler with a final 0-valued character to mark the end of the array (",
      "printf",
      " needs to know this). The ",
      "\\n",
      " is an ",
      "escape sequence",
      " that C translates to a ",
      "newline",
      " character, which on output signifies the end of the current line.  The return value of the ",
      "printf",
      " function is of type ",
      "int",
      ", but it is silently discarded since it is not used. (A more careful program might test the return value to determine whether or not the ",
      "printf",
      " function succeeded.) The semicolon ",
      ";",
      " terminates the statement.\n",
      "The closing curly brace indicates the end of the code for the ",
      "main",
      " function. According to the C99 specification and newer, the ",
      "main",
      " function, unlike any other function, will implicitly return a value of ",
      "0",
      " upon reaching the ",
      "}",
      " that terminates the function. (Formerly an explicit ",
      "return 0;",
      " statement was required.) This is interpreted by the run-time system as an exit code indicating successful execution.",
      "[28]",
      "\n",
      "\n",
      "Data types",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "C variable types and declarations",
      "\n",
      "This section ",
      "needs additional citations for ",
      "verification",
      ".",
      " Please help ",
      "improve this article",
      " by ",
      "adding citations to reliable sources",
      ". Unsourced material may be challenged and removed.",
      "  ",
      "(",
      "October 2012",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "The ",
      "type system",
      " in C is ",
      "static",
      " and ",
      "weakly typed",
      ", which makes it similar to the type system of ",
      "ALGOL",
      " descendants such as ",
      "Pascal",
      ".",
      "[29]",
      "  There are built-in types for integers of various sizes, both signed and unsigned, ",
      "floating-point numbers",
      ", and enumerated types (",
      "enum",
      ").  Integer type ",
      "char",
      " is often used for single-byte characters.  C99 added a ",
      "boolean datatype",
      ".  There are also derived types including ",
      "arrays",
      ", ",
      "pointers",
      ", ",
      "records",
      " (",
      "struct",
      "), and ",
      "unions",
      " (",
      "union",
      ").\n",
      "C is often used in low-level systems programming where escapes from the type system may be necessary.  The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a ",
      "type cast",
      " to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way.\n",
      "Some find C's declaration syntax unintuitive, particularly for ",
      "function pointers",
      ". (Ritchie's idea was to declare identifiers in contexts resembling their use: \"",
      "declaration reflects use",
      "\".)",
      "[30]",
      "\n",
      "C's ",
      "usual arithmetic conversions",
      " allow for efficient code to be generated, but can sometimes produce unexpected results.  For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned.  This can generate unexpected results if the signed value is negative.\n",
      "\n",
      "Pointers",
      "[",
      "edit",
      "]",
      "\n",
      "C supports the use of ",
      "pointers",
      ", a type of ",
      "reference",
      " that records the address or location of an object or function in memory.  Pointers can be ",
      "dereferenced",
      " to access data stored at the address pointed to, or to invoke a pointed-to function.  Pointers can be manipulated using assignment or ",
      "pointer arithmetic",
      ".  The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time.  Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C.  ",
      "Text strings",
      " are commonly manipulated using pointers into arrays of characters.  ",
      "Dynamic memory allocation",
      " is performed using pointers.  Many data types, such as ",
      "trees",
      ", are commonly implemented as dynamically allocated ",
      "struct",
      " objects linked together using pointers.  Pointers to functions are useful for passing functions as arguments to ",
      "higher-order functions",
      " (such as ",
      "qsort",
      " or ",
      "bsearch",
      ") or as ",
      "callbacks",
      " to be invoked by event handlers.",
      "[28]",
      "\n",
      "A ",
      "null pointer",
      " value",
      " explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a ",
      "segmentation fault",
      ".  Null pointer values are useful for indicating special cases such as no \"next\" pointer in the final node of a ",
      "linked list",
      ", or as an error indication from functions returning pointers.  In appropriate contexts in source code, such as for assigning to a pointer variable, a ",
      "null pointer constant",
      " can be written as ",
      "0",
      ", with or without explicit casting to a pointer type, or as the ",
      "NULL",
      " macro defined by several standard headers.  In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true.\n",
      "Void pointers (",
      "void *",
      ") point to objects of unspecified type, and can therefore be used as \"generic\" data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.",
      "[28]",
      "\n",
      "Careless use of pointers is potentially dangerous.  Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects.  Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid ",
      "pointer arithmetic",
      "; the objects they point to may continue to be used after deallocation (",
      "dangling pointers",
      "); they may be used without having been initialized (",
      "wild pointers",
      "); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer.  In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive ",
      "reference",
      " types.\n",
      "\n",
      "Arrays",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "C string",
      "\n",
      "Array",
      " types in C are traditionally of a fixed, static size specified at compile time.  (The more recent C99 standard also allows a form of variable-length arrays.)  However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's ",
      "malloc",
      " function, and treat it as an array.  C's unification of arrays and pointers means that declared arrays and these dynamically allocated simulated arrays are virtually interchangeable.\n",
      "Since arrays are always accessed (in effect) via pointers, array accesses are typically ",
      "not",
      " checked against the underlying array size, although some compilers may provide ",
      "bounds checking",
      " as an option.",
      "[31]",
      "[32]",
      "  Array bounds violations are therefore possible and rather common in carelessly written code, and can lead to various repercussions, including illegal memory accesses, corruption of data, ",
      "buffer overruns",
      ", and run-time exceptions.  If bounds checking is desired, it must be done manually.\n",
      "C does not have a special provision for declaring ",
      "multi-dimensional arrays",
      ", but rather relies on ",
      "recursion",
      " within the type system to declare arrays of arrays, which effectively accomplishes the same thing.  The index values of the resulting \"multi-dimensional array\" can be thought of as increasing in ",
      "row-major order",
      ".\n",
      "Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied ",
      "linear algebra",
      ") to store matrices. The structure of the C array is well suited to this particular task. However, since arrays are passed merely as pointers, the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this is to allocate the array with an additional \"row vector\" of pointers to the columns.)\n",
      "C99 introduced \"variable-length arrays\" which address some, but not all, of the issues with ordinary C arrays.\n",
      "\n",
      "Array\u2013pointer interchangeability",
      "[",
      "edit",
      "]",
      "\n",
      "The subscript notation ",
      "x[i]",
      " (where ",
      "x",
      " designates a pointer) is ",
      "syntactic sugar",
      " for ",
      "*(x+i)",
      ".",
      "[33]",
      " Taking advantage of the compiler's knowledge of the pointer type, the address that ",
      "x + i",
      " points to is not the base address (pointed to by ",
      "x",
      ") incremented by ",
      "i",
      " bytes, but rather is defined to be the base address incremented by ",
      "i",
      " multiplied by the size of an element that ",
      "x",
      " points to.  Thus, ",
      "x[i]",
      " designates the ",
      "i+1",
      "th element of the array.\n",
      "Furthermore, in most expression contexts (a notable exception is as operand of ",
      "sizeof",
      "), the name of an array is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use ",
      "pass-by-value",
      " semantics, arrays are in effect passed by ",
      "reference",
      ".\n",
      "The size of an element can be determined by applying the operator ",
      "sizeof",
      " to any dereferenced element of ",
      "x",
      ", as in ",
      "n = sizeof *x",
      " or ",
      "n = sizeof x[0]",
      ", and the number of elements in a declared array ",
      "A",
      " can be determined as ",
      "sizeof A / sizeof A[0]",
      ". The latter only applies to array names: variables declared with subscripts (",
      "int A[20]",
      "). Due to the semantics of C, it is not possible to determine the entire size of arrays through pointers to arrays or those created by dynamic allocation (",
      "malloc",
      "); code such as ",
      "sizeof arr / sizeof arr[0]",
      " (where ",
      "arr",
      " designates a pointer) will not work since the compiler assumes the size of the pointer itself is being requested.",
      "[34]",
      "[35]",
      " Since array name arguments to ",
      "sizeof",
      " are not converted to pointers, they do not exhibit such ambiguity. However, arrays created by dynamic allocation are accessed by pointers rather than true array variables, so they suffer from the same ",
      "sizeof",
      " issues as array pointers.\n",
      "Thus, despite this apparent equivalence between array and pointer variables, there is still a distinction to be made between them. Even though the name of an array is, in most expression contexts, converted into a pointer (to its first element), this pointer does not itself occupy any storage; the array name is not an ",
      "l-value",
      ", and its address is a constant, unlike a pointer variable. Consequently, what an array \"points to\" cannot be changed, and it is impossible to assign a new address to an array name. Array contents may be copied, however, by using the ",
      "memcpy",
      " function, or by accessing the individual elements.\n",
      "\n",
      "Memory management",
      "[",
      "edit",
      "]",
      "\n",
      "One of the most important functions of a programming language is to provide facilities for managing ",
      "memory",
      " and the objects that are stored in memory. C provides three distinct ways to allocate memory for objects:",
      "[28]",
      "\n",
      "\n",
      "Static memory allocation",
      ": space for the object is provided in the binary at compile-time; these objects have an ",
      "extent",
      " (or lifetime) as long as the binary which contains them is loaded into memory.",
      "\n",
      "Automatic memory allocation",
      ": temporary objects can be stored on the ",
      "stack",
      ", and this space is automatically freed and reusable after the block in which they are declared is exited.",
      "\n",
      "Dynamic memory allocation",
      ": blocks of memory of arbitrary size can be requested at run-time using library functions such as ",
      "malloc",
      " from a region of memory called the ",
      "heap",
      "; these blocks persist until subsequently freed for reuse by calling the library function ",
      "realloc",
      " or ",
      "free",
      "\n",
      "These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three.\n",
      "Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary.",
      "[28]",
      "  Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on ",
      "malloc",
      " for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated.  (Static allocation that is too large is usually detected by the ",
      "linker",
      " or ",
      "loader",
      ", before the program can even begin execution.)\n",
      "Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever ",
      "bit pattern",
      " happens to be present in the ",
      "storage",
      ", which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both ",
      "false positives and false negatives",
      " can occur.\n",
      "Another issue is that heap memory allocation has to be synchronized with its actual usage in any program in order for it to be reused as much as possible.  For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before ",
      "free()",
      " is called, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a ",
      "memory leak",
      ".",
      " Conversely, it is possible for memory to be freed but continue to be referenced, leading to unpredictable results. Typically, the symptoms will appear in a portion of the program far removed from the actual error, making it difficult to track down the problem. (Such issues are ameliorated in languages with ",
      "automatic garbage collection",
      ".)\n",
      "\n",
      "Libraries",
      "[",
      "edit",
      "]",
      "\n",
      "The C programming language uses ",
      "libraries",
      " as its primary method of extension. In C, a library is a set of functions contained within a single \"archive\" file.  Each library typically has a ",
      "header file",
      ", which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. In order for a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires ",
      "compiler flags",
      " (e.g., ",
      "-lm",
      ", shorthand for \"link the math library\").",
      "[28]",
      "\n",
      "The most common C library is the ",
      "C standard library",
      ", which is specified by the ",
      "ISO",
      " and ",
      "ANSI C",
      " standards and comes with every C implementation (implementations which target limited environments such as ",
      "embedded systems",
      " may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values.  Several separate standard headers (for example, ",
      "stdio.h",
      ") specify the interfaces for these and other standard library facilities.\n",
      "Another common set of C library functions are those used by applications specifically targeted for ",
      "Unix",
      " and ",
      "Unix-like",
      " systems, especially functions which provide an interface to the ",
      "kernel",
      ". These functions are detailed in various standards such as ",
      "POSIX",
      " and the ",
      "Single UNIX Specification",
      ".\n",
      "Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient ",
      "object code",
      "; programmers then create interfaces to the library so that the routines can be used from higher-level languages like ",
      "Java",
      ", ",
      "Perl",
      ", and ",
      "Python",
      ".",
      "[28]",
      "\n",
      "\n",
      "File handling and streams",
      "[",
      "edit",
      "]",
      "\n",
      "File input and output (I/O) is not part of the C language itself but instead is handled by libraries (such as the C standard library) and their associated header files (e.g. ",
      "stdio.h",
      "). File handling is generally implemented through high-level I/O which works through ",
      "streams",
      ". A stream is from this perspective a data flow that is independent of devices, while a file is a concrete device. The high level I/O is done through the association of a stream to a file. In the C standard library, a ",
      "buffer",
      " (a memory area or queue) is temporarily used to store data before it's sent to the final destination. This reduces the time spent waiting for slower devices, for example a ",
      "hard drive",
      " or ",
      "solid state drive",
      ". Low-level I/O functions are not part of the standard C library but are generally part of \"bare metal\" programming (programming that's independent of any ",
      "operating system",
      " such as most but not all ",
      "embedded programming",
      "). With few exceptions, implementations include low-level I/O.\n",
      "\n",
      "Language tools",
      "[",
      "edit",
      "]",
      "\n",
      "This section ",
      "needs additional citations for ",
      "verification",
      ".",
      " Please help ",
      "improve this article",
      " by ",
      "adding citations to reliable sources",
      ". Unsourced material may be challenged and removed.",
      "  ",
      "(",
      "July 2014",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler.  The tool ",
      "lint",
      " was the first such, leading to many others.\n",
      "Automated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as ",
      "Lint",
      ". A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. ",
      "MISRA C",
      " is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.",
      "[36]",
      "\n",
      "There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as ",
      "bounds checking",
      " for arrays, detection of ",
      "buffer overflow",
      ", ",
      "serialization",
      ", ",
      "dynamic memory",
      " tracking, and ",
      "automatic garbage collection",
      ".\n",
      "Tools such as ",
      "Purify",
      " or ",
      "Valgrind",
      " and linking with libraries containing special versions of the ",
      "memory allocation functions",
      " can help uncover runtime errors in memory usage.\n",
      "\n",
      "Uses",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "The ",
      "TIOBE index",
      " graph, showing a comparison of the popularity of various programming languages",
      "[37]",
      "\n",
      "C is widely used for ",
      "systems programming",
      " in implementing ",
      "operating systems",
      " and ",
      "embedded system",
      " applications,",
      "[38]",
      " because C code, when written for portability, can be used for most purposes, yet when needed, system-specific code can be used to access specific hardware addresses and to perform ",
      "type punning",
      " to match externally imposed interface requirements, with a low ",
      "run-time",
      " demand on system resources.\n",
      "C can be used for website programming using the ",
      "Common Gateway Interface",
      " (CGI) as a \"gateway\" for information between the Web application, the server, and the browser.",
      "[39]",
      " C is often chosen over ",
      "interpreted languages",
      " because of its speed, stability, and near-universal availability.",
      "[40]",
      "\n",
      "A consequence of C's wide availability and efficiency is that ",
      "compilers",
      ", libraries and ",
      "interpreters",
      " of other programming languages are often implemented in C. For example, the ",
      "reference implementations",
      " of ",
      "Python",
      ", ",
      "Perl",
      ", and ",
      "PHP",
      " are written in C.\n",
      "Because the layer of abstraction is thin and the overhead is low,\n",
      "C enables programmers to create efficient implementations of algorithms and data structures, because the layer of abstraction from hardware is thin, and its overhead is low, an important criterion for computationally intensive programs. For example, the ",
      "GNU Multiple Precision Arithmetic Library",
      ", the ",
      "GNU Scientific Library",
      ", ",
      "Mathematica",
      ", and ",
      "MATLAB",
      " are completely or partially written in C.\n",
      "C is sometimes used as an ",
      "intermediate language",
      " by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary.  C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have prompted the development of other ",
      "C-based languages",
      " specifically designed for use as intermediate languages, such as ",
      "C--",
      ".\n",
      "C has also been widely used to implement ",
      "end-user",
      " applications. However, such applications can also be written in newer, higher-level languages.\n",
      "\n",
      "Related languages",
      "[",
      "edit",
      "]",
      "\n",
      "C has both directly and indirectly influenced many later languages such as ",
      "C#",
      ", ",
      "D",
      ", ",
      "Go",
      ", ",
      "Java",
      ", ",
      "JavaScript",
      ", ",
      "Limbo",
      ", ",
      "LPC",
      ", ",
      "Perl",
      ", ",
      "PHP",
      ", ",
      "Python",
      ", and Unix's ",
      "C shell",
      ".",
      "[41]",
      " The most pervasive influence has been syntactical, all of the languages mentioned combine the statement and (more or less recognizably) expression ",
      "syntax of C",
      " with type systems, data models and/or large-scale program structures that differ from those of C, sometimes radically.\n",
      "Several C or near-C interpreters exist, including ",
      "Ch",
      " and ",
      "CINT",
      ", which can also be used for scripting.\n",
      "When object-oriented languages became popular, ",
      "C++",
      " and ",
      "Objective-C",
      " were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as ",
      "source-to-source compilers",
      "; source code was translated into C, and then compiled with a C compiler.",
      "[42]",
      "\n",
      "The ",
      "C++",
      " programming language was devised by ",
      "Bjarne Stroustrup",
      " as an approach to providing ",
      "object-oriented",
      " functionality with a C-like syntax.",
      "[43]",
      " C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits ",
      "generic programming",
      " via templates. Nearly a superset of C, C++ now supports most of C, with ",
      "a few exceptions",
      ".\n",
      "Objective-C",
      " was originally a very \"thin\" layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and ",
      "Smalltalk",
      ": syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk.\n",
      "In addition to ",
      "C++",
      " and ",
      "Objective-C",
      ", ",
      "Ch",
      ", ",
      "Cilk",
      ", and ",
      "Unified Parallel C",
      " are nearly supersets of C.\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "Free and open-source software portal",
      "\n",
      "Compatibility of C and C++",
      "\n",
      "Comparison of Pascal and C",
      "\n",
      "Comparison of programming languages",
      "\n",
      "International Obfuscated C Code Contest",
      "\n",
      "List of C-based programming languages",
      "\n",
      "List of C compilers",
      "\n",
      "Notes",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced.",
      "\n",
      "\n",
      "^",
      " ",
      "The ",
      "main",
      " function actually has two arguments, ",
      "int argc",
      " and ",
      "char *argv[]",
      ", respectively, which can be used to handle ",
      "command line arguments",
      ".  The ISO C standard (section 5.1.2.2.1) requires both forms of ",
      "main",
      " to be supported, which is special treatment not afforded to any other function.",
      "\n",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Kernighan, Brian W.",
      "; ",
      "Ritchie, Dennis M.",
      " (February 1978). ",
      "The C Programming Language",
      " (1st ed.). ",
      "Englewood Cliffs, NJ",
      ": ",
      "Prentice Hall",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-13-110163-0",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "Ritchie (1993)",
      ": \"Thompson had made a brief attempt to produce a system coded in an early version of C\u2014before structures\u2014in 1972, but gave up the effort.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Ritchie (1993)",
      ": \"The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of.\"",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"Verilog HDL (and C)\"",
      " ",
      "(PDF)",
      ". The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from ",
      "the original",
      " ",
      "(PDF)",
      " on November 6, 2013",
      ". Retrieved ",
      "August 19,",
      " 2013",
      ". ",
      "1980s:\u00a0; Verilog first introduced\u00a0; Verilog inspired by the C programming language",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Ritchie (1993)",
      "\n",
      "\n",
      "^",
      " ",
      "\"Programming Language Popularity\"",
      ". 2009. Archived from ",
      "the original",
      " on January 16, 2009",
      ". Retrieved ",
      "January 16,",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TIOBE Programming Community Index\"",
      ". 2009. Archived from ",
      "the original",
      " on May 4, 2009",
      ". Retrieved ",
      "May 6,",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TIOBE Index for September 2020\"",
      ". ",
      "Archived",
      " from the original on September 10, 2020",
      ". Retrieved ",
      "September 10,",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"History of C\"",
      ". ",
      "en.cppreference.com",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ritchie, Dennis. ",
      "\"BCPL to B to C\"",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Johnson, S. C.",
      "; ",
      "Ritchie, D. M.",
      " (1978). \"Portability of C Programs and the UNIX System\". ",
      "Bell System Tech. J",
      ". ",
      "57",
      " (6): 2021\u20132048. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.138.35",
      ". ",
      "doi",
      ":",
      "10.1002/j.1538-7305.1978.tb02141.x",
      ". ",
      "S2CID",
      "\u00a0",
      "17510065",
      ".",
      " (Note: The PDF is an OCR scan of the original, and contains a rendering of \"IBM 370\" as \"IBM 310\".)",
      "\n",
      "\n",
      "^",
      " ",
      "McIlroy, M. D.",
      " (1987). ",
      "A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971\u20131986",
      " ",
      "(PDF)",
      " (Technical report). CSTR. Bell Labs. p.\u00a010. 139.",
      "\n",
      "\n",
      "^",
      " ",
      "Ritchie (1993)",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan, Brian W.",
      "; ",
      "Ritchie, Dennis M.",
      " (March 1988). ",
      "The C Programming Language",
      " (2nd ed.). ",
      "Englewood Cliffs, NJ",
      ": ",
      "Prentice Hall",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-13-110362-7",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne",
      " (2002). ",
      "Sibling rivalry: C and C++",
      " ",
      "(PDF)",
      " (Report). AT&T Labs.",
      "\n",
      "\n",
      "^",
      " ",
      "C Integrity",
      ". International Organization for Standardization. March 30, 1995.",
      "\n",
      "\n",
      "^",
      " ",
      "\"JTC1/SC22/WG14\u00a0\u2013 C\"",
      ". ",
      "Home page",
      ". ISO/IEC",
      ". Retrieved ",
      "June 2,",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Andrew Binstock (October 12, 2011). ",
      "\"Interview with Herb Sutter\"",
      ". ",
      "Dr. Dobbs",
      ". Retrieved ",
      "September 7,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TR 18037: Embedded C\"",
      " ",
      "(PDF)",
      ". ISO / IEC",
      ". Retrieved ",
      "July 26,",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Harbison, Samuel P.; ",
      "Steele, Guy L.",
      " (2002). ",
      "C: A Reference Manual",
      " (5th ed.). ",
      "Englewood Cliffs, NJ",
      ": ",
      "Prentice Hall",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-13-089592-9",
      ".",
      " Contains a ",
      "BNF",
      " grammar for C.",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan & Ritchie (1996)",
      ", p.\u00a0192.",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan & Ritchie (1978)",
      ", p.\u00a03.",
      "\n",
      "\n",
      "^",
      " ",
      "\"ISO/IEC 9899:201x (ISO C11) Committee Draft\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan & Ritchie (1996)",
      ", pp.\u00a0192, 259.",
      "\n",
      "\n",
      "^",
      " ",
      "\"10 Common Programming Mistakes in C++\"",
      ". Cs.ucr.edu",
      ". Retrieved ",
      "June 26,",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Schultz, Thomas (2004). ",
      "C and the 8051",
      " (3rd ed.). Otsego, MI: PageFree Publishing Inc. p.\u00a020. ",
      "ISBN",
      "\u00a0",
      "978-1-58961-237-2",
      ". Retrieved ",
      "February 10,",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan & Ritchie (1978)",
      ", p.\u00a06.",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "g",
      " ",
      "Klemens, Ben",
      " (2013). ",
      "21st Century C",
      ". ",
      "O'Reilly Media",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-4493-2714-9",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Feuer, Alan R.; Gehani, Narain H. (March 1982). \"Comparison of the Programming Languages C and Pascal\". ",
      "ACM Computing Surveys",
      ". ",
      "14",
      " (1): 73\u201392. ",
      "doi",
      ":",
      "10.1145/356869.356872",
      ". ",
      "S2CID",
      "\u00a0",
      "3136859",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kernighan & Ritchie (1996)",
      ", p.\u00a0122.",
      "\n",
      "\n",
      "^",
      " ",
      "For example, gcc provides _FORTIFY_SOURCE. ",
      "\"Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)\"",
      ". fedoraproject.org",
      ". Retrieved ",
      "August 5,",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\u0e40\u0e2d\u0e35\u0e48\u0e22\u0e21\u0e2a\u0e34\u0e23\u0e34\u0e27\u0e07\u0e28\u0e4c, \u0e42\u0e2d\u0e20\u0e32\u0e28 (2016). ",
      "Programming with C",
      ". Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp.\u00a0225\u2013230. ",
      "ISBN",
      "\u00a0",
      "978-616-08-2740-4",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Raymond, Eric S.",
      " (October 11, 1996). ",
      "The New Hacker's Dictionary",
      " (3rd ed.). MIT Press. p.\u00a0432. ",
      "ISBN",
      "\u00a0",
      "978-0-262-68092-9",
      ". Retrieved ",
      "August 5,",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Summit, Steve. ",
      "\"comp.lang.c Frequently Asked Questions 6.23\"",
      ". Retrieved ",
      "March 6,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Summit, Steve. ",
      "\"comp.lang.c Frequently Asked Questions 7.28\"",
      ". Retrieved ",
      "March 6,",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Man Page for lint (freebsd Section 1)\"",
      ". ",
      "unix.com",
      ". May 24, 2001",
      ". Retrieved ",
      "July 15,",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "McMillan, Robert (August 1, 2013). ",
      "\"Is Java Losing Its Mojo?\"",
      ". ",
      "Wired",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dale, Nell B.; Weems, Chip (2014). ",
      "Programming and problem solving with C++",
      " (6th ed.). Burlington, MA: Jones & Bartlett Learning. ",
      "ISBN",
      "\u00a0",
      "978-1449694289",
      ". ",
      "OCLC",
      "\u00a0",
      "894992484",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dr. Dobb's Sourcebook",
      ". U.S.A.: Miller Freeman, Inc. November\u2013December 1995.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Using C for CGI Programming\"",
      ". linuxjournal.com. March 1, 2005",
      ". Retrieved ",
      "January 4,",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "O'Regan, Gerard (September 24, 2015). ",
      "Pillars of computing\u00a0: a compendium of select, pivotal technology firms",
      ". ",
      "ISBN",
      "\u00a0",
      "978-3319214641",
      ". ",
      "OCLC",
      "\u00a0",
      "922324121",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Rauchwerger, Lawrence (2004). ",
      "Languages and compilers for parallel computing\u00a0: 16th international workshop, LCPC 2003, College Station, TX, USA, October 2-4, 2003\u00a0: revised papers",
      ". Springer. ",
      "ISBN",
      "\u00a0",
      "978-3540246442",
      ". ",
      "OCLC",
      "\u00a0",
      "57965544",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Stroustrup, Bjarne",
      " (1993). ",
      "\"A History of C++: 1979\u22121991\"",
      " ",
      "(PDF)",
      ". Retrieved ",
      "June 9,",
      " 2011",
      ".",
      "\n",
      "\n",
      "\n",
      "Sources",
      "[",
      "edit",
      "]",
      "\n",
      "Ritchie, Dennis M.",
      " (March 1993). \"The Development of the C Language\". ",
      "ACM SIGPLAN Notices",
      ". ACM. ",
      "28",
      " (3): 201\u2013208. ",
      "doi",
      ":",
      "10.1145/155360.155580",
      ".",
      "Ritchie, Dennis M. (1993). ",
      "\"The Development of the C Language\"",
      ". ",
      "The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II)",
      ". ",
      "ACM",
      ". pp.\u00a0201\u2013208. ",
      "doi",
      ":",
      "10.1145/154766.155580",
      ". ",
      "ISBN",
      "\u00a0",
      "0-89791-570-4",
      ". Retrieved ",
      "November 4,",
      " 2014",
      ".",
      "\n",
      "Kernighan, Brian W.",
      "; ",
      "Ritchie, Dennis M.",
      " (1996). ",
      "The C Programming Language",
      " (2nd ed.). ",
      "Prentice Hall",
      ". ",
      "ISBN",
      "\u00a0",
      "7-302-02412-X",
      ".",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      "Kernighan, Brian",
      "; ",
      "Ritchie, Dennis",
      " (1988). ",
      "The C Programming Language",
      " (2 ed.). Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "978-0131103627",
      ".",
      " ",
      "(archive)",
      "\n",
      "Plauger, P.J.",
      " (1992). ",
      "The Standard C Library",
      " (1 ed.). Prentice Hall. ",
      "ISBN",
      "\u00a0",
      "978-0131315099",
      ".",
      " ",
      "(source)",
      "\n",
      "Banahan, M.; Brady, D.; Doran, M. (1991). ",
      "The C Book: Featuring the ANSI C Standard",
      " (2 ed.). Addison-Wesley. ",
      "ISBN",
      "\u00a0",
      "978-0201544336",
      ".",
      " ",
      "(free)",
      "\n",
      "Harbison, Samuel; Steele Jr, Guy (2002). ",
      "C: A Reference Manual",
      " (5 ed.). Pearson. ",
      "ISBN",
      "\u00a0",
      "978-0130895929",
      ".",
      " ",
      "(archive)",
      "\n",
      "King, K.N. (2008). ",
      "C Programming: A Modern Approach",
      " (2 ed.). W. W. Norton. ",
      "ISBN",
      "\u00a0",
      "978-0393979503",
      ".",
      " ",
      "(archive)",
      "\n",
      "Griffiths, David; Griffiths, Dawn (2012). ",
      "Head First C",
      " (1 ed.). O'Reilly. ",
      "ISBN",
      "\u00a0",
      "978-1449399917",
      ".",
      "\n",
      "Perry, Greg; Miller, Dean (2013). ",
      "C Programming: Absolute Beginner's Guide",
      " (3 ed.). Que. ",
      "ISBN",
      "\u00a0",
      "978-0789751980",
      ".",
      "\n",
      "Deitel, Paul; Deitel, Harvey (2015). ",
      "C: How to Program",
      " (8 ed.). Pearson. ",
      "ISBN",
      "\u00a0",
      "978-0133976892",
      ".",
      " ",
      "(archive)",
      "\n",
      "Gustedt, Jens (2019). ",
      "Modern C",
      " (2 ed.). Manning. ",
      "ISBN",
      "\u00a0",
      "978-1617295812",
      ".",
      " ",
      "(free)",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "C (programming language)",
      "at Wikipedia's ",
      "sister projects",
      "Media",
      " from Wikimedia Commons",
      "\n            ",
      "News",
      " from Wikinews",
      "\n            ",
      "Quotations",
      " from Wikiquote",
      "\n            ",
      "Textbooks",
      " from Wikibooks",
      "\n            ",
      "Resources",
      " from Wikiversity",
      "\n            ",
      "\n",
      "\n",
      "ISO C Working Group official website",
      "\n",
      "ISO/IEC 9899",
      ", publicly available official C documents, including the C99 Rationale",
      "\n",
      "\"C99 with Technical corrigenda TC1, TC2, and TC3 included\"",
      " ",
      "(PDF)",
      ".",
      "\u00a0",
      "(3.61\u00a0MB)",
      "\n",
      "comp.lang.c Frequently Asked Questions",
      "\n",
      "A History of C",
      ", by Dennis Ritchie",
      "\n",
      "v",
      "t",
      "e",
      "C programming language",
      "\n",
      "ANSI C",
      "\n",
      "C99",
      "\n",
      "C11",
      "\n",
      "C18",
      "\n",
      "C2x",
      "\n",
      "Embedded C",
      "\n",
      "MISRA C",
      "\n",
      "Features",
      "\n",
      "Functions",
      "\n",
      "Header files",
      "\n",
      "Operators",
      "\n",
      "String",
      "\n",
      "Syntax",
      "\n",
      "Preprocessor",
      "\n",
      "Data types",
      "\n",
      "Standard library",
      "\n",
      "Char",
      "\n",
      "File I/O",
      "\n",
      "Math",
      "\n",
      "Dynamic memory",
      "\n",
      "String",
      "\n",
      "Time",
      "\n",
      "Variadic",
      "\n",
      "POSIX",
      "\n",
      "Standard library",
      "implementations",
      "\n",
      "Bionic",
      "\n",
      "libhybris",
      "\n",
      "dietlibc",
      "\n",
      "glibc",
      "\n",
      "EGLIBC",
      "\n",
      "klibc",
      "\n",
      "Windows CRT",
      "\n",
      "musl",
      "\n",
      "Newlib",
      "\n",
      "uClibc",
      "\n",
      "Compilers",
      "\n",
      "ACK",
      "\n",
      "Borland Turbo C",
      "\n",
      "Clang",
      "\n",
      "GCC",
      "\n",
      "ICC",
      "\n",
      "LCC",
      "\n",
      "PCC",
      "\n",
      "SDCC",
      "\n",
      "TCC",
      "\n",
      "Microsoft Visual Studio",
      " / ",
      "Express",
      " / ",
      "C++",
      "\n",
      "Watcom C/C++",
      "\n",
      "IDEs",
      "\n",
      "Anjuta",
      "\n",
      "CLion",
      "\n",
      "Code::Blocks",
      "\n",
      "CodeLite",
      "\n",
      "Eclipse",
      "\n",
      "Geany",
      "\n",
      "GNOME Builder",
      "\n",
      "Microsoft Visual Studio",
      "\n",
      "NetBeans",
      "\n",
      "Comparison with",
      "other languages",
      "\n",
      "Compatibility of C and C++",
      "\n",
      "Comparison with Pascal",
      "\n",
      "Descendant",
      "languages",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "D",
      "\n",
      "Objective-C",
      "\n",
      "Alef",
      "\n",
      "Limbo",
      "\n",
      "Go",
      "\n",
      "Vala",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Integrated development environments",
      "C",
      " and ",
      "C++",
      "Open source",
      "\n",
      "Android Studio",
      "\n",
      "Anjuta",
      "\n",
      "Code::Blocks",
      "\n",
      "CodeLite",
      "\n",
      "Dev-C++",
      "\n",
      "Eclipse",
      "\n",
      "Geany",
      "\n",
      "GNAT Programming Studio",
      "\n",
      "GNOME Builder",
      "\n",
      "KDevelop",
      "\n",
      "MonoDevelop",
      "\n",
      "NetBeans",
      "\n",
      "QDevelop",
      "\n",
      "Qt Creator",
      "\n",
      "SharpDevelop",
      "\n",
      "Ultimate++",
      "\n",
      "OpenWatcom",
      "\n",
      "Freeware",
      "\n",
      "Oracle Developer Studio",
      "\n",
      "Visual Studio Community",
      "\n",
      "Xcode",
      "\n",
      "Retail",
      "\n",
      "C++Builder",
      "\n",
      "Eclipse",
      "-based\n",
      "CodeWarrior",
      "\n",
      "MyEclipse",
      "\n",
      "Visual Studio",
      "\n",
      "By ",
      "JetBrains",
      "\n",
      "IntelliJ IDEA",
      "\n",
      "AppCode",
      "\n",
      "CLion",
      "\n",
      "LabWindows/CVI",
      "\n",
      "LccWin32",
      "\n",
      "IBM Rational Software Architect",
      "\n",
      "Understand",
      "\n",
      "Discontinued",
      "\n",
      "IBM VisualAge",
      "\n",
      "Visual C++ Express",
      "\n",
      "Borland Turbo C",
      "\n",
      "Java",
      "Open source",
      "\n",
      "BlueJ",
      "\n",
      "DrJava",
      "\n",
      "Eclipse",
      "\n",
      "Geany",
      "\n",
      "Greenfoot",
      "\n",
      "IntelliJ IDEA Community Edition",
      "\n",
      "Android Studio",
      "\n",
      "NetBeans",
      "\n",
      "Servoy Community Edition",
      "\n",
      "Freeware",
      "\n",
      "jGRASP",
      "\n",
      "JDeveloper",
      "\n",
      "Xcode",
      "\n",
      "Retail",
      "\n",
      "JCreator",
      "\n",
      "MyEclipse",
      "\n",
      "IBM\n",
      "Rational Application Developer",
      "\n",
      "WebSphere Integration Developer",
      "\n",
      "JetBrains",
      " ",
      "IntelliJ IDEA",
      "\n",
      "Servoy Business Application Platform Edition",
      "\n",
      "Understand",
      "\n",
      "Discontinued",
      "\n",
      "Metrowerks CodeWarrior Pro for Java",
      "\n",
      "JBuilder",
      "\n",
      "Sun Java Studio Creator",
      " (superseded by ",
      "NetBeans",
      ")",
      "\n",
      "Visual Age",
      " (superseded by ",
      "Eclipse",
      ")",
      "\n",
      "Visual Caf\u00e9",
      " (aka Espresso, superseded by ",
      "JBuilder",
      ")",
      "\n",
      "Visual J++",
      "\n",
      "Xelfi",
      " (became ",
      "NetBeans",
      ")",
      "\n",
      "CLI",
      "Open source",
      "\n",
      "MonoDevelop",
      "\n",
      "SharpDevelop",
      "\n",
      "Visual Studio Code",
      "\n",
      "PascalABC.NET",
      "\n",
      "Freeware",
      "\n",
      "Visual Studio Community",
      "\n",
      "Retail",
      "\n",
      "Visual Studio",
      "\n",
      "Rider",
      "\n",
      "Understand",
      "\n",
      "Discontinued",
      "\n",
      "Xamarin Studio",
      "\n",
      "Visual Basic Express",
      "\n",
      "Visual Web Developer Express",
      "\n",
      "Visual J# Express",
      "\n",
      "Visual Studio Express for Windows Phone",
      "\n",
      "Visual C++ Express",
      "\n",
      "Visual C# Express",
      "\n",
      "Express for Desktop",
      "\n",
      "Express for Web",
      "\n",
      "Express for Windows",
      "\n",
      "Flash",
      "\n",
      "Adobe Flash Builder",
      "\n",
      "FlashDevelop",
      "\n",
      "Powerflasher FDT",
      "\n",
      "PHP",
      "\n",
      "Aptana",
      "\n",
      "NetBeans",
      "\n",
      "PhpStorm",
      "\n",
      "KDevelop",
      "\n",
      "Python",
      "\n",
      "Eric",
      "\n",
      "Light Table",
      "\n",
      "Ninja-IDE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Spyder",
      "\n",
      "Wing IDE",
      "\n",
      "KDevelop",
      "\n",
      "Visual Studio Code",
      "\n",
      "Thonny",
      "\n",
      "Pascal",
      " and ",
      "Object Pascal",
      "Open source",
      "\n",
      "Free Pascal IDE",
      "\n",
      "Lazarus",
      "\n",
      "Dev-Pascal",
      "\n",
      "GNAVI",
      "\n",
      "Freeware",
      "\n",
      "Delphi Community",
      "\n",
      "Retail",
      "\n",
      "Delphi",
      "\n",
      "Discontinued",
      "\n",
      "Turbo Pascal for Windows",
      "\n",
      "Virtual Pascal",
      "\n",
      "BASIC",
      "Open source",
      "\n",
      "MonoDevelop",
      "\n",
      "SharpDevelop",
      "\n",
      "Gambas",
      "\n",
      "HBasic",
      "\n",
      "Basic For Qt",
      "\n",
      "QB64",
      "\n",
      "Freeware",
      "\n",
      "Microsoft Small Basic",
      "\n",
      "FutureBASIC",
      "\n",
      "RapidQ",
      "\n",
      "thinAir",
      "\n",
      "Retail",
      "\n",
      "B4X",
      " (",
      "Basic4ppc",
      ")",
      "\n",
      "Microsoft Visual Studio",
      "\n",
      "NS Basic",
      "\n",
      "PureBasic",
      "\n",
      "GLBasic",
      "\n",
      "Liberty BASIC",
      "\n",
      "Xojo",
      "\n",
      "Discontinued",
      "\n",
      "QuickBASIC",
      "\n",
      "QBasic",
      "\n",
      "Visual Basic",
      "\n",
      "R",
      "\n",
      "RStudio",
      "\n",
      "R Tools for Visual Studio",
      "\n",
      "Online",
      "\n",
      "AWS Cloud9 IDE",
      "\n",
      "Eclipse Che",
      "\n",
      "\n",
      "Category",
      "\n",
      "Comparison",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNF",
      ": ",
      "cb119665180",
      " ",
      "(data)",
      "\n",
      "GND",
      ": ",
      "4113195-2",
      "\n",
      "LCCN",
      ": ",
      "sh85018532",
      "\n",
      "SUDOC",
      ": ",
      "027672441",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=C_(programming_language)&oldid=982983903",
      "\""
    ],
    "lastUpdated": " 11 October 2020, at 15:21"
  },
  {
    "url": "https://en.wikipedia.org/wiki/ABC_(programming_language)",
    "title": "ABC (programming language)",
    "text": [
      "Programming language",
      "\n",
      "ABC",
      "Paradigms",
      "multi-paradigm",
      ": ",
      "imperative",
      ", ",
      "procedural",
      ", ",
      "structured",
      "Designed\u00a0by",
      "Leo Geurts, ",
      "Lambert Meertens",
      ", ",
      "Steven Pemberton",
      "Developer",
      "Centrum Wiskunde & Informatica",
      " (CWI)",
      "First\u00a0appeared",
      "January\u00a01987",
      "; 33\u00a0years ago",
      "\u00a0(",
      "1987-01",
      ")",
      "Stable release",
      "1.05.02\n   / 1990",
      "; 30\u00a0years ago",
      "\u00a0(",
      "1990",
      ")",
      "\n",
      "Typing discipline",
      "strong",
      ", ",
      "polymorphic",
      "Website",
      "homepages",
      ".cwi",
      ".nl",
      "/~steven",
      "/abc",
      "/",
      "Influenced by",
      "SETL",
      ", ",
      "ALGOL 68",
      "[1]",
      "Influenced",
      "Python",
      "\n",
      "ABC",
      " is an ",
      "imperative",
      " general-purpose ",
      "programming language",
      " and ",
      "integrated development environment",
      " (IDE) developed at ",
      "Centrum Wiskunde & Informatica",
      " (CWI), ",
      "Netherlands",
      " by Leo Geurts, ",
      "Lambert Meertens",
      ", and ",
      "Steven Pemberton",
      ". It is interactive, structured, ",
      "high-level",
      ", and intended to be used instead of ",
      "BASIC",
      ", ",
      "Pascal",
      ", or ",
      "AWK",
      ". It is intended for teaching or prototyping, but not as a systems-programming language.\n",
      "ABC had a major influence on the design of the language ",
      "Python",
      ", developed by ",
      "Guido van Rossum",
      ", who formerly worked for several years on the ABC system in the mid-1980s.",
      "[2]",
      "[3]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Features",
      "\n",
      "2",
      " ",
      "Example",
      "\n",
      "3",
      " ",
      "References",
      "\n",
      "4",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Features",
      "[",
      "edit",
      "]",
      "\n",
      "Its designers claim that ABC programs are typically around a quarter the size of the equivalent Pascal or ",
      "C",
      " programs, and more readable.",
      "[4]",
      " Key features include:\n",
      "\n",
      "Only five basic ",
      "data types",
      "\n",
      "No required variable declarations",
      "\n",
      "Explicit support for ",
      "top-down programming",
      "\n",
      "Statement nesting is indicated by ",
      "indentation",
      ", via the ",
      "off-side rule",
      "\n",
      "Infinite precision arithmetic",
      ", unlimited-sized lists and strings, and other features supporting orthogonality and ease of use by novices",
      "\n",
      "ABC was originally a ",
      "monolithic implementation",
      ", leading to an inability to adapt to new requirements, such as creating a ",
      "graphical user interface",
      " (GUI). ABC could not directly access the underlying ",
      "file system",
      " and ",
      "operating system",
      ".\n",
      "The full ABC system includes a programming environment with a ",
      "structure editor",
      " (syntax-directed editor), suggestions, ",
      "static variables",
      " (persistent), and multiple workspaces, and is available as an ",
      "interpreter",
      "\u2013",
      "compiler",
      ". As of 2020",
      "[update]",
      ", the latest version is 1.05.02, and it is ported to ",
      "Unix",
      ", ",
      "DOS",
      ", ",
      "Atari",
      ", and Apple ",
      "Macintosh",
      ".\n",
      "\n",
      "Example",
      "[",
      "edit",
      "]",
      "\n",
      "An example function to collect the set of all ",
      "words",
      " in a document:\n",
      "\n",
      "HOW TO RETURN words document:\n   PUT {} IN collection\n   FOR line IN document:\n      FOR word IN split line:\n         IF word not.in collection:\n            INSERT word IN collection\n   RETURN collection\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Biancuzzi, Federico; Warden, Shane (April 2009). ",
      "Masterminds of Programming: Conversations with the Creators of Major Programming Languages",
      ". ",
      "O'Reilly Media",
      ". p.\u00a032. ",
      "ISBN",
      "\u00a0",
      "0-596-51517-0",
      ". Retrieved ",
      "December 14,",
      " 2009",
      ". ",
      "He was clearly influenced by ",
      "ALGOL 68",
      "'s philosophy of providing constructs that can be combined in many different ways to produce all sorts of different data structures or ways of structuring a program. \u2013 ",
      "Guido van Rossum",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "Hamilton, Naomi (2008-05-08). ",
      "\"The A-Z of Programming Languages: Python\"",
      ". ",
      "Computerworld",
      ". IDG Communications. Archived from ",
      "the original",
      " on 2008-12-29",
      ". Retrieved ",
      "2020-09-04",
      ". ",
      "... I figured I could design and implement a language 'almost, but not quite, entirely unlike' ABC, improving upon ABC's deficiencies, ...",
      "\n",
      "\n",
      "^",
      " ",
      "Stewart, Bruce (2002-06-04). ",
      "\"An Interview with Guido van Rossum\"",
      ". ",
      "ONLamp.com",
      ". O\u2019Reilly Media. Archived from ",
      "the original",
      " on 2013-03-13",
      ". Retrieved ",
      "2020-09-04",
      ". ",
      "... in my head I had analyzed some of the reasons it had failed.",
      "\n",
      "\n",
      "^",
      " ",
      "Pemberton, Steven (2012-02-22). ",
      "\"The ABC Programming Language: a short introduction\"",
      ". ",
      "Centrum Wiskunde & Informatica",
      " (CWI)",
      ". Amsterdam",
      ". Retrieved ",
      "2020-09-04",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "ABC Programmer's Handbook",
      "\n",
      "This article is based on material taken from  the ",
      "Free On-line Dictionary of Computing",
      "  prior to 1 November 2008 and incorporated under the \"relicensing\" terms of the ",
      "GFDL",
      ", version 1.3 or later.",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=ABC_(programming_language)&oldid=976693266",
      "\""
    ],
    "lastUpdated": " 4 September 2020, at 12:30"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Bazel_(software)",
    "title": "Bazel (software)",
    "text": [
      "This article ",
      "contains content that is written like ",
      "an advertisement",
      ".",
      " Please help ",
      "improve it",
      " by removing ",
      "promotional content",
      " and inappropriate ",
      "external links",
      ", and by adding encyclopedic content written from a ",
      "neutral point of view",
      ".",
      "  ",
      "(",
      "October 2019",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "Bazel",
      "Developer(s)",
      "Google",
      "Initial release",
      "March 2015",
      "Stable release",
      "3.1.0\n   / 21\u00a0April 2020",
      "; 5\u00a0months ago",
      "\u00a0(",
      "2020-04-21",
      ")",
      "[1]",
      "\n",
      "Repository",
      "github",
      ".com",
      "/bazelbuild",
      "/bazel",
      "\n",
      " ",
      "Written in",
      "Java",
      "[2]",
      "Operating system",
      "Cross-platform",
      "License",
      "Apache License 2.0",
      "Website",
      "bazel",
      ".build",
      "\u00a0",
      "\n",
      "Bazel",
      " is a ",
      "free software",
      " tool that allows for the automation of building and testing of software.",
      "[2]",
      " The company ",
      "Google",
      " uses the build tool ",
      "Blaze",
      " internally",
      "[3]",
      " and released an open-sourced part of the Blaze tool as Bazel, named as an ",
      "anagram",
      " of Blaze.",
      "[4]",
      " Bazel was first released in March 2015 and achieved beta status by September 2015.",
      "[5]",
      "\n",
      "Similar to build tools like ",
      "Make",
      ", ",
      "Apache Ant",
      ", or ",
      "Apache Maven",
      ",",
      "[2]",
      "[4]",
      " Bazel builds ",
      "software applications",
      " from ",
      "source code",
      " using a set of rules. Rules and ",
      "macros",
      " are created in the ",
      "Starlark",
      " language (previously called Skylark",
      "[6]",
      "), a dialect of ",
      "Python",
      ".",
      "[4]",
      " There are built-in rules for building software written in the ",
      "programming languages",
      " of ",
      "Java",
      ", ",
      "C",
      ", ",
      "C++",
      ", ",
      "Go",
      ", ",
      "Python",
      ", ",
      "Objective-C",
      " and ",
      "Bourne shell",
      " scripts.",
      "[4]",
      "[5]",
      " Bazel can produce software application packages suitable for deployment for the Android and iOS operating systems.",
      "[7]",
      "\n",
      "In designing Bazel, emphasis has been placed on build speed, correctness, and reproducibility.",
      "[2]",
      "[4]",
      " The tool uses parallelization to speed up parts of the build process.",
      "[4]",
      " It includes a ",
      "Bazel Query",
      " language that can be used to analyze build dependencies in complex build graphs.",
      "[4]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Rationale",
      "\n",
      "2",
      " ",
      "Sandbox",
      "\n",
      "3",
      " ",
      "Logo",
      "\n",
      "4",
      " ",
      "See also",
      "\n",
      "5",
      " ",
      "References",
      "\n",
      "6",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Rationale",
      "[",
      "edit",
      "]",
      "\n",
      "One of the goals of Bazel is to create a build system where build target inputs and outputs are fully specified and therefore precisely known to the build system.",
      "[7]",
      " This allows a more accurate analysis and determination of out-of-date build artifacts in the build system's ",
      "dependency graph",
      ". Making the dependency graph analysis more deterministic leads to potential improvements in build times by avoiding re-executing unnecessary build targets. Build reliability is improved by avoiding errors where build targets might depend on out-of-date input artifacts.\n",
      "To achieve more accurate dependency graph analysis, Bazel uses ",
      "content digests",
      " rather than file-based timestamps. File timestamps are commonly used to detect changes in tools like Make or Apache Ant. Timestamps can be problematic when builds are distributed across multiple hosts due to issues with clock synchronization.",
      "[8]",
      " One of Bazel's goals is to enable distributed and parallel builds on a remote cloud infrastructure. Bazel is also designed to scale up to very large build repositories which may not be practical to download to an individual developer's work machine.",
      "[9]",
      "\n",
      "Bazel provides tooling which helps developers to create bit-identical reproducible build outputs. Bazel's implemented rules avoid typical pitfalls such as embedding timestamps in generated outputs to ensure content digest matches. This in turn allows the build system to reliably cache (",
      "memoize",
      ") the outputs of intermediate build steps. Furthermore, reproducible build makes it possible to share intermediate build results between teams or departments in an organization, using dedicated build servers or distributed caches. Bazel therefore is particularly well-suited for larger organizations and software projects that have significant number of build dependencies. A deterministic build and an ability to precisely analyze build input and output artifacts across the dependency graph lends itself to parallel execution of build steps.\n",
      "Bazel is extensible with its custom Starlark programming language. Starlark uses a syntax which is a subset of the syntax of the Python programming language. Starlark however doesn't implement many of Python's language features, such as ability to mutate collections or access the file I/O, in order to avoid extensions that could create side-effects or create build outputs not known to the build system itself. Such side-effects could potentially lead to incorrect analysis of the build dependency graph.\n",
      "Bazel was designed as a multi-language build system. Many commonly used build system are designed with a preference towards a specific programming language. Examples of such systems include Ant and Maven for Java, ",
      "Leiningen",
      " for ",
      "Clojure",
      ", ",
      "sbt",
      " for ",
      "Scala",
      ", etc. In a multi-language project, combining separate build systems and achieving the build speed and correctness benefits described above can be difficult and problematic.\n",
      "Bazel also provides sand-boxed build execution. This can be used to ensure all build dependencies have been properly specified and the build does not depend, for example, on libraries installed only locally on a developer's work computer. This helps to ensure that builds remain portable and can be executed in other (remote) environments.\n",
      "Build systems most similar to Bazel are Pants,",
      "[10]",
      " ",
      "Buck",
      ", and Please.",
      "[11]",
      "[12]",
      " Pants and Buck both aim for similar technical design goals as Bazel and were inspired by the Blaze build system used internally at Google. Blaze is also the predecessor to Bazel. Bazel, Pants, Buck, and Please adopted Starlark as BUILD file parser, respective its BUILD file syntax. Independently developed build systems with similar goals of efficient dependency graph analysis and automated build artifact tracking have been implemented in build systems such as tup.",
      "[13]",
      "\n",
      "\n",
      "Sandbox",
      "[",
      "edit",
      "]",
      "\n",
      "One of the key features that differentiate Bazel from other build systems is the use of a ",
      "sandbox",
      " for compilation steps. When Bazel performs separate compilation, it creates a new directory and fills it with symlinks to the explicit input dependencies for the rule. For languages like C/C++, this provides a significant safety net for the inclusion of header files: it ensures that the developer is aware of the files that are used in compilation, and it prevents the unexpected inclusion of a similarly-named header file from another include directory.\n",
      "This sandbox approach leads to issues with common build tools, resulting in a number of workarounds required to correctly compile code under different architectures. For example, when performing separate compilation for Mac/Darwin architectures, the compiler writes the input paths into SO and OSO symbols in the Mach-O binary, which can be seen with a command like ",
      "nm -a mybinary | grep SO",
      ". These paths are needed for finding symbols during debugging. As a result, builds in Bazel must correct the compiled objects after the fact, trying to correct path-related issues that arose from the sandbox construction using flags like ",
      "-fdebug-prefix-map",
      " and ",
      "-oso_prefix",
      ", the latter which became available only as recently as ",
      "XCode 11.0",
      ". Similar handling needs to takes place in linking phases, rewriting the rpath values in shared object libraries with a command like ",
      "install_name_tool",
      ".",
      "[14]",
      "\n",
      "\n",
      "Logo",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Old Bazel logo",
      "\n",
      "Since Bazel's initial release the logo was a green letter \"b\" stylized into a stem of a basil plant with two leaves.\n",
      "On July 5, 2017, the Bazel Blog announced a new logo,",
      "[15]",
      " consisting of three green building blocks arranged to shape a heart.\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      " \n",
      "List of build automation software",
      "\n",
      "Monorepo",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "\"Releases \u00b7 bazelbuild/bazel\"",
      ". ",
      "GitHub",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "Yegulalp, Serdar (Sep 11, 2015). ",
      "\"Google open-sources language-agnostic, scalable software tool\"",
      ". ",
      "InfoWorld",
      ". ",
      "Archived",
      " from the original on 25 October 2017",
      ". Retrieved ",
      "25 June",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard. ",
      "Site Reliability Engineering: How Google Runs Production Systems",
      ". \"O'Reilly Media, Inc.\". p.\u00a090. ",
      "ISBN",
      "\u00a0",
      "9781491951187",
      ". Retrieved ",
      "25 June",
      " 2016",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "g",
      " ",
      "Bolton, David (27 April 2015). ",
      "\"Bazel, Google's Open Source Build System - The New Stack\"",
      ". ",
      "thenewstack.io",
      ". The New Stack. ",
      "Archived",
      " from the original on 24 October 2017",
      ". Retrieved ",
      "25 June",
      " 2016",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Daws, Ryan. ",
      "\"Google's software build tool Bazel heads into beta\"",
      ". ",
      "www.developer-tech.com",
      ". Developer Tech. ",
      "Archived",
      " from the original on 23 October 2017",
      ". Retrieved ",
      "25 June",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Starlark - Bazel\"",
      ". ",
      "blog.bazel.build",
      ". Retrieved ",
      "2018-10-18",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"FAQ - Bazel\"",
      ". ",
      "bazel.build",
      ". Retrieved ",
      "25 June",
      " 2016",
      ".",
      " ",
      "Cite has empty unknown parameter: ",
      "|1=",
      " (",
      "help",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "\"What's Wrong With GNU make?\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Nathan York (23 September 2011). ",
      "\"Build in the Cloud: Distributing Build Steps\"",
      ". ",
      "google-engtools.blogspot.com",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Pants: A fast, scalable build system\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Buck: A high-performance build tool\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Please FAQ",
      "\n",
      "\n",
      "^",
      " ",
      "Mike Shal (2009). ",
      "\"Build System Rules and Algorithms\"",
      " ",
      "(PDF)",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"tools/cpp/osx_cc_wrapper.sh\"",
      ". Github.",
      "\n",
      "\n",
      "^",
      " ",
      "Steren Giannini (5 July 2017). ",
      "\"A new logo and homepage for Bazel\"",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      " ",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Bazel_(software)&oldid=981258933",
      "\""
    ],
    "lastUpdated": " 1 October 2020, at 07:18"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Cython",
    "title": "Cython",
    "text": [
      "Not to be confused with ",
      "CPython",
      ".",
      "\n",
      "\n",
      "\n",
      "Cython",
      "Developer(s)",
      "Robert Bradshaw, Stefan Behnel, et al.",
      "Initial release",
      "28\u00a0July 2007",
      "; 13\u00a0years ago",
      "\u00a0(",
      "2007-07-28",
      ")",
      "[1]",
      "Stable release",
      "0.29.16 (24\u00a0March 2020",
      "; 6\u00a0months ago",
      "\u00a0(",
      "2020-03-24",
      ")",
      ") ",
      "[\u00b1]",
      "[2]",
      "Preview release",
      "3.0a6 (31\u00a0July 2020",
      "; 2\u00a0months ago",
      "\u00a0(",
      "2020-07-31",
      ")",
      "[3]",
      ") ",
      "[\u00b1]",
      "\n",
      "Repository",
      "github",
      ".com",
      "/cython",
      "/cython",
      "\n",
      " ",
      "Written in",
      "Python",
      ", ",
      "C",
      "Type",
      "Programming language",
      "License",
      "Apache License 2.0",
      "Website",
      "cython",
      ".org",
      " ",
      "\n",
      "Cython",
      " is a programming language that aims to be a ",
      "superset",
      " of the ",
      "Python programming language",
      ", designed to give ",
      "C",
      "-like performance with code that is written mostly in Python with optional additional C-inspired syntax.",
      "[4]",
      "[5]",
      "\n",
      "Cython is a ",
      "compiled language",
      " that is typically used to generate ",
      "CPython",
      " extension modules. Annotated Python-like code is compiled to C or ",
      "C++",
      " then automatically ",
      "wrapped in interface code",
      ", producing extension modules that can be loaded and used by regular Python code using the import statement, but with significantly less computational overhead at ",
      "run time",
      ". Cython also facilitates wrapping independent C or C++ code into python-importable modules.\n",
      "Cython is written in Python and C and works on ",
      "Windows",
      ", ",
      "macOS",
      ", and ",
      "Linux",
      ", producing source files compatible with CPython 2.6, 2.7, and 3.3 through 3.8.\n",
      "Cython 3.0.0 is in development.",
      "[6]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Design",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "3",
      " ",
      "Example",
      "\n",
      "4",
      " ",
      "Using in IPython/Jupyter notebook",
      "\n",
      "5",
      " ",
      "Uses",
      "\n",
      "6",
      " ",
      "See also",
      "\n",
      "7",
      " ",
      "References",
      "\n",
      "8",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Design",
      "[",
      "edit",
      "]",
      "\n",
      "Cython works by producing a standard Python module. However, the behavior differs from standard Python in that the module code, originally written in Python, is translated into C. While the resulting code is fast, it makes many calls into the CPython interpreter and CPython standard libraries to perform actual work. Choosing this arrangement saved considerably on Cython's development time, but modules have a dependency on the Python interpreter and standard library.\n",
      "Although most of the code is C-based, a small stub loader written in interpreted Python is usually required (unless the goal is to create a loader written entirely in C, which may involve work with the undocumented internals of CPython). However, this is not a major problem due to the presence of the Python interpreter.",
      "[",
      "citation needed",
      "]",
      "\n",
      "Cython has a ",
      "foreign function interface",
      " for invoking ",
      "C",
      "/",
      "C++",
      " ",
      "routines",
      " and the ability to declare the ",
      "static type",
      " of subroutine parameters and results, local variables, and class attributes.\n",
      "A Cython program that implements the same algorithm as a corresponding Python program may consume fewer computing resources such as core memory and processing cycles due to differences between the CPython and Cython execution models. A basic Python program is loaded and executed by the CPython ",
      "virtual machine",
      ", so both the runtime and the program itself consume computing resources. A Cython program is compiled to C code, which is further compiled to machine code, so the virtual machine is used only briefly when the program is loaded.",
      "[7]",
      "[8]",
      "[9]",
      "[10]",
      "\n",
      "Cython employs:\n",
      "\n",
      "Optimistic optimizations",
      "\n",
      "Type inference (optional)",
      "\n",
      "Low overhead in control structures",
      "\n",
      "Low function call overhead",
      "[11]",
      "[12]",
      "\n",
      "Performance depends both on what C code is generated by Cython and how that code is compiled by the C compiler.",
      "[13]",
      "\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Cython is a derivative of the ",
      "Pyrex language",
      ", and supports more features and optimizations than Pyrex.",
      "[14]",
      "[15]",
      " Cython was ",
      "forked",
      " from Pyrex in 2007 by developers of the ",
      "Sage",
      " computer algebra package, because they were unhappy with Pyrex's limitations and could not get patches accepted by Pyrex's maintainer Greg Ewing, who envisioned a much smaller scope for his tool than the Sage developers had in mind. They then forked Pyrex as SageX. When they found people were downloading Sage just to get SageX, and developers of other packages (including Stefan Behnel, who maintains the ",
      "XML",
      " library LXML) were also maintaining forks of Pyrex, SageX was split off the Sage project and merged with ",
      "cython-lxml",
      " to become Cython.",
      "[16]",
      "\n",
      "Cython files have a ",
      ".pyx",
      " extension. At its most basic, Cython code looks exactly like Python code. However, whereas standard Python is ",
      "dynamically typed",
      ", in Cython, types can optionally be provided, allowing for improved performance, allowing loops to be converted into C loops where possible. For example:\n",
      "\n",
      "def",
      " ",
      "primes",
      "(",
      "int",
      " ",
      "kmax",
      "):",
      "  ",
      "# The argument will be converted to int or raise a TypeError.",
      "\n    ",
      "cdef",
      " ",
      "int",
      " ",
      "n",
      ",",
      " ",
      "k",
      ",",
      " ",
      "i",
      "  ",
      "# These variables are declared with C types.",
      "\n    ",
      "cdef",
      " ",
      "int",
      " ",
      "p",
      "[1000]  # ",
      "Another",
      " ",
      "C",
      " ",
      "type",
      "\n    ",
      "result",
      " ",
      "=",
      " ",
      "[]",
      "  ",
      "# A Python type",
      "\n    ",
      "if",
      " ",
      "kmax",
      " ",
      ">",
      " ",
      "1000",
      ":",
      "\n        ",
      "kmax",
      " ",
      "=",
      " ",
      "1000",
      "\n    ",
      "k",
      " ",
      "=",
      " ",
      "0",
      "\n    ",
      "n",
      " ",
      "=",
      " ",
      "2",
      "\n    ",
      "while",
      " ",
      "k",
      " ",
      "<",
      " ",
      "kmax",
      ":",
      "\n        ",
      "i",
      " ",
      "=",
      " ",
      "0",
      "\n        ",
      "while",
      " ",
      "i",
      " ",
      "<",
      " ",
      "k",
      " ",
      "and",
      " ",
      "n",
      " ",
      "%",
      " ",
      "p",
      "[",
      "i",
      "]",
      " ",
      "!=",
      " ",
      "0",
      ":",
      "\n            ",
      "i",
      " ",
      "=",
      " ",
      "i",
      " ",
      "+",
      " ",
      "1",
      "\n        ",
      "if",
      " ",
      "i",
      " ",
      "==",
      " ",
      "k",
      ":",
      "\n            ",
      "p",
      "[",
      "k",
      "]",
      " ",
      "=",
      " ",
      "n",
      "\n            ",
      "k",
      " ",
      "=",
      " ",
      "k",
      " ",
      "+",
      " ",
      "1",
      "\n            ",
      "result",
      ".",
      "append",
      "(",
      "n",
      ")",
      "\n        ",
      "n",
      " ",
      "=",
      " ",
      "n",
      " ",
      "+",
      " ",
      "1",
      "\n    ",
      "return",
      " ",
      "result",
      "\n",
      "\n",
      "Example",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "Hello World in Cython",
      "\n",
      "A sample ",
      "hello world",
      " program for Cython is more complex than in most languages because it interfaces with the Python C API and the ",
      "setuptools",
      " extension building facility. At least three files are required for a basic project:\n",
      "\n",
      "A ",
      "setup.py",
      " file to invoke the ",
      "setuptools",
      " build process that generates the extension module",
      "\n",
      "A main python program to load the extension module",
      "\n",
      "Cython source file(s)",
      "\n",
      "The following code listings demonstrate the build and launch process:\n",
      "\n",
      "# hello.pyx - Python module, this code will be translated to C by Cython.",
      "\n",
      "def",
      " ",
      "say_hello",
      "():",
      "\n    ",
      "print",
      "(",
      "\"Hello World!\"",
      ")",
      "\n",
      "\n",
      "# launch.py - Python stub loader, loads the module that was made by Cython.",
      "\n\n",
      "# This code is always interpreted, like normal Python.",
      "\n",
      "# It is not compiled to C.",
      "\n\n",
      "import",
      " ",
      "hello",
      "\n",
      "hello",
      ".",
      "say_hello",
      "()",
      "\n",
      "\n",
      "# setup.py - unnecessary if not redistributing the code, see below",
      "\n",
      "from",
      " ",
      "setuptools",
      " ",
      "import",
      " ",
      "setup",
      "\n",
      "from",
      " ",
      "Cython.Build",
      " ",
      "import",
      " ",
      "cythonize",
      "\n\n",
      "setup",
      "(",
      "name",
      " ",
      "=",
      " ",
      "\"Hello world app\"",
      ",",
      "\n      ",
      "ext_modules",
      " ",
      "=",
      " ",
      "cythonize",
      "(",
      "\"*.pyx\"",
      "))",
      "\n",
      "\n",
      "These commands build and launch the program:\n",
      "\n",
      "$ python setup.py build_ext --inplace\n$ python launch.py\n",
      "\n",
      "Using in IPython/Jupyter notebook",
      "[",
      "edit",
      "]",
      "\n",
      "A more straightforward way to start with Cython is through command-line ",
      "IPython",
      " (or through in-browser python console called Jupyter ",
      "notebook",
      "):\n",
      "\n",
      "In",
      " ",
      "[",
      "1",
      "]:",
      " ",
      "%",
      "load_ext",
      " ",
      "Cython",
      "\n\n",
      "In",
      " ",
      "[",
      "2",
      "]:",
      " ",
      "%%",
      "cython",
      "\n   ",
      "...",
      ":",
      " ",
      "def",
      " ",
      "f",
      "(",
      "n",
      "):",
      "\n   ",
      "...",
      ":",
      "     ",
      "a",
      " ",
      "=",
      " ",
      "0",
      "\n   ",
      "...",
      ":",
      "     ",
      "for",
      " ",
      "i",
      " ",
      "in",
      " ",
      "range",
      "(",
      "n",
      "):",
      "\n   ",
      "...",
      ":",
      "         ",
      "a",
      " ",
      "+=",
      " ",
      "i",
      "\n   ",
      "...",
      ":",
      "     ",
      "return",
      " ",
      "a",
      "\n   ",
      "...",
      ":",
      " \n   ",
      "...",
      ":",
      " ",
      "cpdef",
      " ",
      "g",
      "(",
      "int",
      " ",
      "n",
      "):",
      "\n   ",
      "...",
      ":",
      "     ",
      "cdef",
      " ",
      "long",
      " ",
      "a",
      " ",
      "=",
      " ",
      "0",
      "\n   ",
      "...",
      ":",
      "     ",
      "cdef",
      " ",
      "int",
      " ",
      "i",
      "\n   ",
      "...",
      ":",
      "     ",
      "for",
      " ",
      "i",
      " ",
      "in",
      " ",
      "range",
      "(",
      "n",
      "):",
      "\n   ",
      "...",
      ":",
      "         ",
      "a",
      " ",
      "+=",
      " ",
      "i",
      "\n   ",
      "...",
      ":",
      "     ",
      "return",
      " ",
      "a",
      "\n   ",
      "...",
      ":",
      " \n\n",
      "In",
      " ",
      "[",
      "3",
      "]:",
      " ",
      "%",
      "timeit",
      " ",
      "f",
      "(",
      "1000000",
      ")",
      "\n",
      "10",
      " ",
      "loops",
      ",",
      " ",
      "best",
      " ",
      "of",
      " ",
      "3",
      ":",
      " ",
      "26.5",
      " ",
      "ms",
      " ",
      "per",
      " ",
      "loop",
      "\n\n",
      "In",
      " ",
      "[",
      "4",
      "]:",
      " ",
      "%",
      "timeit",
      " ",
      "g",
      "(",
      "1000000",
      ")",
      "\n",
      "1000",
      " ",
      "loops",
      ",",
      " ",
      "best",
      " ",
      "of",
      " ",
      "3",
      ":",
      " ",
      "279",
      " ",
      "\u00b5",
      "s",
      " ",
      "per",
      " ",
      "loop",
      "\n",
      "\n",
      "which gives a 95 times improvement over the pure-python version. More details on the subject in the official quickstart page.",
      "[17]",
      "\n",
      "\n",
      "Uses",
      "[",
      "edit",
      "]",
      "\n",
      "Cython is particularly popular among scientific users of Python,",
      "[9]",
      "[18]",
      "[19]",
      " where it has \"the perfect audience\" according to Python creator ",
      "Guido van Rossum",
      ".",
      "[20]",
      " Of particular note:\n",
      "\n",
      "The ",
      "free software",
      " ",
      "SageMath",
      " computer algebra system depends on Cython, both for performance and to interface with other libraries.",
      "[21]",
      "\n",
      "Significant parts of the scientific computing libraries ",
      "SciPy",
      ", ",
      "pandas",
      " and ",
      "scikit-learn",
      " are written in Cython.",
      "[22]",
      "[23]",
      "\n",
      "Some high-traffic websites such as ",
      "Quora",
      " use Cython.",
      "[",
      "better\u00a0source\u00a0needed",
      "]",
      "[24]",
      "\n",
      "Cython's domain is not limited to just numerical computing. For example, the lxml XML toolkit is written mostly in Cython, and like its predecessor Pyrex, Cython is used to provide Python bindings for many C and C++ libraries such as the messaging library ",
      "ZeroMQ",
      ".",
      "[25]",
      " Cython can also be used to develop ",
      "parallel programs",
      " for ",
      "multi-core processor",
      " machines; this feature makes use of the ",
      "OpenMP",
      " library.\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      "PyPy",
      "\n",
      "Numba",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Behnel, Stefan (2008). ",
      "\"The Cython Compiler for C-Extensions in Python\"",
      ". ",
      "EuroPython",
      " (28 July 2007: official Cython launch). Vilnius/Lietuva.",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\"Releases \u2013 cython/cython\"",
      ". Retrieved ",
      "12 April",
      " 2020",
      " \u2013 via ",
      "GitHub",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"cython/cython\"",
      ". ",
      "GitHub",
      ". Retrieved ",
      "7 October",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Cython - an overview \u2014 Cython 0.19.1 documentation\"",
      ". Docs.cython.org",
      ". Retrieved ",
      "21 July",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Smith, Kurt (2015). ",
      "Cython: A Guide for Python Programmers",
      ". O'Reilly Media. ",
      "ISBN",
      "\u00a0",
      "978-1-4919-0155-7",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Support Unicode identifiers \u00b7 Issue #2601 \u00b7 cython/cython\"",
      ". ",
      "GitHub",
      ". Retrieved ",
      "11 October",
      " 2019",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Oliphant, Travis (20 June 2011). ",
      "\"Technical Discovery: Speeding up Python (NumPy, Cython, and Weave)\"",
      ". Technicaldiscovery.blogspot.com",
      ". Retrieved ",
      "21 July",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\n",
      "Behnel, Stefan; Bradshaw, Robert; Citro, Craig; Dalcin, Lisandro; Seljebotn, Dag Sverre; Smith, Kurt (2011). ",
      "\"Cython: The Best of Both Worlds\"",
      ". ",
      "Computing in Science and Engineering",
      ". ",
      "13",
      " (2): 31\u201339. ",
      "doi",
      ":",
      "10.1109/MCSE.2010.118",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\n",
      "Seljebot, Dag Sverre (2009). ",
      "\"Fast numerical computations with Cython\"",
      ". ",
      "Proceedings of the 8th Python in Science Conference (SciPy 2009)",
      ": 15\u201322.",
      "\n",
      "\n",
      "^",
      " ",
      "\n",
      "Wilbers, I.; Langtangen, H. P.; \u00d8deg\u00e5rd, \u00c5. (2009).  B. Skallerud; H. I. Andersson (ed.). ",
      "\"Using Cython to Speed up Numerical Python Programs\"",
      " ",
      "(PDF)",
      ". ",
      "Proceedings of MekIT'09",
      ": 495\u2013512",
      ". Retrieved ",
      "14 June",
      " 2011",
      ".",
      "CS1 maint: multiple names: editors list (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "\"wrapper benchmarks for several Python wrapper generators (except Cython)\"",
      ". Archived from ",
      "the original",
      " on 4 April 2015",
      ". Retrieved ",
      "28 May",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"wrapper benchmarks for Cython, Boost.Python and PyBindGen\"",
      ". Archived from ",
      "the original",
      " on 3 March 2016",
      ". Retrieved ",
      "28 May",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Cython: C-Extensions for Python\"",
      ". Retrieved ",
      "22 November",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Differences between Cython and Pyrex\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ewing, Greg (21 March 2011). ",
      "\"Re: VM and Language summit info for those not at Pycon (and those that are!)\"",
      " (Message to the electronic mailing-list ",
      "python-dev",
      ")",
      ". Retrieved ",
      "5 May",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Says Sage and Cython developer Robert Bradshaw at the Sage Days 29 conference (22 March 2011). ",
      "\"Cython: Past, Present and Future\"",
      ". youtube.com",
      ". Retrieved ",
      "5 May",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Building Cython code\"",
      ". ",
      "cython.readthedocs.io",
      ". Retrieved ",
      "24 April",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"inSCIght: The Scientific Computing Podcast\"",
      " (Episode 6). Archived from ",
      "the original",
      " on 10 October 2014",
      ". Retrieved ",
      "29 May",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Millman, Jarrod; Aivazis, Michael (2011). ",
      "\"Python for Scientists and Engineers\"",
      ". ",
      "Computing in Science and Engineering",
      ". ",
      "13",
      " (2): 9\u201312. ",
      "doi",
      ":",
      "10.1109/MCSE.2011.36",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Guido Van Rossum (21 March 2011). ",
      "\"Re: VM and Language summit info for those not at Pycon (and those that are!)\"",
      " (Message to the electronic mailing-list ",
      "python-dev",
      ")",
      ". Retrieved ",
      "5 May",
      " 2011",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Erocal, Burcin; Stein, William (2010). ",
      "The Sage Project: Unifying Free Mathematical Software to Create a Viable Alternative to Magma, Maple, Mathematica and MATLAB",
      " ",
      "(PDF)",
      ". ",
      "Mathematical Software' ICMS 2010",
      ". Lecture Notes in Computer Science. ",
      "6327",
      ". Springer Berlin / Heidelberg. pp.\u00a012\u201327. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.172.624",
      ". ",
      "doi",
      ":",
      "10.1007/978-3-642-15582-6_4",
      ". ",
      "ISBN",
      "\u00a0",
      "978-3-642-15581-9",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"SciPy 0.7.2 release notes\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Pedregosa, Fabian; Varoquaux, Ga\u00ebl; Gramfort, Alexandre; Michel, Vincent; Thirion, Bertrand; Grisel, Olivier; Blondel, Mathieu; Prettenhofer, Peter; Weiss, Ron; Dubourg, Vincent; Vanderplas, Jake; Passos, Alexandre; Cournapeau, David (2011). \"Scikit-learn: Machine Learning in Python\". ",
      "Journal of Machine Learning Research",
      ". ",
      "12",
      ": 2825\u20132830.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Is Quora still running on PyPy?\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"\u00d8MQ: Python binding\"",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      " ",
      "\n",
      "Cython",
      " on ",
      "GitHub",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      "Implementations",
      "\n",
      "CircuitPython",
      "\n",
      "CLPython",
      "\n",
      "CPython",
      "\n",
      "Cython",
      "\n",
      "MicroPython",
      "\n",
      "Numba",
      "\n",
      "IronPython",
      "\n",
      "Jython",
      "\n",
      "Psyco",
      "\n",
      "PyPy",
      "\n",
      "Python for S60",
      "\n",
      "Shed Skin",
      "\n",
      "Stackless Python",
      "\n",
      "Unladen Swallow",
      "\n",
      "more",
      "...",
      "\n",
      "IDE",
      "\n",
      "Boa",
      "\n",
      "Eric Python IDE",
      "\n",
      "IDLE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Ninja-IDE",
      "\n",
      "more",
      "...",
      "\n",
      "Topics",
      "\n",
      "WSGI",
      "\n",
      "\n",
      "software (list)",
      "\n",
      "Python Software Foundation",
      "\n",
      "PyCon",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Cython&oldid=980383639",
      "\""
    ],
    "lastUpdated": " 26 September 2020, at 07:18"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Programming_language",
    "title": "Programming language",
    "text": [
      "Language for communicating instructions to a machine",
      "\n",
      "\n\n",
      "\n",
      "  ",
      "The ",
      "source code",
      " for a simple computer program written in the ",
      "C programming language",
      ". When ",
      "compiled",
      " and ",
      "run",
      ", it will give the output \"",
      "Hello, world!",
      "\".",
      "\n",
      "A ",
      "programming language",
      " is a ",
      "formal language",
      " comprising a ",
      "set of instructions",
      " that produce various kinds of ",
      "output",
      ". Programming languages are used in ",
      "computer programming",
      " to implement ",
      "algorithms",
      ".\n",
      "Most programming languages consist of ",
      "instructions",
      " for ",
      "computers",
      ". There are programmable machines that use a set of ",
      "specific instructions",
      ", rather than ",
      "general programming languages",
      ". Early ones preceded the ",
      "invention of the digital computer",
      ", the first probably being the automatic flute player described in the 9th century by the ",
      "brothers Musa",
      " in ",
      "Baghdad",
      ", during the ",
      "Islamic Golden Age",
      ".",
      "[1]",
      " Since the early 1800s, programs have been used to direct the behavior of machines such as ",
      "Jacquard looms",
      ", ",
      "music boxes",
      " and ",
      "player pianos",
      ".",
      "[2]",
      " The programs for these machines (such as a player piano's scrolls) did not produce different behavior in response to different inputs or conditions.\n",
      "Thousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an ",
      "imperative",
      " form (i.e., as a sequence of operations to perform) while other languages use the ",
      "declarative",
      " form (i.e. the desired result is specified, not how to achieve it).\n",
      "The description of a programming language is usually split into the two components of ",
      "syntax",
      " (form) and ",
      "semantics",
      " (meaning). Some languages are defined by a specification document (for example, the ",
      "C",
      " programming language is specified by an ",
      "ISO",
      " Standard) while other languages (such as ",
      "Perl",
      ") have a dominant ",
      "implementation",
      " that is treated as a ",
      "reference",
      ". Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Definitions",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "\n",
      "2.1",
      " ",
      "Early developments",
      "\n",
      "2.2",
      " ",
      "Refinement",
      "\n",
      "2.3",
      " ",
      "Consolidation and growth",
      "\n",
      "\n",
      "\n",
      "3",
      " ",
      "Elements",
      "\n",
      "\n",
      "3.1",
      " ",
      "Syntax",
      "\n",
      "3.2",
      " ",
      "Semantics",
      "\n",
      "\n",
      "3.2.1",
      " ",
      "Static semantics",
      "\n",
      "3.2.2",
      " ",
      "Dynamic semantics",
      "\n",
      "\n",
      "\n",
      "3.3",
      " ",
      "Type system",
      "\n",
      "\n",
      "3.3.1",
      " ",
      "Typed versus untyped languages",
      "\n",
      "3.3.2",
      " ",
      "Static versus dynamic typing",
      "\n",
      "3.3.3",
      " ",
      "Weak and strong typing",
      "\n",
      "\n",
      "\n",
      "3.4",
      " ",
      "Standard library and run-time system",
      "\n",
      "\n",
      "\n",
      "4",
      " ",
      "Design and implementation",
      "\n",
      "\n",
      "4.1",
      " ",
      "Specification",
      "\n",
      "4.2",
      " ",
      "Implementation",
      "\n",
      "\n",
      "\n",
      "5",
      " ",
      "Proprietary languages",
      "\n",
      "6",
      " ",
      "Use",
      "\n",
      "\n",
      "6.1",
      " ",
      "Measuring language usage",
      "\n",
      "\n",
      "\n",
      "7",
      " ",
      "Dialects, flavors and implementations",
      "\n",
      "8",
      " ",
      "Taxonomies",
      "\n",
      "9",
      " ",
      "See also",
      "\n",
      "10",
      " ",
      "References",
      "\n",
      "11",
      " ",
      "Further reading",
      "\n",
      "12",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Definitions",
      "[",
      "edit",
      "]",
      "\n",
      "A programming language is a notation for writing ",
      "programs",
      ", which are specifications of a computation or ",
      "algorithm",
      ".",
      "[3]",
      " Some authors restrict the term \"programming language\" to those languages that can express all possible algorithms.",
      "[3]",
      "[4]",
      " Traits often considered important for what constitutes a programming language include:\n",
      "\n",
      "Function and target",
      "\n",
      "A ",
      "computer programming language",
      " is a ",
      "language",
      " used to write ",
      "computer programs",
      ", which involves a ",
      "computer",
      " performing some kind of computation",
      "[5]",
      " or ",
      "algorithm",
      " and possibly control external devices such as ",
      "printers",
      ", ",
      "disk drives",
      ", ",
      "robots",
      ",",
      "[6]",
      " and so on. For example, ",
      "PostScript",
      " programs are frequently created by another program to control a computer printer or display. More generally, a programming language may describe computation on some, possibly abstract, machine. It is generally accepted that a complete specification for a programming language includes a description, possibly idealized, of a machine or processor for that language.",
      "[7]",
      " In most practical contexts, a programming language involves a computer; consequently, programming languages are usually defined and studied this way.",
      "[8]",
      " Programming languages differ from ",
      "natural languages",
      " in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines.",
      "\n",
      "Abstractions",
      "\n",
      "Programming languages usually contain ",
      "abstractions",
      " for defining and manipulating ",
      "data structures",
      " or controlling the ",
      "flow of execution",
      ". The practical necessity that a programming language support adequate abstractions is expressed by the ",
      "abstraction principle",
      ".",
      "[9]",
      " This principle is sometimes formulated as a recommendation to the programmer to make proper use of such abstractions.",
      "[10]",
      "\n",
      "Expressive power",
      "\n",
      "The ",
      "theory of computation",
      " classifies languages by the computations they are capable of expressing. All ",
      "Turing complete",
      " languages can implement the same set of ",
      "algorithms",
      ". ",
      "ANSI/ISO SQL-92",
      " and ",
      "Charity",
      " are examples of languages that are not Turing complete, yet are often called programming languages.",
      "[11]",
      "[12]",
      "\n",
      "Markup languages",
      " like ",
      "XML",
      ", ",
      "HTML",
      ", or ",
      "troff",
      ", which define ",
      "structured data",
      ", are not usually considered programming languages.",
      "[13]",
      "[14]",
      "[15]",
      " Programming languages may, however, share the syntax with markup languages if a computational semantics is defined. ",
      "XSLT",
      ", for example, is a ",
      "Turing complete",
      " language entirely using XML syntax.",
      "[16]",
      "[17]",
      "[18]",
      " Moreover, ",
      "LaTeX",
      ", which is mostly used for structuring documents, also contains a Turing complete subset.",
      "[19]",
      "[20]",
      "\n",
      "The term ",
      "computer language",
      " is sometimes used interchangeably with programming language.",
      "[21]",
      " However, the usage of both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of computer languages.",
      "[22]",
      " Similarly, languages used in computing that have a different goal than expressing computer programs are generically designated computer languages. For instance, markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming.",
      "[23]",
      "\n",
      "Another usage regards programming languages as theoretical constructs for programming abstract machines, and computer languages as the subset thereof that runs on physical computers, which have finite hardware resources.",
      "[24]",
      " ",
      "John C. Reynolds",
      " emphasizes that ",
      "formal specification",
      " languages are just as much programming languages as are the languages intended for execution. He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.",
      "[25]",
      "\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "History of programming languages",
      "\n",
      "Early developments",
      "[",
      "edit",
      "]",
      "\n",
      "Very early computers, such as ",
      "Colossus",
      ", were programmed without the help of a ",
      "stored program",
      ", by modifying their circuitry or setting banks of physical controls.\n",
      "Slightly later, programs could be written in ",
      "machine language",
      ", where the programmer writes each instruction in a numeric form the hardware can execute directly. For example, the instruction to add the value in two memory location might consist of 3 numbers: an \"opcode\" that selects the \"add\" operation, and two memory locations. The programs, in decimal or binary form, were read in from ",
      "punched cards",
      ", paper tape, ",
      "magnetic tape",
      " or toggled in on switches on the ",
      "front panel",
      " of the computer.  Machine languages were later termed ",
      "first-generation programming languages",
      " (1GL).\n",
      "The next step was development of so-called ",
      "second-generation programming languages",
      " (2GL) or ",
      "assembly languages",
      ", which were still closely tied to the ",
      "instruction set architecture",
      " of the specific computer. These served to make the program much more human-readable and relieved the programmer of tedious and error-prone address calculations.\n",
      "The first ",
      "high-level programming languages",
      ", or ",
      "third-generation programming languages",
      " (3GL), were written in the 1950s. An early high-level programming language to be designed for a computer was ",
      "Plankalk\u00fcl",
      ", developed for the German ",
      "Z3",
      " by ",
      "Konrad Zuse",
      " between 1943 and 1945. However, it was not implemented until 1998 and 2000.",
      "[26]",
      "\n",
      "John Mauchly",
      "'s ",
      "Short Code",
      ", proposed in 1949, was one of the first high-level languages ever developed for an ",
      "electronic computer",
      ".",
      "[27]",
      " Unlike ",
      "machine code",
      ", Short Code statements represented mathematical expressions in understandable form. However, the program had to be translated into machine code every time it ran, making the process much slower than running the equivalent machine code.\n",
      "At the ",
      "University of Manchester",
      ", ",
      "Alick Glennie",
      " developed ",
      "Autocode",
      " in the early 1950s. As a ",
      "programming language",
      ", it used a ",
      "compiler",
      " to automatically convert the language into machine code. The first code and compiler was developed in 1952 for the ",
      "Mark 1",
      " computer at the University of Manchester and is considered to be the first ",
      "compiled",
      " high-level programming language.",
      "[28]",
      "[29]",
      "\n",
      "The second autocode was developed for the Mark 1 by ",
      "R. A. Brooker",
      " in 1954 and was called the \"Mark 1 Autocode\". Brooker also developed an autocode for the ",
      "Ferranti Mercury",
      " in the 1950s in conjunction with the University of Manchester. The version for the ",
      "EDSAC 2",
      " was devised by ",
      "D. F. Hartley",
      " of ",
      "University of Cambridge Mathematical Laboratory",
      " in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A contemporary but separate thread of development, ",
      "Atlas Autocode",
      " was developed for the University of Manchester ",
      "Atlas 1",
      " machine.\n",
      "In 1954, ",
      "FORTRAN",
      " was invented at IBM by ",
      "John Backus",
      ". It was the first widely used ",
      "high-level general purpose programming language",
      " to have a functional implementation, as opposed to just a design on paper.",
      "[30]",
      "[31]",
      " It is still a popular language for ",
      "high-performance computing",
      "[32]",
      " and is used for programs that benchmark and rank the world's ",
      "fastest supercomputers",
      ".",
      "[33]",
      "\n",
      "Another early programming language was devised by ",
      "Grace Hopper",
      " in the US, called ",
      "FLOW-MATIC",
      ". It was developed for the ",
      "UNIVAC I",
      " at ",
      "Remington Rand",
      " during the period from 1955 until 1959. Hopper found that business data processing customers were uncomfortable with mathematical notation, and in early 1955, she and her team wrote a specification for an ",
      "English",
      " programming language and implemented a prototype.",
      "[34]",
      " The FLOW-MATIC compiler became publicly available in early 1958 and was substantially complete in 1959.",
      "[35]",
      " FLOW-MATIC was a major influence in the design of ",
      "COBOL",
      ", since only it and its direct descendant ",
      "AIMACO",
      " were in actual use at the time.",
      "[36]",
      "\n",
      "\n",
      "Refinement",
      "[",
      "edit",
      "]",
      "\n",
      "The increased use of high-level languages introduced a requirement for ",
      "low-level programming languages",
      " or ",
      "system programming languages",
      ". These languages, to varying degrees, provide facilities between assembly languages and high-level languages. They can be used to perform tasks which require direct access to hardware facilities but still provide higher-level control structures and error-checking.\n",
      "The period from the 1960s to the late 1970s brought the development of the major language paradigms now in use:\n",
      "\n",
      "APL",
      " introduced ",
      "array programming",
      " and influenced ",
      "functional programming",
      ".",
      "[37]",
      "\n",
      "ALGOL",
      " refined both ",
      "structured procedural programming",
      " and the discipline of ",
      "language specification",
      "; the \"Revised Report on the Algorithmic Language ",
      "ALGOL 60",
      "\" became a model for how later language specifications were written.",
      "\n",
      "Lisp",
      ", implemented in 1958, was the first dynamically typed ",
      "functional programming",
      " language.",
      "\n",
      "In the 1960s, ",
      "Simula",
      " was the first language designed to support ",
      "object-oriented programming",
      "; in the mid-1970s, ",
      "Smalltalk",
      " followed with the first \"purely\" object-oriented language.",
      "\n",
      "C",
      " was developed between 1969 and 1973 as a system programming language for the ",
      "Unix",
      " operating system and remains popular.",
      "[38]",
      "\n",
      "Prolog",
      ", designed in 1972, was the first ",
      "logic programming",
      " language.",
      "\n",
      "In 1978, ",
      "ML",
      " built a polymorphic type system on top of ",
      "Lisp",
      ", pioneering ",
      "statically typed",
      " ",
      "functional programming",
      " languages.",
      "\n",
      "Each of these languages spawned descendants, and most modern programming languages count at least one of them in their ancestry.\n",
      "The 1960s and 1970s also saw considerable debate over the merits of ",
      "structured programming",
      ", and whether programming languages should be designed to support it.",
      "[39]",
      " ",
      "Edsger Dijkstra",
      ", in a famous 1968 letter published in the ",
      "Communications of the ACM",
      ", argued that ",
      "Goto",
      " statements should be eliminated from all \"higher level\" programming languages.",
      "[40]",
      "\n",
      "\n",
      "Consolidation and growth",
      "[",
      "edit",
      "]",
      "\n",
      "  ",
      "A selection of textbooks that teach programming, in languages both popular and obscure. These are only a few of the thousands of programming languages and dialects that have been designed in history.",
      "\n",
      "The 1980s were years of relative consolidation. ",
      "C++",
      " combined object-oriented and systems programming. The United States government standardized ",
      "Ada",
      ", a systems programming language derived from ",
      "Pascal",
      " and intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called ",
      "\"fifth-generation\" languages",
      " that incorporated logic programming constructs.",
      "[41]",
      " The functional languages community moved to standardize ",
      "ML",
      " and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decades.\n",
      "One important trend in language design for programming large-scale systems during the 1980s was an increased focus on the use of ",
      "modules",
      " or large-scale organizational units of code. ",
      "Modula-2",
      ", Ada, and ML all developed notable module systems in the 1980s, which were often wedded to ",
      "generic programming",
      " constructs.",
      "[42]",
      "\n",
      "The rapid growth of the ",
      "Internet",
      " in the mid-1990s created opportunities for new languages. ",
      "Perl",
      ", originally a Unix scripting tool first released in 1987, became common in dynamic ",
      "websites",
      ". ",
      "Java",
      " came to be used for server-side programming, and bytecode virtual machines became popular again in commercial settings with their promise of \"",
      "Write once, run anywhere",
      "\" (",
      "UCSD Pascal",
      " had been popular for a time in the early 1980s). These developments were not fundamentally novel; rather, they were refinements of many existing languages and paradigms (although their syntax was often based on the C family of programming languages).\n",
      "Programming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity (",
      "mixins",
      ", ",
      "delegates",
      ", ",
      "aspects",
      "), and database integration such as Microsoft's ",
      "LINQ",
      ".\n",
      "Fourth-generation programming languages",
      " (4GL) are computer programming languages which aim to provide a higher level of abstraction of the internal computer hardware details than 3GLs. ",
      "Fifth-generation programming languages",
      " (5GL) are programming languages based on solving problems using constraints given to the program, rather than using an ",
      "algorithm",
      " written by a programmer.\n",
      "\n",
      "Elements",
      "[",
      "edit",
      "]",
      "\n",
      "All programming languages have some ",
      "primitive",
      " building blocks for the description of data and the processes or transformations applied to them (like the addition of two numbers or the selection of an item from a collection). These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively.\n",
      "\n",
      "Syntax",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Syntax (programming languages)",
      "\n",
      "  ",
      "Parse tree",
      " of ",
      "Python code",
      " with inset tokenization",
      "\n",
      "  ",
      "Syntax highlighting",
      " is often used to aid programmers in recognizing elements of source code. The language above is ",
      "Python",
      ".",
      "\n",
      "A programming language's surface form is known as its ",
      "syntax",
      ". Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, there are some programming languages which are more ",
      "graphical",
      " in nature, using visual relationships between symbols to specify a program.\n",
      "The syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either ",
      "formal",
      " or hard-coded in a ",
      "reference implementation",
      "). Since most languages are textual, this article discusses textual syntax.\n",
      "Programming language syntax is usually defined using a combination of ",
      "regular expressions",
      " (for ",
      "lexical",
      " structure) and ",
      "Backus\u2013Naur form",
      " (for ",
      "grammatical",
      " structure). Below is a simple grammar, based on ",
      "Lisp",
      ":\n",
      "\n",
      "expression ",
      "::=",
      " atom | list\natom       ",
      "::=",
      " number | symbol\nnumber     ",
      "::=",
      " [+-]?['0'-'9']+\nsymbol     ",
      "::=",
      " ['A'-'Z''a'-'z'].*\nlist       ",
      "::=",
      " '(' expression* ')'\n",
      "\n",
      "This grammar specifies the following:\n",
      "\n",
      "an ",
      "expression",
      " is either an ",
      "atom",
      " or a ",
      "list",
      ";",
      "\n",
      "an ",
      "atom",
      " is either a ",
      "number",
      " or a ",
      "symbol",
      ";",
      "\n",
      "a ",
      "number",
      " is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;",
      "\n",
      "a ",
      "symbol",
      " is a letter followed by zero or more of any characters (excluding whitespace); and",
      "\n",
      "a ",
      "list",
      " is a matched pair of parentheses, with zero or more ",
      "expressions",
      " inside it.",
      "\n",
      "The following are examples of well-formed token sequences in this grammar: ",
      "12345",
      ", ",
      "()",
      " and ",
      "(a b c232 (1))",
      ".\n",
      "Not all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit ",
      "undefined behavior",
      ". Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.\n",
      "Using ",
      "natural language",
      " as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:\n",
      "\n",
      "\"",
      "Colorless green ideas sleep furiously",
      ".\" is grammatically well-formed but has no generally accepted meaning.",
      "\n",
      "\"John is a married bachelor.\" is grammatically ",
      "well-formed",
      " but expresses a meaning that cannot be true.",
      "\n",
      "The following ",
      "C language",
      " fragment is syntactically correct, but performs operations that are not semantically defined (the operation ",
      "*p >> 4",
      " has no meaning for a value having a complex type and ",
      "p->im",
      " is not defined because the value of ",
      "p",
      " is the ",
      "null pointer",
      "):\n",
      "\n",
      "complex",
      " ",
      "*",
      "p",
      " ",
      "=",
      " ",
      "NULL",
      ";",
      "\n",
      "complex",
      " ",
      "abs_p",
      " ",
      "=",
      " ",
      "sqrt",
      "(",
      "*",
      "p",
      " ",
      ">>",
      " ",
      "4",
      " ",
      "+",
      " ",
      "p",
      "->",
      "im",
      ");",
      "\n",
      "\n",
      "If the ",
      "type declaration",
      " on the first line were omitted, the program would trigger an error on undefined variable \"p\" during compilation. However, the program would still be syntactically correct since type declarations provide only semantic information.\n",
      "The grammar needed to specify a programming language can be classified by its position in the ",
      "Chomsky hierarchy",
      ". The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are ",
      "context-free grammars",
      ".",
      "[43]",
      " Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an ",
      "undecidable problem",
      ", and generally blur the distinction between parsing and execution.",
      "[44]",
      " In contrast to ",
      "Lisp's macro system",
      " and Perl's ",
      "BEGIN",
      " blocks, which may contain general computations, C macros are merely string replacements and do not require code execution.",
      "[45]",
      "\n",
      "\n",
      "Semantics",
      "[",
      "edit",
      "]",
      "\n",
      "The term ",
      "semantics",
      " refers to the meaning of languages, as opposed to their form (",
      "syntax",
      ").\n",
      "\n",
      "Static semantics",
      "[",
      "edit",
      "]",
      "\n",
      "The static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms.",
      "[3]",
      " For compiled languages, static semantics essentially include those semantic rules that can be checked at compile time. Examples include checking that every ",
      "identifier",
      " is declared before it is used (in languages that require such declarations) or that the labels on the arms of a ",
      "case statement",
      " are distinct.",
      "[46]",
      " Many important restrictions of this type, like checking that identifiers are used in the appropriate context (e.g. not adding an integer to a function name), or that ",
      "subroutine",
      " calls have the appropriate number and type of arguments, can be enforced by defining them as rules in a ",
      "logic",
      " called a ",
      "type system",
      ". Other forms of ",
      "static analyses",
      " like ",
      "data flow analysis",
      " may also be part of static semantics. Newer programming languages like ",
      "Java",
      " and ",
      "C#",
      " have ",
      "definite assignment analysis",
      ", a form of data flow analysis, as part of their static semantics.\n",
      "\n",
      "Dynamic semantics",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Semantics of programming languages",
      "\n",
      "Once data has been specified, the machine must be instructed to perform operations on the data. For example, the semantics may define the ",
      "strategy",
      " by which expressions are evaluated to values, or the manner in which ",
      "control structures",
      " conditionally execute ",
      "statements",
      ". The ",
      "dynamic semantics",
      " (also known as ",
      "execution semantics",
      ") of a language defines how and when the various constructs of a language should produce a program behavior. There are many ways of defining execution semantics. Natural language is often used to specify the execution semantics of languages commonly used in practice. A significant amount of academic research went into ",
      "formal semantics of programming languages",
      ", which allow execution semantics to be specified in a formal manner. Results from this field of research have seen limited application to programming language design and implementation outside academia.\n",
      "\n",
      "Type system",
      "[",
      "edit",
      "]",
      "\n",
      "Main articles: ",
      "Data type",
      ", ",
      "Type system",
      ", and ",
      "Type safety",
      "\n",
      "A type system defines how a programming language classifies values and expressions into ",
      "types",
      ", how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Any ",
      "decidable",
      " type system involves a trade-off: while it rejects many incorrect programs, it can also prohibit some correct, albeit unusual programs. In order to bypass this downside, a number of languages have ",
      "type loopholes",
      ", usually unchecked ",
      "casts",
      " that may be used by the programmer to explicitly allow a normally disallowed operation between different types. In most typed languages, the type system is used only to ",
      "type check",
      " programs, but a number of languages, usually functional ones, ",
      "infer types",
      ", relieving the programmer from the need to write type annotations. The formal design and study of type systems is known as ",
      "type theory",
      ".\n",
      "\n",
      "Typed versus untyped languages",
      "[",
      "edit",
      "]",
      "\n",
      "A language is ",
      "typed",
      " if the specification of every operation defines types of data to which the operation is applicable.",
      "[47]",
      " For example, the data represented by ",
      "\"this text between the quotes\"",
      " is a ",
      "string",
      ", and in many programming languages dividing a number by a string has no meaning and will not be executed. The invalid operation may be detected when the program is compiled (\"static\" type checking) and will be rejected by the compiler with a compilation error message, or it may be detected while the program is running (\"dynamic\" type checking), resulting in a run-time ",
      "exception",
      ". Many languages allow a function called an exception handler to handle this exception and, for example, always return \"-1\" as the result.\n",
      "A special case of typed languages are the ",
      "single-typed",
      " languages. These are often scripting or markup languages, such as ",
      "REXX",
      " or ",
      "SGML",
      ", and have only one data type",
      "[",
      "dubious",
      " ",
      " \u2013 ",
      "discuss",
      "]",
      "\u2013\u2014most commonly character strings which are used for both symbolic and numeric data.\n",
      "In contrast, an ",
      "untyped language",
      ", such as most ",
      "assembly languages",
      ", allows any operation to be performed on any data, generally sequences of bits of various lengths.",
      "[47]",
      " High-level untyped languages include ",
      "BCPL",
      ", ",
      "Tcl",
      ", and some varieties of ",
      "Forth",
      ".\n",
      "In practice, while few languages are considered typed from the ",
      "type theory",
      " (verifying or rejecting all operations), most modern languages offer a degree of typing.",
      "[47]",
      " Many production languages provide means to bypass or subvert the type system, trading type-safety for finer control over the program's execution (see ",
      "casting",
      ").\n",
      "\n",
      "Static versus dynamic typing",
      "[",
      "edit",
      "]",
      "\n",
      "In ",
      "static typing",
      ", all expressions have their types determined prior to when the program is executed, typically at compile-time. For example, 1 and (2+2) are integer expressions; they cannot be passed to a function that expects a string, or stored in a variable that is defined to hold dates.",
      "[47]",
      "\n",
      "Statically typed languages can be either ",
      "manifestly typed",
      " or ",
      "type-inferred",
      ". In the first case, the programmer must explicitly write types at certain textual positions (for example, at variable ",
      "declarations",
      "). In the second case, the compiler ",
      "infers",
      " the types of expressions and declarations based on context. Most mainstream statically typed languages, such as ",
      "C++",
      ", ",
      "C#",
      " and ",
      "Java",
      ", are manifestly typed. Complete type inference has traditionally been associated with less mainstream languages, such as ",
      "Haskell",
      " and ",
      "ML",
      ". However, many manifestly typed languages support partial type inference; for example, ",
      "C++",
      ", ",
      "Java",
      " and ",
      "C#",
      " all infer types in certain limited cases.",
      "[48]",
      " Additionally, some programming languages allow for some types to be automatically converted to other types; for example, an int can be used where the program expects a float.\n",
      "Dynamic typing",
      ", also called ",
      "latent typing",
      ", determines the type-safety of operations at run time; in other words, types are associated with ",
      "run-time values",
      " rather than ",
      "textual expressions",
      ".",
      "[47]",
      " As with type-inferred languages, dynamically typed languages do not require the programmer to write explicit type annotations on expressions. Among other things, this may permit a single variable to refer to values of different types at different points in the program execution. However, type ",
      "errors",
      " cannot be automatically detected until a piece of code is actually executed, potentially making ",
      "debugging",
      " more difficult. ",
      "Lisp",
      ", ",
      "Smalltalk",
      ", ",
      "Perl",
      ", ",
      "Python",
      ", ",
      "JavaScript",
      ", and ",
      "Ruby",
      " are all examples of dynamically typed languages.\n",
      "\n",
      "Weak and strong typing",
      "[",
      "edit",
      "]",
      "\n",
      "Weak typing",
      " allows a value of one type to be treated as another, for example treating a ",
      "string",
      " as a number.",
      "[47]",
      " This can occasionally be useful, but it can also allow some kinds of program faults to go undetected at ",
      "compile time",
      " and even at ",
      "run time",
      ".\n",
      "Strong typing",
      " prevents these program faults. An attempt to perform an operation on the wrong type of value raises an error.",
      "[47]",
      " Strongly typed languages are often termed ",
      "type-safe",
      " or ",
      "safe",
      ".\n",
      "An alternative definition for \"weakly typed\" refers to languages, such as ",
      "Perl",
      " and ",
      "JavaScript",
      ", which permit a large number of implicit type conversions. In JavaScript, for example, the expression ",
      "2 * x",
      " implicitly converts ",
      "x",
      " to a number, and this conversion succeeds even if ",
      "x",
      " is ",
      "null",
      ", ",
      "undefined",
      ", an ",
      "Array",
      ", or a string of letters. Such implicit conversions are often useful, but they can mask programming errors.\n",
      "Strong",
      " and ",
      "static",
      " are now generally considered orthogonal concepts, but usage in the literature differs. Some use the term ",
      "strongly typed",
      " to mean ",
      "strongly, statically typed",
      ", or, even more confusingly, to mean simply ",
      "statically typed",
      ". Thus ",
      "C",
      " has been called both strongly typed and weakly, statically typed.",
      "[49]",
      "[50]",
      "\n",
      "It may seem odd to some professional programmers that C could be \"weakly, statically typed\". However, notice that the use of the generic pointer, the ",
      "void*",
      " pointer, does allow for casting of pointers to other pointers without needing to do an explicit cast. This is extremely similar to somehow casting an array of bytes to any kind of datatype in C without using an explicit cast, such as ",
      "(int)",
      " or ",
      "(char)",
      ".\n",
      "\n",
      "Standard library and run-time system",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Standard library",
      "\n",
      "Most programming languages have an associated core ",
      "library",
      " (sometimes known as the 'standard library', especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.\n",
      "The line between a language and its core library differs from language to language. In some cases, the language designers may treat the library as a separate entity from the language. However, a language's core library is often treated as part of the language by its users, and some language specifications even require that this library be made available in all implementations. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in ",
      "Java",
      ", a string literal is defined as an instance of the ",
      "java.lang.String",
      " class; similarly, in ",
      "Smalltalk",
      ", an ",
      "anonymous function",
      " expression (a \"block\") constructs an instance of the library's ",
      "BlockContext",
      " class. Conversely, ",
      "Scheme",
      " contains multiple coherent subsets that suffice to construct the rest of the language as library macros, and so the language designers do not even bother to say which portions of the language must be implemented as language constructs, and which must be implemented as parts of a library.\n",
      "\n",
      "Design and implementation",
      "[",
      "edit",
      "]",
      "\n",
      "Programming languages share properties with natural languages related to their purpose as vehicles for communication, having a syntactic form separate from its semantics, and showing ",
      "language families",
      " of related languages branching one from another.",
      "[51]",
      "[52]",
      " But as artificial constructs, they also differ in fundamental ways from languages that have evolved through usage. A significant difference is that a programming language can be fully described and studied in its entirety, since it has a precise and finite definition.",
      "[53]",
      " By contrast, natural languages have changing meanings given by their users in different communities. While ",
      "constructed languages",
      " are also artificial languages designed from the ground up with a specific purpose, they lack the precise and complete semantic definition that a programming language has.\n",
      "Many programming languages have been designed from scratch, altered to meet new needs, and combined with other languages. Many have eventually fallen into disuse. Although there have been attempts to design one \"universal\" programming language that serves all purposes, all of them have failed to be generally accepted as filling this role.",
      "[54]",
      " The need for diverse programming languages arises from the diversity of contexts in which languages are used:\n",
      "\n",
      "Programs range from tiny scripts written by individual hobbyists to huge systems written by hundreds of ",
      "programmers",
      ".",
      "\n",
      "Programmers range in expertise from novices who need simplicity above all else, to experts who may be comfortable with considerable complexity.",
      "\n",
      "Programs must balance speed, size, and simplicity on systems ranging from ",
      "microcontrollers",
      " to ",
      "supercomputers",
      ".",
      "\n",
      "Programs may be written once and not change for generations, or they may undergo continual modification.",
      "\n",
      "Programmers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language.",
      "\n",
      "One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of ",
      "abstraction",
      ". The earliest programming languages were tied very closely to the underlying hardware of the computer. As new programming languages have developed, features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. This lets them write more functionality per time unit.",
      "[55]",
      "\n",
      "\n",
      "Natural language programming",
      " has been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. ",
      "Edsger W. Dijkstra",
      " took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed ",
      "natural language programming",
      " as \"foolish\".",
      "[56]",
      " ",
      "Alan Perlis",
      " was similarly dismissive of the idea.",
      "[57]",
      " Hybrid approaches have been taken in ",
      "Structured English",
      " and ",
      "SQL",
      ".\n",
      "A language's designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language ",
      "specification",
      " and ",
      "implementation",
      ".\n",
      "\n",
      "Specification",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Programming language specification",
      "\n",
      "The specification of a programming language is an artifact that the language ",
      "users",
      " and the ",
      "implementors",
      " can use to agree upon whether a piece of ",
      "source code",
      " is a valid ",
      "program",
      " in that language, and if so what its behavior shall be.\n",
      "A programming language specification can take several forms, including the following:\n",
      "\n",
      "An explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in ",
      "natural language",
      " (e.g., as in the ",
      "C language",
      "), or a ",
      "formal semantics",
      " (e.g., as in ",
      "Standard ML",
      "[58]",
      " and ",
      "Scheme",
      "[59]",
      " specifications).",
      "\n",
      "A description of the behavior of a ",
      "translator",
      " for the language (e.g., the ",
      "C++",
      " and ",
      "Fortran",
      " specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or a formal language.",
      "\n",
      "A ",
      "reference",
      " or ",
      "model",
      " implementation",
      ", sometimes ",
      "written in the language being specified",
      " (e.g., ",
      "Prolog",
      " or ",
      "ANSI REXX",
      "[60]",
      "). The syntax and semantics of the language are explicit in the behavior of the reference implementation.",
      "\n",
      "Implementation",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Programming language implementation",
      "\n",
      "An ",
      "implementation",
      " of a programming language provides a way to write programs in that language and execute them on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: ",
      "compilation",
      " and ",
      "interpretation",
      ". It is generally possible to implement a language using either technique.\n",
      "The output of a ",
      "compiler",
      " may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting. For instance, some implementations of ",
      "BASIC",
      " compile and then execute the source a line at a time.\n",
      "Programs that are executed directly on the hardware usually run much faster than those that are interpreted in software.",
      "[61]",
      "[",
      "better\u00a0source\u00a0needed",
      "]",
      "\n",
      "One technique for improving the performance of interpreted programs is ",
      "just-in-time compilation",
      ". Here the ",
      "virtual machine",
      ", just before execution, translates the blocks of ",
      "bytecode",
      " which are going to be used to machine code, for direct execution on the hardware.\n",
      "\n",
      "Proprietary languages",
      "[",
      "edit",
      "]",
      "\n",
      "This section ",
      "does not ",
      "cite",
      " any ",
      "sources",
      ".",
      " Please help ",
      "improve this section",
      " by ",
      "adding citations to reliable sources",
      ". Unsourced material may be challenged and ",
      "removed",
      ".",
      "  ",
      "(",
      "July 2015",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "Although most of the most commonly used programming languages have fully open specifications and implementations, many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor, which may claim that such a proprietary language is their intellectual property. Proprietary programming languages are commonly ",
      "domain specific languages",
      " or internal ",
      "scripting languages",
      " for a single product; some proprietary languages are used only internally within a vendor, while others are available to external users.\n",
      "Some programming languages exist on the border between proprietary and open; for example, ",
      "Oracle Corporation",
      " asserts proprietary rights to some aspects of the ",
      "Java programming language",
      ",",
      "[62]",
      " and ",
      "Microsoft",
      "'s ",
      "C#",
      " programming language, which has open implementations of most parts of the system, also has ",
      "Common Language Runtime",
      " (CLR) as a closed environment.",
      "[63]",
      "\n",
      "Many proprietary languages are widely used, in spite of their proprietary nature; examples include ",
      "MATLAB",
      ", ",
      "VBScript",
      ", and ",
      "Wolfram Language",
      ".  Some languages may make the transition from closed to open; for example, ",
      "Erlang",
      " was originally an Ericsson's internal programming language.",
      "[64]",
      "\n",
      "\n",
      "Use",
      "[",
      "edit",
      "]",
      "\n",
      "Thousands of different programming languages have been created, mainly in the computing field.",
      "[65]",
      "\nIndividual software projects commonly use five programming languages or more.",
      "[66]",
      "\n",
      "Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers \"do exactly what they are told to do\", and cannot \"understand\" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program. On the other hand, ideas about an algorithm can be communicated to humans without the precision required for execution by using ",
      "pseudocode",
      ", which interleaves natural language with code written in a programming language.\n",
      "A programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A ",
      "programmer",
      " uses the ",
      "abstractions",
      " present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called ",
      "primitives",
      ").",
      "[67]",
      " ",
      "Programming",
      " is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment.\n",
      "Programs for a computer might be ",
      "executed",
      " in a ",
      "batch process",
      " without human interaction, or a user might type ",
      "commands",
      " in an ",
      "interactive session",
      " of an ",
      "interpreter",
      ". In this case the \"commands\" are simply programs, whose execution is chained together. When a language can run its commands through an interpreter (such as a ",
      "Unix shell",
      " or other ",
      "command-line interface",
      "), without compiling, it is called a ",
      "scripting language",
      ".",
      "[68]",
      "\n",
      "\n",
      "Measuring language usage",
      "[",
      "edit",
      "]",
      "\n",
      "Main article: ",
      "Measuring programming language popularity",
      "\n",
      "Determining which is the most widely used programming language is difficult since the definition of usage varies by context. One language may occupy the greater number of programmer hours, a different one has more lines of code, and a third may consume the most CPU time. Some languages are very popular for particular kinds of applications. For example, ",
      "COBOL",
      " is still strong in the corporate data center, often on large ",
      "mainframes",
      ";",
      "[69]",
      "[70]",
      " ",
      "Fortran",
      " in scientific and engineering applications; ",
      "Ada",
      " in aerospace, transportation, military, real-time and embedded applications; and ",
      "C",
      " in embedded applications and operating systems. Other languages are regularly used to write many different kinds of applications.\n",
      "Various methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed:\n",
      "\n",
      "counting the number of job advertisements that mention the language",
      "[71]",
      "\n",
      "the number of books sold that teach or describe the language",
      "[72]",
      "\n",
      "estimates of the number of existing lines of code written in the language\u00a0\u2013  which may underestimate languages not often found in public searches",
      "[73]",
      "\n",
      "counts of language references (i.e., to the name of the language) found using a web search engine.",
      "\n",
      "Combining and averaging information from various internet sites, stackify.com reported the ten most popular programming languages as (in descending order by overall popularity): ",
      "Java",
      ", ",
      "C",
      ", ",
      "C++",
      ", ",
      "Python",
      ", ",
      "C#",
      ", ",
      "JavaScript",
      ", ",
      "VB .NET",
      ", ",
      "R",
      ", ",
      "PHP",
      ", and ",
      "MATLAB",
      ".",
      "[74]",
      "\n",
      "\n",
      "Dialects, flavors and implementations",
      "[",
      "edit",
      "]",
      "\n",
      "A ",
      "dialect",
      " of a programming language or a ",
      "data exchange language",
      " is a (relatively small) variation or extension of the language that does not change its intrinsic nature. With languages such as ",
      "Scheme",
      " and ",
      "Forth",
      ", standards may be considered insufficient, inadequate or illegitimate by implementors, so often they will deviate from the standard, making a new ",
      "dialect",
      ". In other cases, a dialect is created for use in a ",
      "domain-specific language",
      ", often a subset. In the ",
      "Lisp",
      " world, most languages that use basic ",
      "S-expression",
      " syntax and Lisp-like semantics are considered Lisp dialects, although they vary wildly, as do, say, ",
      "Racket",
      " and ",
      "Clojure",
      ". As it is common for one language to have several dialects, it can become quite difficult for an inexperienced programmer to find the right documentation. The ",
      "BASIC programming language",
      " has ",
      "many dialects",
      ".\n",
      "The explosion of Forth dialects led to the saying \"If you've seen one Forth... you've seen ",
      "one",
      " Forth.\"\n",
      "\n",
      "Taxonomies",
      "[",
      "edit",
      "]",
      "\n",
      "Further information: ",
      "Categorical list of programming languages",
      "\n",
      "There is no overarching classification scheme for programming languages. A given programming language does not usually have a single ancestor language. Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time. Ideas that originate in one language will diffuse throughout a family of related languages, and then leap suddenly across familial gaps to appear in an entirely different family.\n",
      "The task is further complicated by the fact that languages can be classified along multiple axes. For example, Java is both an object-oriented language (because it encourages object-oriented organization) and a concurrent language (because it contains built-in constructs for running multiple ",
      "threads",
      " in parallel). ",
      "Python",
      " is an object-oriented ",
      "scripting language",
      ".\n",
      "In broad strokes, programming languages divide into ",
      "programming paradigms",
      " and a classification by ",
      "intended domain of use,",
      " with ",
      "general-purpose programming languages",
      " distinguished from ",
      "domain-specific programming languages",
      ". Traditionally, programming languages have been regarded as describing computation in terms of imperative sentences, i.e. issuing commands. These are generally called ",
      "imperative programming",
      " languages. A great deal of research in programming languages has been aimed at blurring the distinction between a program as a set of instructions and a program as an assertion about the desired answer, which is the main feature of ",
      "declarative programming",
      ".",
      "[75]",
      " More refined paradigms include ",
      "procedural programming",
      ", ",
      "object-oriented programming",
      ", ",
      "functional programming",
      ", and ",
      "logic programming",
      "; some languages are hybrids of paradigms or multi-paradigmatic. An ",
      "assembly language",
      " is not so much a paradigm as a direct model of an underlying machine architecture. By purpose, programming languages might be considered general purpose, ",
      "system programming languages",
      ", scripting languages, domain-specific languages, or concurrent/distributed languages (or a combination of these).",
      "[76]",
      " Some general purpose languages were designed largely with educational goals.",
      "[77]",
      "\n",
      "A programming language may also be classified by factors unrelated to programming paradigm. For instance, most programming languages use ",
      "English language",
      " keywords, while ",
      "a minority do not",
      ". Other languages may be classified as being ",
      "deliberately esoteric",
      " or not.\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "\n",
      "Comparison of programming languages (basic instructions)",
      "\n",
      "Comparison of programming languages",
      "\n",
      "Computer programming",
      "\n",
      "Computer science",
      " and ",
      "Outline of computer science",
      "\n",
      "Domain-specific language",
      "\n",
      "Domain-specific modelling",
      "\n",
      "Educational programming language",
      "\n",
      "Esoteric programming language",
      "\n",
      "Extensible programming",
      "\n",
      "Category:Extensible syntax programming languages",
      "\n",
      "Invariant based programming",
      "\n",
      "List of BASIC dialects",
      "\n",
      "Lists of programming languages",
      "\n",
      "List of programming language researchers",
      "\n",
      "Programming languages used in most popular websites",
      "\n",
      "Language-oriented programming",
      "\n",
      "Logic programming",
      "\n",
      "Literate programming",
      "\n",
      "Metaprogramming",
      "\n",
      "Ruby (programming language) \u00a7\u00a0Metaprogramming",
      "\n",
      "Modeling language",
      "\n",
      "Programming language theory",
      "\n",
      "Pseudocode",
      "\n",
      "Rebol \u00a7\u00a0Dialects",
      "\n",
      "Reflection",
      "\n",
      "Scientific programming language",
      "\n",
      "Scripting language",
      "\n",
      "Software engineering",
      " and ",
      "List of software engineering topics",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Koetsier, Teun (May 2001). \"On the prehistory of programmable machines; musical automata, looms, calculators\". ",
      "Mechanism and Machine Theory",
      ". ",
      "36",
      " (5): 589\u2013603. ",
      "doi",
      ":",
      "10.1016/S0094-114X(01)00005-2",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "Ettinger, James (2004) ",
      "Jacquard's Web",
      ", Oxford University Press",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "Aaby, Anthony (2004). ",
      "Introduction to Programming Languages",
      ". Archived from ",
      "the original",
      " on 8 November 2012",
      ". Retrieved ",
      "29 September",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "In mathematical terms, this means the programming language is ",
      "Turing-complete",
      " ",
      "MacLennan, Bruce J. (1987). ",
      "Principles of Programming Languages",
      ". Oxford University Press. p.\u00a01. ",
      "ISBN",
      "\u00a0",
      "978-0-19-511306-8",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "ACM",
      " SIGPLAN (2003). ",
      "\"Bylaws of the Special Interest Group on Programming Languages of the Association for Computing Machinery\"",
      ". ",
      "Archived",
      " from the original on 22 June 2006.",
      ", \"The scope of SIGPLAN is the theory, design, implementation, description, and application of computer programming languages \u2013 languages that permit the specification of a variety of different computations, thereby providing the user with significant control (immediate or delayed) over the computer's operation.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Dean, Tom (2002). ",
      "\"Programming Robots\"",
      ". ",
      "Building Intelligent Robots",
      ". Brown University Department of Computer Science. ",
      "Archived",
      " from the original on 29 October 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "R. Narasimahan, Programming Languages and Computers: A Unified Metatheory, pp. 189\u2014247 in Franz Alt, Morris Rubinoff (eds.) Advances in computers, Volume 8, Academic Press, 1994, ",
      "ISBN",
      "\u00a0",
      "0-12-012108-5",
      ", p.193\u00a0: \"a complete specification of a programming language must, by definition, include a specification of a processor\u2014idealized, if you will\u2014for that language.\" [the source cites many references to support this statement]",
      "\n",
      "\n",
      "^",
      " ",
      "Ben Ari, Mordechai (1996). ",
      "Understanding Programming Languages",
      ". John Wiley and Sons. ",
      "Programs and languages can be defined as purely formal mathematical objects. However, more people are interested in programs than in other mathematical objects such as groups, precisely because it is possible to use the program\u2014the sequence of symbols\u2014to control the execution of a computer. While we highly recommend the study of the theory of programming, this text will generally limit itself to the study of programs as they are executed on a computer.",
      "\n",
      "\n",
      "^",
      " ",
      "David A. Schmidt, ",
      "The structure of typed programming languages",
      ", MIT Press, 1994, ",
      "ISBN",
      "\u00a0",
      "0-262-19349-3",
      ", p. 32",
      "\n",
      "\n",
      "^",
      " ",
      "Pierce, Benjamin (2002). ",
      "Types and Programming Languages",
      ". MIT Press. p.\u00a0",
      "339",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-262-16209-8",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Digital Equipment Corporation. ",
      "\"Information Technology \u2013 Database Language SQL (Proposed revised text of DIS 9075)\"",
      ". ",
      "ISO/IEC 9075:1992, Database Language SQL",
      ". ",
      "Archived",
      " from the original on 21 June 2006",
      ". Retrieved ",
      "29 June",
      " 2006",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "The Charity Development Group (December 1996). ",
      "\"The CHARITY Home Page\"",
      ". ",
      "Archived",
      " from the original on 18 July 2006.",
      ", \"Charity is a categorical programming language...\", \"All Charity computations terminate.\"",
      "\n",
      "\n",
      "^",
      " ",
      "XML in 10 points",
      " ",
      "Archived",
      " 6 September 2009 at the ",
      "Wayback Machine",
      " ",
      "W3C",
      ", 1999, \"XML is not a programming language.\"",
      "\n",
      "\n",
      "^",
      " ",
      "Powell, Thomas (2003). ",
      "HTML & XHTML: the complete reference",
      ". McGraw-Hill. p.\u00a025. ",
      "ISBN",
      "\u00a0",
      "978-0-07-222942-4",
      ". ",
      "HTML is not a programming language.",
      "\n",
      "\n",
      "^",
      " ",
      "Dykes, Lucinda; Tittel, Ed (2005). ",
      "XML For Dummies",
      " (4th ed.). Wiley. p.\u00a0",
      "20",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-7645-8845-7",
      ". ",
      "...it's a markup language, not a programming language.",
      "\n",
      "\n",
      "^",
      " ",
      "\"What kind of language is XSLT?\"",
      ". IBM.com. 20 April 2005. ",
      "Archived",
      " from the original on 11 May 2011.",
      "\n",
      "\n",
      "^",
      " ",
      "\"XSLT is a Programming Language\"",
      ". Msdn.microsoft.com. ",
      "Archived",
      " from the original on 3 February 2011",
      ". Retrieved ",
      "3 December",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Scott, Michael (2006). ",
      "Programming Language Pragmatics",
      ". ",
      "Morgan Kaufmann",
      ". p.\u00a0",
      "802",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-12-633951-2",
      ". ",
      "XSLT, though highly specialized to the transformation of XML, is a Turing-complete programming language.",
      "\n",
      "\n",
      "^",
      " ",
      "Oetiker, Tobias; Partl, Hubert; Hyna, Irene; Schlegl, Elisabeth (20 June 2016). ",
      "\"The Not So Short Introduction to LATEX 2\u03b5\"",
      " ",
      "(Version 5.06)",
      ". ",
      "tobi.oetiker.ch",
      ". pp.\u00a01\u2013157. ",
      "Archived",
      " ",
      "(PDF)",
      " from the original on 14 March 2017.",
      "\n",
      "\n",
      "^",
      " ",
      "Syropoulos, Apostolos; Antonis Tsolomitis; Nick Sofroniou (2003). ",
      "Digital typography using LaTeX",
      ". Springer-Verlag. p.\u00a0",
      "213",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-387-95217-8",
      ". ",
      "TeX is not only an excellent typesetting engine but also a real programming language.",
      "\n",
      "\n",
      "^",
      " ",
      "Robert A. Edmunds, The Prentice-Hall standard glossary of computer terminology, Prentice-Hall, 1985, p. 91",
      "\n",
      "\n",
      "^",
      " ",
      "Pascal Lando, Anne Lapujade, Gilles Kassel, and Fr\u00e9d\u00e9ric F\u00fcrst, ",
      "Towards a General Ontology of Computer Programs",
      " ",
      "Archived",
      " 7 July 2015 at the ",
      "Wayback Machine",
      ", ",
      "ICSOFT 2007",
      " ",
      "Archived",
      " 27 April 2010 at the ",
      "Wayback Machine",
      ", pp. 163\u2013170",
      "\n",
      "\n",
      "^",
      " ",
      "S.K. Bajpai, ",
      "Introduction To Computers And C Programming",
      ", New Age International, 2007, ",
      "ISBN",
      "\u00a0",
      "81-224-1379-X",
      ", p. 346",
      "\n",
      "\n",
      "^",
      " ",
      "R. Narasimahan, Programming Languages and Computers: A Unified Metatheory, pp. 189\u2014247 in Franz Alt, Morris Rubinoff (eds.) Advances in computers, Volume 8, Academic Press, 1994, ",
      "ISBN",
      "\u00a0",
      "0-12-012108-5",
      ", p.215: \"[...] the model [...] for computer languages differs from that [...] for programming languages in only two respects. In a computer language, there are only finitely many names\u2014or registers\u2014which can assume only finitely many values\u2014or states\u2014and these states are not further distinguished in terms of any other attributes. [author's footnote:] This may sound like a truism but its implications are far reaching. For example, it would imply that any model for programming languages, by fixing certain of its parameters or features, should be reducible in a natural way to a model for computer languages.\"",
      "\n",
      "\n",
      "^",
      " ",
      "John C. Reynolds, \"Some thoughts on teaching programming and programming languages\", ",
      "SIGPLAN",
      " Notices",
      ", Volume 43, Issue 11, November 2008, p.109",
      "\n",
      "\n",
      "^",
      " ",
      "\n",
      "Rojas, Ra\u00fal",
      ", et al. (2000). \"Plankalk\u00fcl: The First High-Level Programming Language and its Implementation\". Institut f\u00fcr Informatik, Freie Universit\u00e4t Berlin, Technical Report B-3/2000. ",
      "(full text)",
      " ",
      "Archived",
      " 18 October 2014 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Sebesta, W.S Concepts of Programming languages. 2006;M6 14:18 pp.44. ",
      "ISBN",
      "\u00a0",
      "0-321-33025-0",
      "\n",
      "\n",
      "^",
      " ",
      "Knuth, Donald E.; Pardo, Luis Trabb. \"Early development of programming languages\". ",
      "Encyclopedia of Computer Science and Technology",
      ". ",
      "7",
      ": 419\u2013493.",
      "\n",
      "\n",
      "^",
      " ",
      "Peter J. Bentley (2012). ",
      "Digitized: The Science of Computers and how it Shapes Our World",
      ". Oxford University Press. p.\u00a087. ",
      "ISBN",
      "\u00a0",
      "9780199693795",
      ". ",
      "Archived",
      " from the original on 29 August 2016.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Fortran creator John Backus dies - Tech and gadgets\"",
      ". NBC News. 20 March 2007",
      ". Retrieved ",
      "25 April",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CSC-302 99S\u00a0: Class 02: A Brief History of Programming Languages\"",
      ". Math.grin.edu. ",
      "Archived",
      " from the original on 15 July 2010",
      ". Retrieved ",
      "25 April",
      " 2010",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Eugene Loh (18 June 2010). ",
      "\"The Ideal HPC Programming Language\"",
      ". ",
      "Queue",
      ". ",
      "8",
      " (6). ",
      "Archived",
      " from the original on 4 March 2016.",
      "\n",
      "\n",
      "^",
      " ",
      "\"HPL \u2013 A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers\"",
      ". ",
      "Archived",
      " from the original on 15 February 2015",
      ". Retrieved ",
      "21 February",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hopper (1978) p.\u00a016.",
      "\n",
      "\n",
      "^",
      " ",
      "Sammet (1969) p.\u00a0316",
      "\n",
      "\n",
      "^",
      " ",
      "Sammet (1978) p.\u00a0204.",
      "\n",
      "\n",
      "^",
      " ",
      "Richard L. Wexelblat: ",
      "History of Programming Languages",
      ", Academic Press, 1981, chapter XIV.",
      "\n",
      "\n",
      "^",
      " ",
      "Fran\u00e7ois Labelle. ",
      "\"Programming Language Usage Graph\"",
      ". ",
      "SourceForge",
      ". ",
      "Archived",
      " from the original on 17 June 2006",
      ". Retrieved ",
      "21 June",
      " 2006",
      ".",
      ". This comparison analyzes trends in number of projects hosted by a popular community programming repository. During most years of the comparison, C leads by a considerable margin; in 2006, Java overtakes C, but the combination of C/C++ still leads considerably.",
      "\n",
      "\n",
      "^",
      " ",
      "Hayes, Brian (2006). \"The Semicolon Wars\". ",
      "American Scientist",
      ". ",
      "94",
      " (4): 299\u2013303. ",
      "doi",
      ":",
      "10.1511/2006.60.299",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dijkstra, Edsger W.",
      " (March 1968). ",
      "\"Go To Statement Considered Harmful\"",
      " ",
      "(PDF)",
      ". ",
      "Communications of the ACM",
      ". ",
      "11",
      " (3): 147\u2013148. ",
      "doi",
      ":",
      "10.1145/362929.362947",
      ". ",
      "S2CID",
      "\u00a0",
      "17469809",
      ". ",
      "Archived",
      " ",
      "(PDF)",
      " from the original on 13 May 2014.",
      "\n",
      "\n",
      "^",
      " ",
      "Tetsuro Fujise, Takashi Chikayama, Kazuaki Rokusawa, Akihiko Nakase (December 1994). \"KLIC: A Portable Implementation of KL1\" ",
      "Proc. of FGCS '94, ICOT",
      " Tokyo, December 1994. ",
      "\"Archived copy\"",
      ". Archived from ",
      "the original",
      " on 25 September 2006",
      ". Retrieved ",
      "9 October",
      " 2006",
      ".",
      "CS1 maint: archived copy as title (",
      "link",
      ")",
      " KLIC is a portable implementation of a concurrent logic programming language ",
      "KL1",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Jim Bender (15 March 2004). ",
      "\"Mini-Bibliography on Modules for Functional Programming Languages\"",
      ". ",
      "ReadScheme.org",
      ". ",
      "Archived",
      " from the original on 24 September 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "Michael Sipser",
      " (1996). ",
      "Introduction to the Theory of Computation",
      ". PWS Publishing. ",
      "ISBN",
      "\u00a0",
      "978-0-534-94728-6",
      ".",
      " Section 2.2: Pushdown Automata, pp.101\u2013114.",
      "\n",
      "\n",
      "^",
      " ",
      "Jeffrey Kegler, \"",
      "Perl and Undecidability",
      " ",
      "Archived",
      " 17 August 2009 at the ",
      "Wayback Machine",
      "\", ",
      "The Perl Review",
      ". Papers 2 and 3 prove, using respectively ",
      "Rice's theorem",
      " and direct reduction to the ",
      "halting problem",
      ", that the parsing of Perl programs is in general undecidable.",
      "\n",
      "\n",
      "^",
      " ",
      "Marty Hall, 1995, ",
      "Lecture Notes: Macros",
      " ",
      "Archived",
      " 6 August 2013 at the ",
      "Wayback Machine",
      ", ",
      "PostScript",
      " ",
      "version",
      " ",
      "Archived",
      " 17 August 2000 at the ",
      "Wayback Machine",
      "\n",
      "\n",
      "^",
      " ",
      "Michael Lee Scott, ",
      "Programming language pragmatics",
      ", Edition 2, Morgan Kaufmann, 2006, ",
      "ISBN",
      "\u00a0",
      "0-12-633951-1",
      ", p. 18\u201319",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "c",
      " ",
      "d",
      " ",
      "e",
      " ",
      "f",
      " ",
      "g",
      " ",
      "Andrew Cooke. ",
      "\"Introduction To Computer Languages\"",
      ". ",
      "Archived",
      " from the original on 15 August 2012",
      ". Retrieved ",
      "13 July",
      " 2012",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Specifically, instantiations of ",
      "generic",
      " types are inferred for certain expression forms. Type inference in Generic Java\u2014the research language that provided the basis for Java 1.5's bounded ",
      "parametric polymorphism",
      " extensions\u2014is discussed in two informal manuscripts from the Types mailing list: ",
      "Generic Java type inference is unsound",
      " ",
      "Archived",
      " 29 January 2007 at the ",
      "Wayback Machine",
      " (",
      "Alan Jeffrey",
      ", 17 December 2001) and ",
      "Sound Generic Java type inference",
      " ",
      "Archived",
      " 29 January 2007 at the ",
      "Wayback Machine",
      " (",
      "Martin Odersky",
      ", 15 January 2002). C#'s type system is similar to Java's, and uses a similar partial type inference scheme.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Revised Report on the Algorithmic Language Scheme\"",
      ". 20 February 1998. ",
      "Archived",
      " from the original on 14 July 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "Luca Cardelli",
      " and ",
      "Peter Wegner",
      ". ",
      "\"On Understanding Types, Data Abstraction, and Polymorphism\"",
      ". ",
      "Manuscript (1985)",
      ". ",
      "Archived",
      " from the original on 19 June 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "Steven R. Fischer, ",
      "A history of language",
      ", Reaktion Books, 2003, ",
      "ISBN",
      "\u00a0",
      "1-86189-080-X",
      ", p. 205",
      "\n",
      "\n",
      "^",
      " ",
      "\u00c9ric L\u00e9v\u00e9nez (2011). ",
      "\"Computer Languages History\"",
      ". ",
      "Archived",
      " from the original on 7 January 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "Jing Huang. ",
      "\"Artificial Language vs. Natural Language\"",
      ". ",
      "Archived",
      " from the original on 3 September 2009.",
      "\n",
      "\n",
      "^",
      " ",
      "IBM in first publishing PL/I, for example, rather ambitiously titled its manual ",
      "The universal programming language PL/I",
      " (IBM Library; 1966). The title reflected IBM's goals for unlimited subsetting capability: \"PL/I is designed in such a way that one can isolate subsets from it satisfying the requirements of particular applications.\" (",
      "\"PL/I\"",
      ". ",
      "Encyclopedia of Mathematics",
      ". ",
      "Archived",
      " from the original on 26 April 2012",
      ". Retrieved ",
      "29 June",
      " 2006",
      ".",
      "). ",
      "Ada",
      " and ",
      "UNCOL",
      " had similar early goals.",
      "\n",
      "\n",
      "^",
      " ",
      "Frederick P. Brooks, Jr.: ",
      "The Mythical Man-Month",
      ", Addison-Wesley, 1982, pp. 93\u201394",
      "\n",
      "\n",
      "^",
      " ",
      "Dijkstra, Edsger W. ",
      "On the foolishness of \"natural language programming.\"",
      " ",
      "Archived",
      " 20 January 2008 at the ",
      "Wayback Machine",
      " EWD667.",
      "\n",
      "\n",
      "^",
      " ",
      "Perlis, Alan (September 1982). ",
      "\"Epigrams on Programming\"",
      ". ",
      "SIGPLAN Notices Vol. 17, No. 9",
      ". pp.\u00a07\u201313. ",
      "Archived",
      " from the original on 17 January 1999.",
      "\n",
      "\n",
      "^",
      " ",
      "Milner, R.",
      "; ",
      "M. Tofte",
      "; ",
      "R. Harper",
      "; D. MacQueen (1997). ",
      "The Definition of Standard ML (Revised)",
      ". MIT Press. ",
      "ISBN",
      "\u00a0",
      "978-0-262-63181-5",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kelsey, Richard; William Clinger; Jonathan Rees (February 1998). ",
      "\"Section 7.2 Formal semantics\"",
      ". ",
      "Revised",
      "5",
      " Report on the Algorithmic Language Scheme",
      ". ",
      "Archived",
      " from the original on 6 July 2006.",
      "\n",
      "\n",
      "^",
      " ",
      "ANSI",
      " \u2013 Programming Language Rexx, X3-274.1996",
      "\n",
      "\n",
      "^",
      " ",
      "Steve, McConnell (2004). ",
      "Code complete",
      " (Second ed.). Redmond, Washington. pp.\u00a0",
      "590, 600",
      ". ",
      "ISBN",
      "\u00a0",
      "0735619670",
      ". ",
      "OCLC",
      "\u00a0",
      "54974573",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "See: ",
      "Oracle America, Inc. v. Google, Inc.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Guide to Programming Languages | ComputerScience.org\"",
      ". ",
      "ComputerScience.org",
      ". Retrieved ",
      "13 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The basics\"",
      ". ",
      "ibm.com",
      ". 10 May 2011",
      ". Retrieved ",
      "13 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"HOPL: an interactive Roster of Programming Languages\"",
      ". Australia: ",
      "Murdoch University",
      ". Archived from ",
      "the original",
      " on 20 February 2011",
      ". Retrieved ",
      "1 June",
      " 2009",
      ". ",
      "This site lists 8512 languages.",
      "\n",
      "\n",
      "^",
      " ",
      "Mayer, Philip; Bauer, Alexander (2015). ",
      "An empirical analysis of the utilization of multiple programming languages in open source projects",
      ". Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering \u2013 EASE '15. New York, NY, USA: ACM. pp.\u00a04:1\u20134:10. ",
      "doi",
      ":",
      "10.1145/2745802.2745805",
      ". ",
      "ISBN",
      "\u00a0",
      "978-1-4503-3350-4",
      ". ",
      "Results: We found (a) a mean number of 5 languages per project with a clearly dominant main general-purpose language and 5 often-used DSL types, (b) a significant influence of the size, number of commits, and the main language on the number of languages as well as no significant influence of age and number of contributors, and (c) three language ecosystems grouped around XML, Shell/Make, and HTML/CSS. Conclusions: Multi-language programming seems to be common in open-source projects and is a factor which must be dealt with in tooling and when assessing development and maintenance of such software systems.",
      "\n",
      "\n",
      "^",
      " ",
      "Abelson, Sussman, and Sussman. ",
      "\"Structure and Interpretation of Computer Programs\"",
      ". Archived from ",
      "the original",
      " on 26 February 2009",
      ". Retrieved ",
      "3 March",
      " 2009",
      ".",
      "CS1 maint: multiple names: authors list (",
      "link",
      ")",
      "\n",
      "\n",
      "^",
      " ",
      "Brown Vicki (1999). ",
      "\"Scripting Languages\"",
      ". ",
      "mactech.com",
      ". ",
      "Archived",
      " from the original on 2 December 2017.",
      "\n",
      "\n",
      "^",
      " ",
      "Georgina Swan (21 September 2009). ",
      "\"COBOL turns 50\"",
      ". computerworld.com.au. ",
      "Archived",
      " from the original on 19 October 2013",
      ". Retrieved ",
      "19 October",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ed Airey (3 May 2012). ",
      "\"7 Myths of COBOL Debunked\"",
      ". developer.com. ",
      "Archived",
      " from the original on 19 October 2013",
      ". Retrieved ",
      "19 October",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Nicholas Enticknap. ",
      "\"SSL/Computer Weekly IT salary survey: finance boom drives IT job growth\"",
      ". ",
      "Computer Weekly",
      ". ",
      "Archived",
      " from the original on 26 October 2011",
      ". Retrieved ",
      "14 June",
      " 2013",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Counting programming languages by book sales\"",
      ". Radar.oreilly.com. 2 August 2006. Archived from ",
      "the original",
      " on 17 May 2008.",
      "\n",
      "\n",
      "^",
      " ",
      "Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001",
      "\n",
      "\n",
      "^",
      " ",
      "\"Most Popular and Influential Programming Languages of 2018\"",
      ". stackify.com. 18 December 2017",
      ". Retrieved ",
      "29 August",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Carl A. Gunter, ",
      "Semantics of Programming Languages: Structures and Techniques",
      ", MIT Press, 1992, ",
      "ISBN",
      "\u00a0",
      "0-262-57095-5",
      ", p. 1",
      "\n",
      "\n",
      "^",
      " ",
      "\"TUNES: Programming Languages\"",
      ". ",
      "Archived",
      " from the original on 20 October 2007.",
      "\n",
      "\n",
      "^",
      " ",
      "Wirth, Niklaus",
      " (1993). \"Recollections about the development of Pascal\". ",
      "The second ACM SIGPLAN conference on History of programming languages - HOPL-II",
      ". ",
      "Proc. 2nd ACM SIGPLAN Conference on History of Programming Languages",
      ". ",
      "28",
      ". pp.\u00a0333\u2013342. ",
      "CiteSeerX",
      "\u00a0",
      "10.1.1.475.6989",
      ". ",
      "doi",
      ":",
      "10.1145/154766.155378",
      ". ",
      "ISBN",
      "\u00a0",
      "978-0-89791-570-0",
      ". ",
      "S2CID",
      "\u00a0",
      "9783524",
      ".",
      "\n",
      "\n",
      "\n",
      "Further reading",
      "[",
      "edit",
      "]",
      "\n",
      "See also: ",
      "History of programming languages \u00a7\u00a0Further reading",
      "\n",
      ".mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}",
      "\n",
      "Abelson, Harold",
      "; ",
      "Sussman, Gerald Jay",
      " (1996). ",
      "Structure and Interpretation of Computer Programs",
      " (2nd ed.). MIT Press. Archived from ",
      "the original",
      " on 9 March 2018.",
      "\n",
      "Raphael Finkel",
      ": ",
      "Advanced Programming Language Design",
      ", Addison Wesley 1995.",
      "\n",
      "Daniel P. Friedman",
      ", ",
      "Mitchell Wand",
      ", ",
      "Christopher T. Haynes",
      ": ",
      "Essentials of Programming Languages",
      ", The MIT Press 2001.",
      "\n",
      "Maurizio Gabbrielli and Simone Martini: \"Programming Languages: Principles and Paradigms\", Springer, 2010.",
      "\n",
      "David Gelernter",
      ", ",
      "Suresh Jagannathan",
      ": ",
      "Programming Linguistics",
      ", ",
      "The MIT Press",
      " 1990.",
      "\n",
      "Ellis Horowitz",
      " (ed.): ",
      "Programming Languages, a Grand Tour",
      " (3rd ed.), 1987.",
      "\n",
      "Ellis Horowitz: ",
      "Fundamentals of Programming Languages",
      ", 1989.",
      "\n",
      "Shriram Krishnamurthi",
      ": ",
      "Programming Languages: Application and Interpretation",
      ", ",
      "online publication",
      ".",
      "\n",
      "Bruce J. MacLennan",
      ": ",
      "Principles of Programming Languages: Design, Evaluation, and Implementation",
      ", ",
      "Oxford University Press",
      " 1999.",
      "\n",
      "John C. Mitchell",
      ": ",
      "Concepts in Programming Languages",
      ", ",
      "Cambridge University Press",
      " 2002.",
      "\n",
      "Benjamin C. Pierce",
      ": ",
      "Types and Programming Languages",
      ", The MIT Press 2002.",
      "\n",
      "Terrence W. Pratt",
      " and ",
      "Marvin V. Zelkowitz",
      ": ",
      "Programming Languages: Design and Implementation",
      " (4th ed.), Prentice Hall 2000.",
      "\n",
      "Peter H. Salus",
      ". ",
      "Handbook of Programming Languages",
      " (4 vols.). Macmillan 1998.",
      "\n",
      "Ravi Sethi",
      ": ",
      "Programming Languages: Concepts and Constructs",
      ", 2nd ed., ",
      "Addison-Wesley",
      " 1996.",
      "\n",
      "Michael L. Scott",
      ": ",
      "Programming Language Pragmatics",
      ", ",
      "Morgan Kaufmann Publishers",
      " 2005.",
      "\n",
      "Robert W. Sebesta",
      ": ",
      "Concepts of Programming Languages",
      ", 9th ed., Addison Wesley 2009.",
      "\n",
      "Franklyn Turbak",
      " and ",
      "David Gifford",
      " with ",
      "Mark Sheldon",
      ": ",
      "Design Concepts in Programming Languages",
      ", The MIT Press 2009.",
      "\n",
      "Peter Van Roy",
      " and ",
      "Seif Haridi",
      ". ",
      "Concepts, Techniques, and Models of Computer Programming",
      ", The MIT Press 2004.",
      "\n",
      "David A. Watt",
      ". ",
      "Programming Language Concepts and Paradigms",
      ". Prentice Hall 1990.",
      "\n",
      "David A. Watt and ",
      "Muffy Thomas",
      ". ",
      "Programming Language Syntax and Semantics",
      ". Prentice Hall 1991.",
      "\n",
      "David A. Watt. ",
      "Programming Language Processors",
      ". Prentice Hall 1993.",
      "\n",
      "David A. Watt. ",
      "Programming Language Design Concepts",
      ". John Wiley & Sons 2004.",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Programming language",
      "at Wikipedia's ",
      "sister projects",
      "Definitions",
      " from Wiktionary",
      "\n            ",
      "Media",
      " from Wikimedia Commons",
      "\n            ",
      "News",
      " from Wikinews",
      "\n            ",
      "Quotations",
      " from Wikiquote",
      "\n            ",
      "Textbooks",
      " from Wikibooks",
      "\n            ",
      "Resources",
      " from Wikiversity",
      "\n            ",
      "Data",
      " from Wikidata",
      "\n            ",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Types of programming languages",
      "\n",
      "Actor-based",
      "\n",
      "Array",
      "\n",
      "Aspect-oriented",
      "\n",
      "Class-based",
      "\n",
      "Concatenative",
      "\n",
      "Concurrent",
      "\n",
      "Dataflow",
      "\n",
      "Declarative",
      "\n",
      "Domain-specific",
      "\n",
      "Dynamic",
      "\n",
      "Esoteric",
      "\n",
      "Event-driven",
      "\n",
      "Extensible",
      "\n",
      "Functional",
      "\n",
      "Imperative",
      "\n",
      "Logic",
      "\n",
      "Macro",
      "\n",
      "Metaprogramming",
      "\n",
      "Multi-paradigm",
      "\n",
      "Object-based",
      "\n",
      "Object-oriented",
      "\n",
      "Pipeline",
      "\n",
      "Procedural",
      "\n",
      "Prototype-based",
      "\n",
      "Reflective",
      "\n",
      "Rule-based",
      "\n",
      "Scripting",
      "\n",
      "Stack based",
      "\n",
      "Synchronous",
      "\n",
      "Tactile",
      "\n",
      "Templating",
      "\n",
      "\n",
      "Assembly",
      "\n",
      "Compiled",
      "\n",
      "Interpreted",
      "\n",
      "Machine",
      "\n",
      "\n",
      "Low-level",
      "\n",
      "High-level",
      "\n",
      "Very high-level",
      "\n",
      "\n",
      "First generation",
      "\n",
      "Second generation",
      "\n",
      "Third generation",
      "\n",
      "Fourth generation",
      "\n",
      "Fifth generation",
      "\n",
      "\n",
      "Non-English-based",
      "\n",
      "Visual",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Programming languages",
      "\n",
      "Comparison",
      "\n",
      "Timeline",
      "\n",
      "History",
      "\n",
      "\n",
      "ALGOL",
      "\n",
      "APL",
      "\n",
      "Assembly",
      "\n",
      "BASIC",
      "\n",
      "C",
      "\n",
      "C++",
      "\n",
      "C#",
      "\n",
      "COBOL",
      "\n",
      "Go",
      "\n",
      "Erlang",
      "\n",
      "Forth",
      "\n",
      "Fortran",
      "\n",
      "Haskell",
      "\n",
      "Java",
      "\n",
      "JavaScript",
      "\n",
      "Kotlin",
      "\n",
      "Lisp",
      "\n",
      "ML",
      "\n",
      "Objective-C",
      "\n",
      "Pascal",
      "\n",
      "Perl",
      "\n",
      "PHP",
      "\n",
      "Prolog",
      "\n",
      "Python",
      "\n",
      "R",
      "\n",
      "Ruby",
      "\n",
      "Rust",
      "\n",
      "SQL",
      "\n",
      "Shell",
      "\n",
      "Simula",
      "\n",
      "Smalltalk",
      "\n",
      "Swift",
      "\n",
      "more...",
      "\n",
      "\n",
      " ",
      "Category",
      "\n",
      " ",
      "Lists:",
      " ",
      "Alphabetical",
      "\n",
      "Categorical",
      "\n",
      "Generational",
      "\n",
      "Non-English-based",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Types of ",
      "computer language",
      "Types",
      "\n",
      "Architecture description",
      "\n",
      "Data exchange",
      "\n",
      "Hardware description",
      "\n",
      "Knowledge representation",
      "\n",
      "Markup",
      "\n",
      "Modeling",
      "\n",
      "Programming language",
      "\n",
      "Query",
      "\n",
      "Shading",
      "\n",
      "Specification",
      "\n",
      "Stylesheet",
      "\n",
      "Transformation",
      "\n",
      "See also",
      "\n",
      "Category:Lists of computer languages",
      "\n",
      "Category:Lists of programming languages",
      "\n",
      "List of programming languages by type",
      "\n",
      "\n",
      "Authority control",
      " ",
      "\n",
      "BNF",
      ": ",
      "cb13318353n",
      " ",
      "(data)",
      "\n",
      "GND",
      ": ",
      "4047409-4",
      "\n",
      "LCCN",
      ": ",
      "sh85107313",
      "\n",
      "NDL",
      ": ",
      "00569224",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Programming_language&oldid=982613454",
      "\""
    ],
    "lastUpdated": " 9 October 2020, at 07:05"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Jython",
    "title": "Jython",
    "text": [
      "Java implementation of Python",
      "\n",
      "Jython",
      "Initial release",
      "January\u00a017, 2001",
      "; 19\u00a0years ago",
      "\u00a0(",
      "2001-01-17",
      ")",
      "[1]",
      "Stable release",
      "2.7.2\n   / March\u00a021, 2020",
      "; 6\u00a0months ago",
      "\u00a0(",
      "2020-03-21",
      ")",
      "[2]",
      "\n",
      "Repository",
      "github",
      ".com",
      "/jython",
      "/jython",
      "/",
      "\n",
      " ",
      "Written in",
      "Python",
      " and ",
      "Java",
      "Operating system",
      "Cross-platform",
      "Platform",
      "Java Virtual Machine",
      "Type",
      "Python Programming Language ",
      "Interpreter",
      "License",
      "Python Software Foundation License",
      " (for older releases see ",
      "License terms",
      ")",
      "Website",
      "www",
      ".jython",
      ".org",
      " ",
      "\n",
      "Jython",
      " is an implementation of the ",
      "Python programming language",
      " designed to run on the ",
      "Java",
      " platform. The implementation was formerly known as ",
      "JPython",
      " until 1999.",
      "[3]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Overview",
      "\n",
      "2",
      " ",
      "History",
      "\n",
      "3",
      " ",
      "Status and roadmap",
      "\n",
      "4",
      " ",
      "License terms",
      "\n",
      "5",
      " ",
      "Usage",
      "\n",
      "6",
      " ",
      "See also",
      "\n",
      "7",
      " ",
      "References",
      "\n",
      "8",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Overview",
      "[",
      "edit",
      "]",
      "\n",
      "Jython programs can import and use any Java class. Except for some standard modules, Jython programs use Java classes instead of Python modules. Jython includes almost all of the modules in the standard ",
      "Python programming language",
      " distribution, lacking only some of the modules implemented originally in ",
      "C",
      ". For example, a user interface in Jython could be written with ",
      "Swing",
      ", ",
      "AWT",
      " or ",
      "SWT",
      ". Jython compiles Python source code to ",
      "Java bytecode",
      " (an intermediate language) either on demand or statically.\n",
      "\n",
      "History",
      "[",
      "edit",
      "]",
      "\n",
      "Jython was initially created in late 1997 to replace ",
      "C",
      " with ",
      "Java",
      " for performance-intensive code accessed by Python programs, moving to ",
      "SourceForge",
      " in October 2000. The ",
      "Python Software Foundation",
      " awarded a grant in January 2005.  Jython 2.5 was released in June 2009.",
      "[4]",
      "\n",
      "\n",
      "Status and roadmap",
      "[",
      "edit",
      "]",
      "\n",
      "The most recent release is Jython 2.7.2. It was released on 21 March 2020 and is compatible with Python 2.7.",
      "[5]",
      "\n",
      "Although Jython implements the Python language specification, it has some differences and incompatibilities with ",
      "CPython",
      ", which is the ",
      "reference implementation",
      " of Python.",
      "[6]",
      "[7]",
      "\n",
      "\n",
      "License terms",
      "[",
      "edit",
      "]",
      "\n",
      "From version 2.2 on, Jython (including the standard library) is released under the ",
      "Python Software Foundation License",
      " (v2). Older versions are covered by the ",
      "Jython 2.0, 2.1 license",
      " and the ",
      "JPython 1.1.x Software License",
      ".",
      "[8]",
      "\n",
      "The command line interpreter is available under the Apache Software License.\n",
      "\n",
      "Usage",
      "[",
      "edit",
      "]",
      "\n",
      "JBoss Application Server",
      "'s ",
      "command line interface",
      " scripting using Jython",
      "\n",
      "Oracle Weblogic Server",
      " Scripting Tool uses Jython",
      "\n",
      "IBM ",
      "Rational",
      " development tools allow Jython scripting",
      "\n",
      "IBM ",
      "WebSphere Application Server",
      " tool scripting with ",
      "wsadmin",
      " allows using Jython and ",
      "Jacl",
      "\n",
      "ZK",
      " \u2013 a Java Ajax framework that allows glue logic written in Jython",
      "\n",
      "Ignition",
      " - A software development platform focused on HMI and SCADA",
      "[9]",
      "\n",
      "Ghidra",
      " - a ",
      "reverse engineering",
      " tool developed by the ",
      "NSA",
      " allows plugins to be written in ",
      "Java",
      " or Jython",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Computer programming portal",
      "\n",
      "Free and open-source software portal",
      "\n",
      "List of Java scripting languages",
      "\n",
      "IronPython",
      " \u2013 an implementation of Python for .NET and Mono",
      "\n",
      "PyPy",
      " \u2013 a self-hosting interpreter for the Python programming language.",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Wierzbicki, Frank (22 March 2015). ",
      "\"jython: 3d8067c56a1d NEWS\"",
      ". Retrieved ",
      "28 March",
      " 2015",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\n  ",
      "Wierzbicki, Frank (26 March 2020). ",
      "\"Jython 2.7.2 final released!\"",
      ". ",
      "Frank Wierzbicki's Weblog",
      ". Retrieved ",
      "3 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\n  ",
      "\"JythonFaq/GeneralInfo - JythonWiki\"",
      ". 3 April 2014",
      ". Retrieved ",
      "28 March",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Wierzbicki, Frank (16 June 2009). ",
      "\"Jython 2.5.0 Final is out!\"",
      ". Retrieved ",
      "2 July",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"News\"",
      ". ",
      "Jython",
      ". Retrieved ",
      "19 April",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"JythonFaq\"",
      ". Jython's project",
      ". Retrieved ",
      "5 July",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Differences between CPython and Jython\"",
      ". Jython's project",
      ". Retrieved ",
      "5 July",
      " 2009",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Jython License\"",
      ". Jython's project",
      ". Retrieved ",
      "9 February",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Introducing Ignition - Ignition User Manual 7.9 - Ignition Documentation\"",
      ". ",
      "docs.inductiveautomation.com",
      ". Retrieved ",
      "24 April",
      " 2019",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      " ",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      "Implementations",
      "\n",
      "CircuitPython",
      "\n",
      "CLPython",
      "\n",
      "CPython",
      "\n",
      "Cython",
      "\n",
      "MicroPython",
      "\n",
      "Numba",
      "\n",
      "IronPython",
      "\n",
      "Jython",
      "\n",
      "Psyco",
      "\n",
      "PyPy",
      "\n",
      "Python for S60",
      "\n",
      "Shed Skin",
      "\n",
      "Stackless Python",
      "\n",
      "Unladen Swallow",
      "\n",
      "more",
      "...",
      "\n",
      "IDE",
      "\n",
      "Boa",
      "\n",
      "Eric Python IDE",
      "\n",
      "IDLE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Ninja-IDE",
      "\n",
      "more",
      "...",
      "\n",
      "Topics",
      "\n",
      "WSGI",
      "\n",
      "\n",
      "software (list)",
      "\n",
      "Python Software Foundation",
      "\n",
      "PyCon",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Java",
      "Platforms",
      "\n",
      "Java language",
      "\n",
      "JVM",
      "\n",
      "Micro Edition",
      "\n",
      "Standard Edition",
      "\n",
      "Enterprise Edition",
      "\n",
      "Java Card",
      "\n",
      "Android SDK",
      "\n",
      "Oracle technologies",
      "\n",
      "Squawk",
      "\n",
      "Java Development Kit",
      "\n",
      "OpenJDK",
      "\n",
      "Java virtual machine",
      "\n",
      "JavaFX",
      "\n",
      "Maxine VM",
      "\n",
      "Platform technologies",
      "\n",
      "Applets",
      "\n",
      "Servlets",
      "\n",
      "MIDlets",
      "\n",
      "JSP",
      "\n",
      "JSF",
      "\n",
      "Web Start (JNLP)",
      "\n",
      "Major third-party technologies",
      "\n",
      "Blackdown",
      "\n",
      "Eclipse",
      "\n",
      "GNU Classpath",
      "\n",
      "GWT",
      "\n",
      "Harmony",
      "\n",
      "Hibernate",
      "\n",
      "IcedTea",
      "\n",
      "Jazelle",
      "\n",
      "Spring",
      "\n",
      "Struts",
      "\n",
      "TopLink",
      "\n",
      "WildFly",
      "\n",
      "History",
      "\n",
      "Java version history",
      "\n",
      "Java Community Process",
      "\n",
      "Sun Microsystems",
      "\n",
      "Free Java implementations",
      "\n",
      "Major JVM languages",
      "\n",
      "BeanShell",
      "\n",
      "Clojure",
      "\n",
      "Groovy",
      "\n",
      "JRuby",
      "\n",
      "Jython",
      "\n",
      "Kotlin",
      "\n",
      "Processing",
      "\n",
      "Rhino",
      "\n",
      "Scala",
      "\n",
      "Community",
      "Conferences",
      "\n",
      "JavaOne",
      "\n",
      "Devoxx",
      "\n",
      "Organizations",
      "\n",
      "Apache Software Foundation",
      "\n",
      "Java Community Process",
      "\n",
      "Oracle Corporation",
      "\n",
      "Sun Microsystems",
      ", ",
      "Sun Microsystems Laboratories",
      "\n",
      "People",
      "\n",
      "James Gosling",
      "\n",
      "Arthur van Hoff",
      "\n",
      "Urs H\u00f6lzle",
      "\n",
      "Patrick Naughton",
      "\n",
      " ",
      "Category",
      " \u00a0\n",
      "\u00a0",
      "Computer programming portal",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Jython&oldid=980383645",
      "\""
    ],
    "lastUpdated": " 26 September 2020, at 07:18"
  },
  {
    "url": "https://en.wikipedia.org/wiki/IronPython",
    "title": "IronPython",
    "text": [
      "This article ",
      "relies too much on ",
      "references",
      " to ",
      "primary sources",
      ".",
      " Please improve this  by adding ",
      "secondary or tertiary sources",
      ".",
      "  ",
      "(",
      "January 2013",
      ")",
      " (",
      "Learn how and when to remove this template message",
      ")",
      "\n",
      "IronPython",
      "Original author(s)",
      "Jim Hugunin",
      ", ",
      "Microsoft",
      "Developer(s)",
      "Dino Viehland,",
      ".NET Foundation",
      "Initial release",
      "September\u00a05, 2006",
      "; 14\u00a0years ago",
      "\u00a0(",
      "2006-09-05",
      ")",
      "[1]",
      "Stable release",
      "2.7.10\n   / April\u00a027, 2020",
      "; 5\u00a0months ago",
      "\u00a0(",
      "2020-04-27",
      ")",
      "[2]",
      "\n",
      "Repository",
      "github",
      ".com",
      "/IronLanguages",
      "/ironpython2",
      "\n",
      " ",
      "Written in",
      "C#",
      "Operating system",
      "Windows",
      ", ",
      "Linux",
      ", ",
      "macOS",
      "Platform",
      ".NET Framework",
      ", ",
      ".NET Core",
      ", ",
      "Mono",
      "Type",
      "Python programming language",
      " implementation",
      "License",
      "Apache License 2.0",
      "Website",
      "ironpython",
      ".net",
      "\u00a0",
      "\n",
      "IronPython",
      " is an implementation of the ",
      "Python programming language",
      " targeting the ",
      ".NET Framework",
      " and ",
      "Mono",
      ". ",
      "Jim Hugunin",
      " created the project and actively contributed to it up until Version 1.0 which was released on September 5, 2006.",
      "[3]",
      " IronPython 2.0 was released on December 10, 2008.",
      "[4]",
      " After version 1.0 it was maintained by a small team at ",
      "Microsoft",
      " until the 2.7 Beta 1 release. Microsoft abandoned IronPython (and its sister project ",
      "IronRuby",
      ") in late 2010, after which Hugunin left to work at Google.",
      "[5]",
      " The project is currently maintained by a group of volunteers at ",
      "GitHub",
      ". It is free and open-source software, and can be implemented with Python Tools for Visual Studio, which is a free and open-source extension for Microsoft's ",
      "Visual Studio",
      " IDE.",
      "[6]",
      "[7]",
      "\n",
      "IronPython is written entirely in ",
      "C#",
      ", although some of its code is automatically generated by a ",
      "code generator",
      " written in Python.\n",
      "IronPython is implemented on top of the ",
      "Dynamic Language Runtime",
      " (DLR), a library running on top of the ",
      "Common Language Infrastructure",
      " that provides dynamic typing and dynamic method dispatch, among other things, for dynamic languages.",
      "[8]",
      " The DLR is part of the .NET Framework 4.0 and is also a part of Mono since version 2.4 from 2009.",
      "[9]",
      " The DLR can also be used as a library on older CLI implementations.\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Status and roadmap",
      "\n",
      "\n",
      "1.1",
      " ",
      "Differences with CPython",
      "\n",
      "\n",
      "\n",
      "2",
      " ",
      "Silverlight",
      "\n",
      "3",
      " ",
      "License",
      "\n",
      "4",
      " ",
      "Interface extensibility",
      "\n",
      "5",
      " ",
      "Examples",
      "\n",
      "6",
      " ",
      "Performance",
      "\n",
      "7",
      " ",
      "See also",
      "\n",
      "8",
      " ",
      "References",
      "\n",
      "9",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Status and roadmap",
      "[",
      "edit",
      "]",
      "\n",
      "Release 2.0, released on December 10, 2008, and updated as 2.0.3 on October 23, 2009, targets CPython 2.5.",
      "[10]",
      " IronPython 2.0.3 is only compatible up to .NET Framework 3.5.",
      "\n",
      "Release 2.6, released on December 11, 2009, and updated on April 12, 2010, targets CPython 2.6.",
      "[11]",
      " IronPython 2.6.1 versions is binary compatible only with .NET Framework 4.0. IronPython 2.6.1 must be compiled from sources to run on .NET Framework 3.5. IronPython 2.6.2, released on October 21, 2010, is binary compatible with both .NET Framework 4.0 and .NET Framework 3.5.",
      "\n",
      "Release 2.7 was released on March 12, 2011 and it targets CPython 2.7.",
      "[12]",
      "\n",
      "Release 2.7.1 was released on October 21, 2011 and it targets CPython 2.7.",
      "[13]",
      "\n",
      "Release 2.7.2.1 was released on March 13, 2012. It enables support for ",
      "ZIP file format",
      " libraries, ",
      "SQLite",
      ", and compiled executables.",
      "[14]",
      "\n",
      "Release 2.7.4 was released on September 7, 2013.",
      "[15]",
      "\n",
      "Release 2.7.5 was released on December 6, 2014 and mostly consists of bug fixes.",
      "[16]",
      "\n",
      "Release 2.7.6 was released on August 21, 2016 and only consists of bug fixes.",
      "[17]",
      "\n",
      "Release 2.7.7 was released on December 7, 2016 and only consists of bug fixes.",
      "[18]",
      "\n",
      "Release 2.7.8 was released on February 16, 2018 and consists of bug fixes, reorganized code, and an updated test infrastructure (including significant testing on ",
      "Linux",
      " under ",
      "Mono",
      "). It is also the first release to support ",
      ".NET Core",
      ".",
      "[19]",
      "\n",
      "Release 2.7.9 was released on October 9, 2018 and consists of bug fixes, reorganized code. It is intended to be the last release before IronPython 3.",
      "[2]",
      "\n",
      "Release 2.7.10 was released on April 27, 2020 and adds .NET Core 3.1 support.",
      "[20]",
      "\n",
      "Differences with CPython",
      "[",
      "edit",
      "]",
      "\n",
      "This section ",
      "needs expansion",
      ". ",
      "You can help by ",
      "adding to it",
      ".",
      "  ",
      "(",
      "July 2012",
      ")",
      "\n",
      "There are some differences between the Python reference implementation CPython and IronPython.",
      "[21]",
      " Some projects built on top of IronPython are known not to work under CPython.",
      "[22]",
      " Conversely, CPython applications that depend on extensions to the language that are implemented in C are not compatible with IronPython\n",
      "[23]",
      ", unless they are implemented in a .NET interop. For example, ",
      "NumPy",
      " was wrapped by Microsoft in 2011, allowing code and libraries dependent on it to be run directly from .NET Framework.",
      "[24]",
      "\n",
      "\n",
      "Silverlight",
      "[",
      "edit",
      "]",
      "\n",
      "IronPython is supported on ",
      "Silverlight",
      " (which is deprecated by Microsoft and already has lost support in most web browsers, except for Internet Explorer 11 that will end support for it in October 2021",
      "[25]",
      "). It can be used as a scripting engine in the browser just like the ",
      "JavaScript",
      " engine.",
      "[26]",
      " IronPython scripts are passed like simple client-side JavaScript scripts in ",
      "<script>",
      "-tags. It is then also possible to modify embedded ",
      "XAML",
      " markup.\n",
      "The technology behind this is called Gestalt.",
      "[",
      "citation needed",
      "]",
      "\n",
      "\n",
      "//DLR initialization script.\n",
      "<",
      "script",
      " ",
      "src",
      "=",
      "\"http://gestalt.ironpython.net/dlr-latest.js\"",
      " ",
      "type",
      "=",
      "\"text/javascript\"",
      "></",
      "script",
      ">",
      "\n\n//Client-side script passed to IronPython and Silverlight.\n",
      "<",
      "script",
      " ",
      "type",
      "=",
      "\"text/python\"",
      ">",
      "\n    ",
      "window",
      ".",
      "Alert",
      "(",
      "\"Hello from Python\"",
      ")",
      "\n",
      "</",
      "script",
      ">",
      "\n",
      "\n",
      "The same works for ",
      "IronRuby",
      ".\n",
      "\n",
      "License",
      "[",
      "edit",
      "]",
      "\n",
      "Until version 0.6, IronPython was released under the terms of ",
      "Common Public License",
      ".",
      "[27]",
      " Following recruitment of the project lead in August 2004, IronPython was made available as part of Microsoft's ",
      "Shared Source",
      " initiative. This license is not ",
      "OSI",
      "-approved but the authors claim it meets the open-source definition.",
      "[28]",
      " With the 2.0 alpha release, the license was changed to the ",
      "Microsoft Public License",
      ",",
      "[29]",
      " which the OSI has approved. The latest versions are released under the terms of the ",
      "Apache License 2.0",
      ".\n",
      "\n",
      "Interface extensibility",
      "[",
      "edit",
      "]",
      "\n",
      "One of IronPython's key advantages is in its function as an extensibility layer to application frameworks written in a .NET language. It is relatively simple to integrate an IronPython interpreter into an existing .NET application framework. Once in place, downstream developers can use scripts written in IronPython that interact with .NET objects in the framework, thereby extending the functionality in the framework's interface, without having to change any of the framework's code base.",
      "[30]",
      "\n",
      "IronPython makes extensive use of ",
      "reflection",
      ". When passed in a reference to a .NET object, it will automatically import the types and methods available to that object. This results in a highly intuitive experience when working with .NET objects from within an IronPython script.\n",
      "\n",
      "Examples",
      "[",
      "edit",
      "]",
      "\n",
      "The following IronPython script manipulates .NET Framework objects. This script can be supplied by a third-party client-side application developer and passed into the server-side framework through an interface. Note that neither the interface, nor the server-side code is modified to support the analytics required by the client application.\n",
      "\n",
      "from",
      " ",
      "BookService",
      " ",
      "import",
      " ",
      "BookDictionary",
      "\n \n",
      "booksWrittenByBookerPrizeWinners",
      " ",
      "=",
      " ",
      "[",
      "book",
      ".",
      "Title",
      " ",
      "for",
      " ",
      "book",
      " ",
      "in",
      " ",
      "BookDictionary",
      ".",
      "GetAllBooks",
      "()",
      " \n                                    ",
      "if",
      " ",
      "\"Booker Prize\"",
      " ",
      "in",
      " ",
      "book",
      ".",
      "Author",
      ".",
      "MajorAwards",
      "]",
      "\n",
      "\n",
      "In this case, assume that the .NET Framework implements a class, ",
      "BookDictionary",
      ", in a module called ",
      "BookService",
      ", and publishes an interface into which IronPython scripts can be sent and executed.\n",
      "This script, when sent to that interface, will iterate over the entire list of books maintained by the framework, and pick out those written by Booker Prize-winning authors.\n",
      "What's interesting is that the responsibility for writing the actual analytics reside with the client-side developer. The demands on the server-side developer are minimal, essentially just providing access to the data maintained by the server. This design pattern greatly simplifies the deployment and maintenance of complex application frameworks.\n",
      "The following script uses the .NET Framework to create a simple Hello World message.\n",
      "\n",
      "import",
      " ",
      "clr",
      "\n",
      "clr",
      ".",
      "AddReference",
      "(",
      "\"System.Windows.Forms\"",
      ")",
      "\n\n",
      "from",
      " ",
      "System.Windows.Forms",
      " ",
      "import",
      " ",
      "MessageBox",
      "\n",
      "MessageBox",
      ".",
      "Show",
      "(",
      "\"Hello World\"",
      ")",
      "\n",
      "\n",
      "Performance",
      "[",
      "edit",
      "]",
      "\n",
      "The performance characteristics of IronPython compared to ",
      "CPython",
      ", the reference implementation of Python, depends on the exact benchmark used. IronPython performs worse than CPython on most benchmarks taken with the ",
      "PyStone",
      " script but better on other benchmarks.",
      "[31]",
      "\nIronPython may perform better in Python programs that use threads or multiple cores, as it has a ",
      "JIT",
      " compiler, and also because it doesn't have the ",
      "Global Interpreter Lock",
      ".",
      "[32]",
      "[33]",
      "\n",
      "\n",
      "See also",
      "[",
      "edit",
      "]",
      "\n",
      ".mw-parser-output .portal{border:solid #aaa 1px;padding:0}.mw-parser-output .portal.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portal.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portal>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portal>ul>li{display:table-row}.mw-parser-output .portal>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portal>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}",
      "\n",
      "\n",
      "Free and open-source software portal",
      "\n",
      "Computer programming portal",
      "\n",
      "Boo",
      " \u2013 a language for the ",
      ".NET Framework",
      " and Mono with Python-inspired syntax and features borrowed from ",
      "C#",
      " and ",
      "Ruby",
      "\n",
      "Cobra",
      "\n",
      "IronScheme",
      "\n",
      "Jython",
      " \u2013 an implementation of ",
      "Python",
      " for the ",
      "Java Virtual Machine",
      "\n",
      "Cython",
      "\n",
      "pypy",
      " \u2013 a self-hosting interpreter for the Python programming language",
      "\n",
      "Tao Framework",
      "\n",
      "Unladen Swallow",
      " \u2013 A (now-defunct) branch of CPython that aimed to provide superior performance using an ",
      "LLVM",
      "-based ",
      "just-in-time",
      " compiler",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "http://ironpython.codeplex.com/releases/view/423",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"2.7.9\"",
      ". github.com",
      ". Retrieved ",
      "2018-10-09",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\"Jim Hugunin's blog: IronPython 1.0 released today!\"",
      ". 2006-09-05",
      ". Retrieved ",
      "2006-12-14",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Release dates for ironpython\"",
      ". 2008-12-10",
      ". Retrieved ",
      "2009-01-25",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Clarke, Gavin (2010-10-22). ",
      "\"Microsoft cuts loose Iron languages\"",
      ". ",
      "The Register",
      ". Retrieved ",
      "2012-04-05",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"IronPython.net\"",
      ". ",
      "IronPython.net",
      ". Retrieved ",
      "2013-07-03",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Tools for Visual Studio- Home\"",
      ". ",
      "Python Tools for Visual Studio",
      ". Retrieved ",
      "2013-07-03",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Dynamic Language Runtime Overview\"",
      ". ",
      "Microsoft",
      ". Retrieved ",
      "2014-04-01",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "https://github.com/mono/mono/commit/340222ffe8b958cd22d9eb0388488f326845b363",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.0.3\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2010-10-16",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.6\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2010-10-16",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2011-03-12",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.1\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2011-12-30",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.2.1\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2012-03-24",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.4\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2014-12-07",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.5\"",
      ". ironpython.codeplex.com",
      ". Retrieved ",
      "2014-12-07",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.6\"",
      ". github.com",
      ". Retrieved ",
      "2016-08-21",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.7\"",
      ". github.com",
      ". Retrieved ",
      "2018-01-05",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"2.7.8\"",
      ". github.com",
      ". Retrieved ",
      "2018-01-05",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"IronLanguages/ironpython2\"",
      ". ",
      "GitHub",
      ". Retrieved ",
      "2020-06-26",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Differences between IronPython 1.0 and CPython 2.4.3\"",
      ". ",
      "Microsoft",
      ". 2007-12-18",
      ". Retrieved ",
      "2008-02-09",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Foord, Michael. ",
      "\"New Project: Implementing .NET Libraries in Pure Python\"",
      ". Archived from ",
      "the original",
      " on 2008-08-30",
      ". Retrieved ",
      "2008-02-09",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Eby, Phillip. ",
      "\"Children of a Lesser Python\"",
      ". Retrieved ",
      "2008-07-09",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"NumPy and SciPy for .NET\"",
      ". Retrieved ",
      "2019-04-05",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Silverlight 5 System Requirements\"",
      ". ",
      "www.microsoft.com",
      ". Retrieved ",
      "2019-11-16",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Write browser applications in Python\"",
      ". ",
      "IronPython.net",
      ". Archived from ",
      "the original",
      " on 2013-03-17.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Original IronPython homepage\"",
      ". 2004-07-28. Archived from ",
      "the original",
      " on February 23, 2010",
      ". Retrieved ",
      "2007-05-13",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Shared Source License for IronPython\"",
      ". 2006-04-28",
      ". Retrieved ",
      "2007-05-13",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Microsoft permissive license\"",
      ". 2007-04-28",
      ". Retrieved ",
      "2007-05-13",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Using .NET objects from IronPython in Resolver One\"",
      ". Archived from ",
      "the original",
      " on 2009-01-14",
      ". Retrieved ",
      "2008-11-18",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"IronPython Performance Report\"",
      ". Retrieved ",
      "2009-10-05",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"IronPython at python.org\"",
      ". python.org",
      ". Retrieved ",
      "2011-04-04",
      ". ",
      "IronPython has no GIL and multi-threaded code can use multi core processors.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Archived copy\"",
      ". Archived from ",
      "the original",
      " on 2015-10-31",
      ". Retrieved ",
      "2015-07-15",
      ".",
      "CS1 maint: archived copy as title (",
      "link",
      ")",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "Official website",
      " ",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      "Implementations",
      "\n",
      "CircuitPython",
      "\n",
      "CLPython",
      "\n",
      "CPython",
      "\n",
      "Cython",
      "\n",
      "MicroPython",
      "\n",
      "Numba",
      "\n",
      "IronPython",
      "\n",
      "Jython",
      "\n",
      "Psyco",
      "\n",
      "PyPy",
      "\n",
      "Python for S60",
      "\n",
      "Shed Skin",
      "\n",
      "Stackless Python",
      "\n",
      "Unladen Swallow",
      "\n",
      "more",
      "...",
      "\n",
      "IDE",
      "\n",
      "Boa",
      "\n",
      "Eric Python IDE",
      "\n",
      "IDLE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Ninja-IDE",
      "\n",
      "more",
      "...",
      "\n",
      "Topics",
      "\n",
      "WSGI",
      "\n",
      "\n",
      "software (list)",
      "\n",
      "Python Software Foundation",
      "\n",
      "PyCon",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Common Language Infrastructure",
      "Architecture",
      "\n",
      "Application domain",
      "\n",
      "Code Access Security",
      "\n",
      "Common Intermediate Language",
      " (CIL)\n",
      "CIL instructions",
      "\n",
      "Common Type System",
      " (CTS)",
      "\n",
      "Platform Invocation Services",
      " (P/Invoke)",
      "\n",
      "Virtual Execution System",
      " (VES)",
      "\n",
      "Components",
      "\n",
      "Assembly",
      "\n",
      "Delegate",
      "\n",
      "Global Assembly Cache",
      " (GAC)",
      "\n",
      "Manifest",
      "\n",
      "Metadata",
      "\n",
      "Standard",
      "Libraries",
      "Kernel Profile",
      "\n",
      "Base Class Library",
      " (BCL)",
      "\n",
      "Runtime Infrastructure Library",
      "\n",
      "Compact Profile",
      "\n",
      "Network Library",
      "\n",
      "Reflection Library",
      "\n",
      "XML Library",
      "\n",
      "\n",
      "Extended Array Library",
      "\n",
      "Extended Numerics Library",
      "\n",
      "Parallel Library",
      "\n",
      "Vararg Library",
      "\n",
      "Implementations",
      "Microsoft",
      "\n",
      ".NET Core",
      "\n",
      ".NET Framework",
      "\n",
      ".NET Compact Framework",
      "\n",
      ".NET Micro Framework",
      "\n",
      "Other",
      "\n",
      "Mono",
      "\n",
      "Portable.NET",
      "\n",
      "Languages",
      "Major languages",
      "\n",
      "C#",
      "\n",
      "Visual Basic .NET",
      "\n",
      "F#",
      "\n",
      "PowerShell",
      "\n",
      "Other",
      "\n",
      "Axum",
      "\n",
      "A#",
      "\n",
      "Boo",
      "\n",
      "Cobra",
      "\n",
      "C++/CLI",
      "\n",
      "IronScheme",
      "\n",
      "IronPython",
      "\n",
      "IronRuby",
      "\n",
      "JScript .NET",
      "\n",
      "J#",
      "\n",
      "Nemerle",
      "\n",
      "Oxygene",
      "\n",
      "Phalanger",
      "\n",
      "Q#",
      "\n",
      "Scala",
      "\n",
      "Microsoft Small Basic",
      "\n",
      "Comparison",
      "\n",
      "C# and Java",
      "\n",
      "C# and Visual Basic .NET",
      "\n",
      "Java and .NET platforms",
      "\n",
      "Visual Basic and Visual Basic .NET",
      "\n",
      "Organizations",
      "\n",
      ".NET Foundation",
      "\n",
      "DotGNU",
      "\n",
      "Microsoft",
      "\n",
      "Xamarin",
      "\n",
      "\n",
      "v",
      "t",
      "e",
      "Microsoft",
      " ",
      "free and open-source software (FOSS)",
      "Overview",
      "\n",
      "Microsoft and open source",
      "\n",
      "Shared Source Initiative",
      "\n",
      "Software",
      "Applications",
      "\n",
      "Atom",
      "\n",
      "Conference XP",
      "\n",
      "File Manager",
      "\n",
      "Open Live Writer",
      "\n",
      "PowerToys for Windows 10",
      "\n",
      "Windows Calculator",
      "\n",
      "Windows Console",
      "\n",
      "Windows Package Manager",
      "\n",
      "Windows Terminal",
      "\n",
      "WorldWide Telescope",
      "\n",
      "XML Notepad",
      "\n",
      "Video games",
      "\n",
      "Allegiance",
      "\n",
      "Programming languages",
      "\n",
      "Bosque",
      "\n",
      "C#",
      "\n",
      "Dafny",
      "\n",
      "F#",
      "\n",
      "F*",
      "\n",
      "GW-BASIC",
      "\n",
      "IronPython",
      "\n",
      "IronRuby",
      "\n",
      "Lean",
      "\n",
      "P",
      "\n",
      "PowerShell",
      "\n",
      "Q#",
      "\n",
      "R Open",
      "\n",
      "Small Basic",
      "\n",
      "TypeScript",
      "\n",
      "Visual Basic .NET",
      "\n",
      "Frameworks and",
      "development tools",
      "\n",
      ".NET Bio",
      "\n",
      ".NET Core",
      "\n",
      ".NET Framework",
      "\n",
      ".NET Gadgeteer",
      "\n",
      ".NET MAUI",
      "\n",
      ".NET Micro Framework",
      "\n",
      "AirSim",
      "\n",
      "ASP.NET",
      "\n",
      "ASP.NET AJAX",
      "\n",
      "ASP.NET Core",
      "\n",
      "ASP.NET MVC",
      "\n",
      "ASP.NET Razor",
      "\n",
      "ASP.NET Web Forms",
      "\n",
      "BitFunnel",
      "\n",
      "Blazor",
      "\n",
      "C++/WinRT",
      "\n",
      "ChakraCore",
      "\n",
      "CLR Profiler",
      "\n",
      "DeepSpeed",
      "\n",
      "DiskSpd",
      "\n",
      "Dryad",
      "\n",
      "Dynamic Language Runtime",
      "\n",
      "Electron",
      "\n",
      "Entity Framework",
      "\n",
      "Fluid Framework",
      "\n",
      "Infer.NET",
      "\n",
      "LightGBM",
      "\n",
      "Managed Extensibility Framework",
      "\n",
      "Microsoft Automatic Graph Layout",
      "\n",
      "Microsoft C++ Standard Library",
      "\n",
      "Microsoft Cognitive Toolkit",
      "\n",
      "Microsoft Detours",
      "\n",
      "Microsoft Enterprise Library",
      "\n",
      "Microsoft SEAL",
      "\n",
      "Mimalloc",
      "\n",
      "ML.NET",
      "\n",
      "mod_mono",
      "\n",
      "Mono",
      "\n",
      "MonoDevelop",
      "\n",
      "MSBuild",
      "\n",
      "MsQuic",
      "\n",
      "Neural Network Intelligence",
      "\n",
      "npm",
      "\n",
      "NuGet",
      "\n",
      "Open Management Infrastructure",
      "\n",
      "Open Neural Network Exchange",
      "\n",
      "Open Service Mesh",
      "\n",
      "Open XML SDK",
      "\n",
      "Orleans",
      "\n",
      "ProcDump",
      "\n",
      "ProcMon",
      "\n",
      "Python Tools for Visual Studio",
      "\n",
      "R Tools for Visual Studio",
      "\n",
      "RecursiveExtractor",
      "\n",
      "Roslyn",
      "\n",
      "Sandcastle",
      "\n",
      "SignalR",
      "\n",
      "StyleCop",
      "\n",
      "SVNBridge",
      "\n",
      "T2 Temporal Prover",
      "\n",
      "Text Template Transformation Toolkit",
      "\n",
      "TLA+ Toolbox",
      "\n",
      "U-Prove",
      "\n",
      "vcpkg",
      "\n",
      "Virtual File System for Git",
      "\n",
      "Visual Studio Code",
      "\n",
      "Voldemort",
      "\n",
      "Vowpal Wabbit",
      "\n",
      "Windows Communication Foundation",
      "\n",
      "Windows Driver Frameworks",
      "\n",
      "Windows Forms",
      "\n",
      "Windows Presentation Foundation",
      "\n",
      "Windows Template Library",
      "\n",
      "Windows UI Library",
      "\n",
      "WinJS",
      "\n",
      "WinObjC",
      "\n",
      "WiX",
      "\n",
      "XSP",
      "\n",
      "xUnit.net",
      "\n",
      "Z3 Theorem Prover",
      "\n",
      "Operating systems",
      "\n",
      "MS-DOS",
      "\n",
      "Barrelfish",
      "\n",
      "Other",
      "\n",
      "ChronoZoom",
      "\n",
      "FlexWiki",
      "\n",
      "Gollum Wiki",
      "\n",
      "Project Mu",
      "\n",
      "SILK",
      "\n",
      "TLAPS",
      "\n",
      "TPM 2.0 Reference Implementation",
      "\n",
      "WikiBhasha",
      "\n",
      "Licenses",
      "\n",
      "Microsoft Public License",
      "\n",
      "Microsoft Reciprocal License",
      "\n",
      "Forges",
      "\n",
      "CodePlex",
      "\n",
      "GitHub",
      "\n",
      "Related",
      "\n",
      ".NET Foundation",
      "\n",
      "F Sharp Software Foundation",
      "\n",
      "Microsoft Open Specification Promise",
      "\n",
      "Open Letter to Hobbyists",
      "\n",
      "Open Source Security Foundation",
      "\n",
      "Outercurve Foundation",
      "\n",
      " ",
      "Category",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=IronPython&oldid=980858599",
      "\""
    ],
    "lastUpdated": " 28 September 2020, at 21:38"
  },
  {
    "url": "https://en.wikipedia.org/wiki/CircuitPython",
    "title": "CircuitPython",
    "text": [
      "CircuitPython",
      "Original author(s)",
      "Adafruit Industries",
      "Initial release",
      "July\u00a019, 2017",
      "; 3\u00a0years ago",
      "\u00a0(",
      "2017-07-19",
      ")",
      "[1]",
      "Stable release",
      "5.1.0\n   / April\u00a07, 2020",
      "; 6\u00a0months ago",
      "\u00a0(",
      "2020-04-07",
      ")",
      "[2]",
      "\n",
      "Repository",
      "https://github.com/adafruit/circuitpython",
      "Written in",
      "C",
      "[3]",
      "Platform",
      "microcontroller boards using the Atmel SAMD21, Atmel SAMD51, Nordic nRF52840, and ESP8266 microcontrollers, from Adafruit, SparkFun, Arduino, Particle, and others",
      "Type",
      "Python",
      " implementation",
      "License",
      "MIT license",
      "[4]",
      "Website",
      "circuitpython",
      ".org",
      "\n",
      "CircuitPython",
      "[5]",
      " is an  open source derivative of the ",
      "MicroPython",
      " programming language targeted towards the student and beginner. Development of CircuitPython is supported by ",
      "Adafruit Industries",
      ". It is a ",
      "software",
      " implementation of the ",
      "Python",
      " 3 ",
      "programming language",
      ", written in ",
      "C",
      ".",
      "[3]",
      " It has been ported to run on several modern ",
      "microcontrollers",
      ".\n",
      "CircuitPython is a full Python compiler and runtime that runs on the microcontroller hardware. The user is presented with an interactive prompt (the ",
      "REPL",
      ") to execute supported commands immediately. Included are a selection of core Python libraries. CircuitPython includes modules which give the programmer access to the low-level hardware of Adafruit compatible products as well as higher level libraries for beginners.",
      "[6]",
      "\n",
      "CircuitPython is a fork of MicroPython, originally created by Damien George.",
      "[7]",
      " The MicroPython community continues to discuss",
      "[8]",
      " forks of MicroPython into variants such as CircuitPython.\n",
      "CircuitPython is targeted to be compliant with ",
      "CPython",
      ", the reference implementation of the Python programming language.",
      "[9]",
      " Programs written for CircuitPython compatible boards may not run unmodified on other platforms such as the ",
      "Raspberry Pi",
      ".",
      "[10]",
      "\n",
      "\n",
      "Contents",
      "\n",
      "\n",
      "1",
      " ",
      "Usage",
      "\n",
      "2",
      " ",
      "Community",
      "\n",
      "3",
      " ",
      "Availability",
      "\n",
      "4",
      " ",
      "References",
      "\n",
      "5",
      " ",
      "External links",
      "\n",
      "\n",
      "\n\n",
      "Usage",
      "[",
      "edit",
      "]",
      "\n",
      "CircuitPython is being used as an emerging alternative solution for microcontroller programming, which is usually done with C, C++ or ",
      "Arduino",
      ".",
      "[11]",
      " The language has also seen uptake in making small, ",
      "handheld video game",
      " devices.",
      "[12]",
      "[",
      "better\u00a0source\u00a0needed",
      "]",
      " Developer Chris Young has ported his ",
      "infrared",
      " receive/transmit software to CircuitPython to provide interactivity and to aid those with ",
      "accessibility",
      " issues.",
      "[13]",
      "\n",
      "\n",
      "Community",
      "[",
      "edit",
      "]",
      "\n",
      "The user community support includes a ",
      "Discord",
      " chat room and product support forums.",
      "[14]",
      " A ",
      "Twitter",
      " account dedicated to CircuitPython news was established in 2018.",
      "[15]",
      "\n",
      "\n",
      "Availability",
      "[",
      "edit",
      "]",
      "\n",
      "The current stable version is 5.1.0 with support for the ",
      "Microchip Technology",
      " ",
      "Atmel",
      " SAMD21 and SAMD51 ",
      "microcontrollers",
      "[16]",
      " and the ",
      "Nordic Semiconductor",
      " nRF52840 microcontroller. Previous versions supported the ",
      "ESP8266",
      " microcontroller, but support was dropped in version 4.",
      "[17]",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Shawcroft, Scott. ",
      "\"CircuitPython 1.0.0!\"",
      ". ",
      "Adafruit Blog",
      ". Adafruit Industries",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "Halbert, Dan. ",
      "\"CircuitPython 4.1.2 released!\"",
      ". ",
      "Adafruit Blog",
      ". Adafruit Industries",
      ". Retrieved ",
      "18 December",
      " 2019",
      ".",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "\"adafruit/circuitpython\"",
      ". ",
      "GitHub",
      ". ",
      "Adafruit Industries",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "George, Damien P. (4 May 2014). ",
      "\"circuitpython/LICENSE\"",
      ". ",
      "GitHub",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CircuitPython is an education friendly open source derivative of MicroPython\"",
      ". Retrieved ",
      "30 April",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CircuitPython\"",
      ". ",
      "Read the Docs",
      ". Adafruit Industries",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "George, Damien (20 May 2016). ",
      "\"Damien P. George\"",
      ". Damien P. George",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Adafruit CircuitPython\"",
      ". ",
      "MicroPython Forum",
      ". MicroPython.org",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Lewis, James. ",
      "\"Circuit Python adds Python to Microcontrollers\"",
      ". ",
      "The Bald Engineer",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Ganne, Simon. ",
      "\"Can I use circuitPython code on my raspberry?\"",
      ". ",
      "Element 14 Community",
      ". Element 14.",
      "\n",
      "\n",
      "^",
      " ",
      "Cass, Stephen. ",
      "\"Build an Illuminated Halloween Costume With the Wearable Gemma M0 Microcontroller\"",
      ". ",
      "IEEE Spectrum",
      ". ",
      "IEEE",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dopieralski, Radomir. ",
      "\"CircuitPython LAMEBOY\"",
      ". ",
      "BitBucket",
      ". BitBucket",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Young, Chris (6 June 2018). ",
      "\"Announcing IRLibCP \u2014 a Circuit Python Module for Infrared Transmitting and Receiving\"",
      ". ",
      "CY's Tech Talk",
      ". Chris Young",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Adafruit CircuitPython and MicroPython\"",
      ". ",
      "Adafruit Support Forums",
      ". Adafruit Industries",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"CircuitPython\"",
      ". ",
      "Twitter",
      ". Adfafruit Industries",
      ". Retrieved ",
      "1 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Kraft, Caleb. ",
      "\"CircuitPython Snakes its Way onto Adafruit Hardware\"",
      ". ",
      "Makezine",
      ". Maker Media, Inc",
      ". Retrieved ",
      "2 May",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Why are we dropping support for ESP8266?\"",
      ". ",
      "Adafruit.com",
      ". Adafruit Industries",
      ". Retrieved ",
      "15 April",
      " 2019",
      ".",
      "\n",
      "\n",
      "\n",
      "External links",
      "[",
      "edit",
      "]",
      "\n",
      "CircuitPython",
      " on ",
      "GitHub",
      "\n",
      "MicroPython",
      " playlist on ",
      "YouTube",
      " \u2022 Tutorials by Tony DiCola / ",
      "Adafruit",
      "\n",
      "v",
      "t",
      "e",
      "Python",
      "Implementations",
      "\n",
      "CircuitPython",
      "\n",
      "CLPython",
      "\n",
      "CPython",
      "\n",
      "Cython",
      "\n",
      "MicroPython",
      "\n",
      "Numba",
      "\n",
      "IronPython",
      "\n",
      "Jython",
      "\n",
      "Psyco",
      "\n",
      "PyPy",
      "\n",
      "Python for S60",
      "\n",
      "Shed Skin",
      "\n",
      "Stackless Python",
      "\n",
      "Unladen Swallow",
      "\n",
      "more",
      "...",
      "\n",
      "IDE",
      "\n",
      "Boa",
      "\n",
      "Eric Python IDE",
      "\n",
      "IDLE",
      "\n",
      "PyCharm",
      "\n",
      "PyDev",
      "\n",
      "Ninja-IDE",
      "\n",
      "more",
      "...",
      "\n",
      "Topics",
      "\n",
      "WSGI",
      "\n",
      "\n",
      "software (list)",
      "\n",
      "Python Software Foundation",
      "\n",
      "PyCon",
      "\n",
      "\n",
      "\n",
      "\n",
      "This ",
      "software",
      " article is a ",
      "stub",
      ". You can help Wikipedia by ",
      "expanding it",
      ".",
      "v",
      "t",
      "e",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=CircuitPython&oldid=964095259",
      "\""
    ],
    "lastUpdated": " 23 June 2020, at 15:24"
  },
  {
    "url": "https://en.wikipedia.org/wiki/Benevolent_Dictator_For_Life",
    "title": "Benevolent dictator for life",
    "text": [
      "\n",
      "\n",
      "For the political term, see ",
      "Benevolent dictatorship",
      ".",
      "\n",
      "Benevolent dictator for life",
      " (",
      "BDFL",
      ") is a title given to a small number of ",
      "open-source software development",
      " leaders, typically project founders who retain the final say in disputes or arguments within the community. The phrase originated in 1995 with reference to ",
      "Guido van Rossum",
      ", creator of the ",
      "Python programming language",
      ".",
      "[1]",
      "[2]",
      " Shortly after Van Rossum joined the ",
      "Corporation for National Research Initiatives",
      ", the term appeared in a follow-up mail by ",
      "Ken Manheimer",
      " to a meeting trying to create a semi-formal group that would oversee Python development and workshops; this initial use included an additional joke of naming Van Rossum the \"First Interim BDFL\".",
      "[1]",
      " Van Rossum announced on July 12, 2018, that he would be stepping down as BDFL of Python.",
      "[3]",
      "\n",
      "BDFL should not be confused with the more common term for open-source leaders, \"benevolent dictator\", which was popularized by ",
      "Eric S. Raymond",
      "'s essay \"",
      "Homesteading the Noosphere",
      "\" (1999).",
      "[4]",
      " Among other topics related to ",
      "hacker culture",
      ", Raymond elaborates on how the nature of open source forces the \"dictatorship\" to keep itself benevolent, since a strong disagreement can lead to the ",
      "forking",
      " of the project under the rule of new leaders.\n",
      "\n",
      "Referent candidates",
      "[",
      "edit",
      "]",
      "\n",
      "\n\n",
      "\n",
      "Name\n",
      "\n",
      "Project\n",
      "\n",
      "Type\n",
      "\n",
      "Reference\n",
      "\n",
      "\n",
      "Sylvain Benner\n",
      "\n",
      "Spacemacs",
      "\n",
      "\n",
      "Community-driven ",
      "Emacs",
      " distribution\n",
      "\n",
      "[5]",
      "\n",
      "\n",
      "\n",
      "Vitalik Buterin",
      "\n",
      "\n",
      "Ethereum",
      "\n",
      "\n",
      "Blockchain-based cryptocurrency\n",
      "\n",
      "[6]",
      "\n",
      "\n",
      "\n",
      "Dries Buytaert",
      "\n",
      "\n",
      "Drupal",
      "\n",
      "\n",
      "Content management framework\n",
      "\n",
      "[7]",
      "\n",
      "\n",
      "\n",
      "Haoyuan Li",
      "\n",
      "\n",
      "Alluxio",
      "\n",
      "\n",
      "Data Orchestration System\n",
      "\n",
      "[8]",
      "\n",
      "\n",
      "\n",
      "Evan Czaplicki\n",
      "\n",
      "Elm",
      "\n",
      "\n",
      "Front-end web programming language\n",
      "\n",
      "[9]",
      "[10]",
      "\n",
      "\n",
      "\n",
      "David Heinemeier Hansson",
      "\n",
      "\n",
      "Ruby on Rails",
      "\n",
      "\n",
      "Web framework\n",
      "\n",
      "[11]",
      "\n",
      "\n",
      "\n",
      "Rich Hickey",
      "\n",
      "\n",
      "Clojure",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[12]",
      "\n",
      "\n",
      "\n",
      "Adrian Holovaty",
      " ",
      "and Jacob Kaplan-Moss\n",
      "\n",
      "Django",
      "\n",
      "\n",
      "Web framework\n",
      "\n",
      "[13]",
      "\n",
      "\n",
      "\n",
      "Laurent Destailleur\n",
      "\n",
      "Dolibarr ERP CRM",
      "\n",
      "\n",
      "Software suite for ",
      "Enterprise Resource Planning",
      " and ",
      "Customer Relationship Management",
      "\n",
      "\n",
      "[14]",
      "\n",
      "\n",
      "\n",
      "Francois Chollet\n",
      "\n",
      "Keras",
      "\n",
      "\n",
      "Deep learning framework\n",
      "\n",
      "[15]",
      "\n",
      "\n",
      "\n",
      "Xavier Leroy",
      "\n",
      "\n",
      "OCaml",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[16]",
      "[17]",
      "\n",
      "\n",
      "\n",
      "Yukihiro Matsumoto (Matz)",
      "\n",
      "\n",
      "Ruby",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[18]",
      "\n",
      "\n",
      "\n",
      "Wes McKinney",
      "\n",
      "\n",
      "Pandas",
      "\n",
      "\n",
      "Python data analysis library\n",
      "\n",
      "[19]",
      "\n",
      "\n",
      "\n",
      "Bram Moolenaar",
      "\n",
      "\n",
      "Vim",
      "\n",
      "\n",
      "Text editor\n",
      "\n",
      "[20]",
      "\n",
      "\n",
      "\n",
      "Matt Mullenweg",
      " ",
      "[a]",
      "\n",
      "\n",
      "WordPress",
      "\n",
      "\n",
      "Content management framework\n",
      "\n",
      "[21]",
      "\n",
      "\n",
      "\n",
      "Martin Odersky",
      "\n",
      "\n",
      "Scala",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[22]",
      "\n",
      "\n",
      "\n",
      "Taylor Otwell\n",
      "\n",
      "Laravel",
      "\n",
      "\n",
      "Web framework\n",
      "\n",
      "[23]",
      "[24]",
      "\n",
      "\n",
      "\n",
      "Theo de Raadt",
      "\n",
      "\n",
      "OpenBSD",
      "\n",
      "\n",
      "A ",
      "Unix",
      " operating system\n",
      "\n",
      "[25]",
      "\n",
      "\n",
      "\n",
      "Ton Roosendaal",
      "[b]",
      "\n",
      "\n",
      "Blender",
      "\n",
      "\n",
      "3D computer graphics software\n",
      "\n",
      "[26]",
      "\n",
      "\n",
      "\n",
      "S\u00e9bastien Ros\n",
      "\n",
      "Orchard Project",
      "\n",
      "\n",
      "Content management system\n",
      "\n",
      "[27]",
      "\n",
      "\n",
      "\n",
      "Mark Shuttleworth",
      "[c]",
      "\n",
      "\n",
      "Ubuntu",
      "\n",
      "\n",
      "Linux",
      " distribution\n",
      "\n",
      "[28]",
      "\n",
      "\n",
      "\n",
      "Don Syme",
      "[d]",
      "\n",
      "\n",
      "F#",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[29]",
      "\n",
      "\n",
      "\n",
      "Linus Torvalds",
      "[e]",
      "\n",
      "\n",
      "Linux",
      "\n",
      "\n",
      "Operating system kernel\n",
      "\n",
      "[11]",
      "[30]",
      "\n",
      "\n",
      "\n",
      "Jos\u00e9 Valim\n",
      "\n",
      "Elixir",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[31]",
      "\n",
      "\n",
      "\n",
      "Pauli Virtanen\n",
      "\n",
      "SciPy",
      "\n",
      "\n",
      "Python",
      " library used for scientific and technical computing\n",
      "\n",
      "[32]",
      "[33]",
      "\n",
      "\n",
      "\n",
      "Patrick Volkerding",
      "\n",
      "\n",
      "Slackware",
      "\n",
      "\n",
      "GNU",
      "/",
      "Linux",
      " distribution\n",
      "\n",
      "[34]",
      "\n",
      "\n",
      "\n",
      "Nathan Voxland\n",
      "\n",
      "Liquibase",
      "\n",
      "\n",
      "Database schema management\n",
      "\n",
      "[35]",
      "\n",
      "\n",
      "\n",
      "Shaun Walker\n",
      "\n",
      "DotNetNuke",
      "\n",
      "\n",
      "Web application framework\n",
      "\n",
      "[36]",
      "\n",
      "\n",
      "\n",
      "Larry Wall",
      "\n",
      "\n",
      "Perl",
      "\n",
      "\n",
      "Programming language\n",
      "\n",
      "[37]",
      "\n",
      "\n",
      "\n",
      "Jeremy Soller",
      "[38]",
      "\n",
      "\n",
      "Redox",
      "\n",
      "\n",
      "Operating system\n",
      "\n",
      "[39]",
      "\n",
      "\n",
      "\n",
      "Stephen Wolfram",
      "[f]",
      "\n",
      "\n",
      "Wolfram Language",
      "\n",
      "\n",
      "Programming Language\n",
      "\n",
      "[40]",
      "\n",
      "\n",
      "\n",
      "Eugen Rochko\n",
      "\n",
      "Mastodon",
      "\n",
      "\n",
      "open source, decentralized social network\n",
      "\n",
      "[41]",
      "\n",
      "\n",
      "\n",
      "Dylan Araps\n",
      "\n",
      "KISS Linux\n",
      "\n",
      "a bare-bones ",
      "Linux",
      " distribution based on ",
      "musl",
      " libc and ",
      "BusyBox",
      "\n",
      "\n",
      "[42]",
      "\n",
      "\n",
      "\n",
      "Gavin Mendel-Gleason",
      "[g]",
      "\n",
      "\n",
      "TerminusDB",
      "\n",
      "\n",
      "Open-source graph database for knowledge graph representation\n",
      "\n",
      "[43]",
      "[44]",
      "\n",
      "\n",
      "Organizational Positions",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^",
      " ",
      "Lead Developer at the WordPress Foundation",
      "\n",
      "\n",
      "^",
      " ",
      "Chairman of the ",
      "Blender Foundation",
      "\n",
      "\n",
      "^",
      " ",
      "Until December 2009, CEO of ",
      "Canonical Ltd",
      "\n",
      "\n",
      "^",
      " ",
      "Technical Advisor at the ",
      "F# Software Foundation",
      "\n",
      "\n",
      "^",
      " ",
      "Sponsee of the ",
      "Linux Foundation",
      ". Also holds the trademark for Linux",
      "\n",
      "\n",
      "^",
      " ",
      "CEO of ",
      "Wolfram Research",
      "\n",
      "\n",
      "^",
      " ",
      "CTO of ",
      "TerminusDB",
      "\n",
      "\n",
      "\n",
      "References",
      "[",
      "edit",
      "]",
      "\n",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Guido van Rossum (July 31, 2008). ",
      "\"Origin of BDFL\"",
      ". Artima.com. ",
      "Archived",
      " from the original on July 21, 2012",
      ". Retrieved ",
      "August 1,",
      " 2008",
      ".",
      ".mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}",
      "\n",
      "\n",
      "^",
      " ",
      "\"Python Creator Scripts Inside Google\"",
      ". ",
      "eWeek",
      ". March 6, 2006. ",
      "Archived",
      " from the original on August 9, 2018",
      ". Retrieved ",
      "May 13,",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Van Rossum, Guido (July 12, 2018). ",
      "\"Transfer of power\"",
      ". ",
      "mail.python.org",
      ". ",
      "Archived",
      " from the original on July 12, 2018",
      ". Retrieved ",
      "August 9,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Eric S. Raymond (2000). ",
      "\"Homesteading the Noosphere \u00a7 Project Structures and Ownership\"",
      ". ",
      "Eric S. Raymond's Home Page",
      ". ",
      "Archived",
      " from the original on July 1, 2012",
      ". Retrieved ",
      "August 1,",
      " 2008",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Spacemacs COMMUNITY.org\"",
      ". Retrieved ",
      "August 24,",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"",
      "Ethereum's Boy King Is Thinking About Giving Up the Mantle",
      "\"",
      "\n",
      "\n",
      "^",
      " ",
      "Randy Fay, \"",
      "How Do Open Source Communities Govern Themselves?",
      "\"",
      "\n",
      "\n",
      "^",
      " ",
      "Introducing Alluxio Open Source Project Governance \"",
      "[1]",
      "\"",
      "\n",
      "\n",
      "^",
      " ",
      "\"56: Ember vs. Elm: The Showdown with Philip Poots | The Frontside Podcast\"",
      ". ",
      "The Frontside Podcast",
      ". Archived from ",
      "the original",
      " on November 16, 2018",
      ". Retrieved ",
      "August 14,",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "elm-conf (September 19, 2016), ",
      "\"Code is the Easy Part\" by Evan Czaplicki",
      ", retrieved ",
      "August 14,",
      " 2017",
      "\n",
      "\n",
      "^ ",
      "a",
      " ",
      "b",
      " ",
      "Constine, Josh (December 7, 2012). ",
      "\"Dropbox Hires Away Google's Guido Van Rossum, The Father Of Python\"",
      ". TechCrunch",
      ". Retrieved ",
      "June 1,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Clojure JIRA Workflow\"",
      ". Archived from ",
      "the original",
      " on November 13, 2015",
      ". Retrieved ",
      "October 3,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Adrian and Jacob retiring as Django BDFLs\"",
      ". Adrian Holovaty. January 12, 2014",
      ". Retrieved ",
      "June 14,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Dolibarr project organization, different roles of actors\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Keras API Special Interest Group, Leadership\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"A History of OCaml | OCaml.org\"",
      ". Retrieved ",
      "September 18,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"OCaml Infrastructure mailing list\"",
      ". Retrieved ",
      "September 18,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"A Ruby Design Process\"",
      ". Retrieved ",
      "April 17,",
      " 2016",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"pandas 0.20.3 documentation: Tutorials\"",
      ". Retrieved ",
      "July 24,",
      " 2017",
      ".",
      " \"Wes McKinney's (pandas BDFL) blog\"",
      "\n",
      "\n",
      "^",
      " ",
      "\"Why Neovim is Better than Vim\"",
      ". Retrieved ",
      "September 30,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Thesis, Automattic, and WordPress | Post Status\"",
      ". Retrieved ",
      "July 24,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Programming in Scala Leaps onto the World Stage!\"",
      ". Retrieved ",
      "November 25,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Taylor Otwell, Twitter\"",
      ". Taylor Otwell. October 9, 2014",
      ". Retrieved ",
      "October 9,",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Taylor Otwell, Creator of the Laravel PHP Framework\"",
      ". August 5, 2014",
      ". Retrieved ",
      "August 5,",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Hildebrand, Matthew (July 5, 2005). ",
      "\"Interview: Theo de Raadt on Industry and Free Software\"",
      ". ",
      "The Epoch Times",
      ". The Epoch Times. Archived from ",
      "the original",
      " on June 21, 2015",
      ". Retrieved ",
      "June 20,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Developer Intro/Overview\"",
      ". Retrieved ",
      "July 20,",
      " 2018",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Orchard Project Steering Committee\"",
      ". Archived from ",
      "the original",
      " on August 12, 2015.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Ubuntu carves niche in Linux landscape\"",
      ". ",
      "CNET",
      ". Archived from ",
      "the original",
      " on November 6, 2015.",
      "\n",
      "\n",
      "^",
      " ",
      "\"Contributing to the F# Language and Compiler\"",
      ". Retrieved ",
      "September 29,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Dee-Ann LeBlanc (July 31, 2006). ",
      "Linux For Dummies",
      " (7th ed.). John Wiley & Sons. p.\u00a015. ",
      "ISBN",
      "\u00a0",
      "978-0-470-04793-4",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Elixir Companies\"",
      ". Retrieved ",
      "November 1,",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"SciPy 1.0.0\"",
      ". Retrieved ",
      "October 27,",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"SciPy project governance\"",
      ". Retrieved ",
      "October 27,",
      " 2017",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Stories of Linux: A Look at Slackware Linux\"",
      ". ",
      "linux.com",
      ". Archived from ",
      "the original",
      " on October 30, 2014",
      ". Retrieved ",
      "September 21,",
      " 2014",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"User and Developer Community | Post Status\"",
      ". Retrieved ",
      "August 13,",
      " 2015",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "Book: Building Websites with DotNetNuke 5, Michael Washington and Ian Lackey, Packt Publishing. Page 14 \"The core team comprises individuals invited to join the team by Shaun Walker, whom they affectionately call the \"Benevolent Dictator\".\"",
      "\n",
      "\n",
      "^",
      " ",
      "\"The Art of Ballistic Programming\"",
      ". Archived from ",
      "the original",
      " on June 17, 2013.",
      "\n",
      "\n",
      "^",
      " ",
      "https://gitlab.redox-os.org/jackpot51",
      "\n",
      "\n",
      "^",
      " ",
      "\"CONTRIBUTING.md \u00b7 master \u00b7 redox-os / redox\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Wolfram Language (Mathematica) vs. Python for Data Science Projects\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"Mastodon is crumbling\u2014and many blame its creator\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"KISS team\"",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TerminusDB, Twitter\"",
      ". May 6, 2020",
      ". Retrieved ",
      "May 6,",
      " 2020",
      ".",
      "\n",
      "\n",
      "^",
      " ",
      "\"TerminusDB \u2014 what's in a name?\"",
      ". TerminusDB. August 21, 2019",
      ". Retrieved ",
      "May 8,",
      " 2020",
      ".",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n\n",
      "\n",
      "\n",
      "Retrieved from \"",
      "https://en.wikipedia.org/w/index.php?title=Benevolent_dictator_for_life&oldid=980893691",
      "\""
    ],
    "lastUpdated": " 29 September 2020, at 03:08"
  }